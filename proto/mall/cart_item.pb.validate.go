// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: portal/cart_item.proto

package mall

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CartItemAddReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CartItemAddReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CartItemAddReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CartItemAddReqMultiError,
// or nil if none found.
func (m *CartItemAddReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CartItemAddReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProductId() < 0 {
		err := CartItemAddReqValidationError{
			field:  "ProductId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ProductAttr

	// no validation rules for ProductSkuId

	// no validation rules for ProductSkuCode

	// no validation rules for Quantity

	if len(errors) > 0 {
		return CartItemAddReqMultiError(errors)
	}

	return nil
}

// CartItemAddReqMultiError is an error wrapping multiple validation errors
// returned by CartItemAddReq.ValidateAll() if the designated constraints
// aren't met.
type CartItemAddReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CartItemAddReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CartItemAddReqMultiError) AllErrors() []error { return m }

// CartItemAddReqValidationError is the validation error returned by
// CartItemAddReq.Validate if the designated constraints aren't met.
type CartItemAddReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CartItemAddReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CartItemAddReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CartItemAddReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CartItemAddReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CartItemAddReqValidationError) ErrorName() string { return "CartItemAddReqValidationError" }

// Error satisfies the builtin error interface
func (e CartItemAddReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCartItemAddReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CartItemAddReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CartItemAddReqValidationError{}

// Validate checks the field values on CartItemAddRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CartItemAddRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CartItemAddRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CartItemAddRspMultiError,
// or nil if none found.
func (m *CartItemAddRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *CartItemAddRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CartItemAddRspMultiError(errors)
	}

	return nil
}

// CartItemAddRspMultiError is an error wrapping multiple validation errors
// returned by CartItemAddRsp.ValidateAll() if the designated constraints
// aren't met.
type CartItemAddRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CartItemAddRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CartItemAddRspMultiError) AllErrors() []error { return m }

// CartItemAddRspValidationError is the validation error returned by
// CartItemAddRsp.Validate if the designated constraints aren't met.
type CartItemAddRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CartItemAddRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CartItemAddRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CartItemAddRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CartItemAddRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CartItemAddRspValidationError) ErrorName() string { return "CartItemAddRspValidationError" }

// Error satisfies the builtin error interface
func (e CartItemAddRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCartItemAddRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CartItemAddRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CartItemAddRspValidationError{}

// Validate checks the field values on CartItemListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CartItemListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CartItemListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CartItemListReqMultiError, or nil if none found.
func (m *CartItemListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CartItemListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CartItemListReqMultiError(errors)
	}

	return nil
}

// CartItemListReqMultiError is an error wrapping multiple validation errors
// returned by CartItemListReq.ValidateAll() if the designated constraints
// aren't met.
type CartItemListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CartItemListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CartItemListReqMultiError) AllErrors() []error { return m }

// CartItemListReqValidationError is the validation error returned by
// CartItemListReq.Validate if the designated constraints aren't met.
type CartItemListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CartItemListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CartItemListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CartItemListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CartItemListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CartItemListReqValidationError) ErrorName() string { return "CartItemListReqValidationError" }

// Error satisfies the builtin error interface
func (e CartItemListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCartItemListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CartItemListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CartItemListReqValidationError{}

// Validate checks the field values on CartItemListRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CartItemListRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CartItemListRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CartItemListRspMultiError, or nil if none found.
func (m *CartItemListRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *CartItemListRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CartItemListRspValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CartItemListRspValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CartItemListRspValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CartItemListRspMultiError(errors)
	}

	return nil
}

// CartItemListRspMultiError is an error wrapping multiple validation errors
// returned by CartItemListRsp.ValidateAll() if the designated constraints
// aren't met.
type CartItemListRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CartItemListRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CartItemListRspMultiError) AllErrors() []error { return m }

// CartItemListRspValidationError is the validation error returned by
// CartItemListRsp.Validate if the designated constraints aren't met.
type CartItemListRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CartItemListRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CartItemListRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CartItemListRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CartItemListRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CartItemListRspValidationError) ErrorName() string { return "CartItemListRspValidationError" }

// Error satisfies the builtin error interface
func (e CartItemListRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCartItemListRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CartItemListRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CartItemListRspValidationError{}

// Validate checks the field values on CartItemListPromotionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CartItemListPromotionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CartItemListPromotionReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CartItemListPromotionReqMultiError, or nil if none found.
func (m *CartItemListPromotionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CartItemListPromotionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CartItemListPromotionReqMultiError(errors)
	}

	return nil
}

// CartItemListPromotionReqMultiError is an error wrapping multiple validation
// errors returned by CartItemListPromotionReq.ValidateAll() if the designated
// constraints aren't met.
type CartItemListPromotionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CartItemListPromotionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CartItemListPromotionReqMultiError) AllErrors() []error { return m }

// CartItemListPromotionReqValidationError is the validation error returned by
// CartItemListPromotionReq.Validate if the designated constraints aren't met.
type CartItemListPromotionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CartItemListPromotionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CartItemListPromotionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CartItemListPromotionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CartItemListPromotionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CartItemListPromotionReqValidationError) ErrorName() string {
	return "CartItemListPromotionReqValidationError"
}

// Error satisfies the builtin error interface
func (e CartItemListPromotionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCartItemListPromotionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CartItemListPromotionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CartItemListPromotionReqValidationError{}

// Validate checks the field values on CartPromotionItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CartPromotionItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CartPromotionItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CartPromotionItemMultiError, or nil if none found.
func (m *CartPromotionItem) ValidateAll() error {
	return m.validate(true)
}

func (m *CartPromotionItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for MemberId

	// no validation rules for ProductId

	// no validation rules for ProductName

	// no validation rules for ProductPic

	// no validation rules for ProductSubTitle

	// no validation rules for ProductSn

	// no validation rules for ProductBrand

	// no validation rules for ProductCategoryId

	// no validation rules for ProductSkuId

	// no validation rules for ProductSkuCode

	// no validation rules for ProductAttr

	// no validation rules for Price

	// no validation rules for Quantity

	// no validation rules for MemberNickname

	// no validation rules for PromotionMessage

	// no validation rules for ReduceAmount

	// no validation rules for RealStock

	// no validation rules for Integration

	// no validation rules for Growth

	if len(errors) > 0 {
		return CartPromotionItemMultiError(errors)
	}

	return nil
}

// CartPromotionItemMultiError is an error wrapping multiple validation errors
// returned by CartPromotionItem.ValidateAll() if the designated constraints
// aren't met.
type CartPromotionItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CartPromotionItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CartPromotionItemMultiError) AllErrors() []error { return m }

// CartPromotionItemValidationError is the validation error returned by
// CartPromotionItem.Validate if the designated constraints aren't met.
type CartPromotionItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CartPromotionItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CartPromotionItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CartPromotionItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CartPromotionItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CartPromotionItemValidationError) ErrorName() string {
	return "CartPromotionItemValidationError"
}

// Error satisfies the builtin error interface
func (e CartPromotionItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCartPromotionItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CartPromotionItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CartPromotionItemValidationError{}

// Validate checks the field values on CartItemListPromotionRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CartItemListPromotionRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CartItemListPromotionRsp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CartItemListPromotionRspMultiError, or nil if none found.
func (m *CartItemListPromotionRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *CartItemListPromotionRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CartItemListPromotionRspValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CartItemListPromotionRspValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CartItemListPromotionRspValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CartItemListPromotionRspMultiError(errors)
	}

	return nil
}

// CartItemListPromotionRspMultiError is an error wrapping multiple validation
// errors returned by CartItemListPromotionRsp.ValidateAll() if the designated
// constraints aren't met.
type CartItemListPromotionRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CartItemListPromotionRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CartItemListPromotionRspMultiError) AllErrors() []error { return m }

// CartItemListPromotionRspValidationError is the validation error returned by
// CartItemListPromotionRsp.Validate if the designated constraints aren't met.
type CartItemListPromotionRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CartItemListPromotionRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CartItemListPromotionRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CartItemListPromotionRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CartItemListPromotionRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CartItemListPromotionRspValidationError) ErrorName() string {
	return "CartItemListPromotionRspValidationError"
}

// Error satisfies the builtin error interface
func (e CartItemListPromotionRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCartItemListPromotionRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CartItemListPromotionRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CartItemListPromotionRspValidationError{}

// Validate checks the field values on CartItemUpdateQuantityReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CartItemUpdateQuantityReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CartItemUpdateQuantityReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CartItemUpdateQuantityReqMultiError, or nil if none found.
func (m *CartItemUpdateQuantityReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CartItemUpdateQuantityReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Quantity

	if len(errors) > 0 {
		return CartItemUpdateQuantityReqMultiError(errors)
	}

	return nil
}

// CartItemUpdateQuantityReqMultiError is an error wrapping multiple validation
// errors returned by CartItemUpdateQuantityReq.ValidateAll() if the
// designated constraints aren't met.
type CartItemUpdateQuantityReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CartItemUpdateQuantityReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CartItemUpdateQuantityReqMultiError) AllErrors() []error { return m }

// CartItemUpdateQuantityReqValidationError is the validation error returned by
// CartItemUpdateQuantityReq.Validate if the designated constraints aren't met.
type CartItemUpdateQuantityReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CartItemUpdateQuantityReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CartItemUpdateQuantityReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CartItemUpdateQuantityReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CartItemUpdateQuantityReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CartItemUpdateQuantityReqValidationError) ErrorName() string {
	return "CartItemUpdateQuantityReqValidationError"
}

// Error satisfies the builtin error interface
func (e CartItemUpdateQuantityReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCartItemUpdateQuantityReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CartItemUpdateQuantityReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CartItemUpdateQuantityReqValidationError{}

// Validate checks the field values on CartItemUpdateQuantityRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CartItemUpdateQuantityRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CartItemUpdateQuantityRsp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CartItemUpdateQuantityRspMultiError, or nil if none found.
func (m *CartItemUpdateQuantityRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *CartItemUpdateQuantityRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CartItemUpdateQuantityRspMultiError(errors)
	}

	return nil
}

// CartItemUpdateQuantityRspMultiError is an error wrapping multiple validation
// errors returned by CartItemUpdateQuantityRsp.ValidateAll() if the
// designated constraints aren't met.
type CartItemUpdateQuantityRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CartItemUpdateQuantityRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CartItemUpdateQuantityRspMultiError) AllErrors() []error { return m }

// CartItemUpdateQuantityRspValidationError is the validation error returned by
// CartItemUpdateQuantityRsp.Validate if the designated constraints aren't met.
type CartItemUpdateQuantityRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CartItemUpdateQuantityRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CartItemUpdateQuantityRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CartItemUpdateQuantityRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CartItemUpdateQuantityRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CartItemUpdateQuantityRspValidationError) ErrorName() string {
	return "CartItemUpdateQuantityRspValidationError"
}

// Error satisfies the builtin error interface
func (e CartItemUpdateQuantityRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCartItemUpdateQuantityRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CartItemUpdateQuantityRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CartItemUpdateQuantityRspValidationError{}

// Validate checks the field values on CartItemGetCartProductReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CartItemGetCartProductReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CartItemGetCartProductReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CartItemGetCartProductReqMultiError, or nil if none found.
func (m *CartItemGetCartProductReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CartItemGetCartProductReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductId

	if len(errors) > 0 {
		return CartItemGetCartProductReqMultiError(errors)
	}

	return nil
}

// CartItemGetCartProductReqMultiError is an error wrapping multiple validation
// errors returned by CartItemGetCartProductReq.ValidateAll() if the
// designated constraints aren't met.
type CartItemGetCartProductReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CartItemGetCartProductReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CartItemGetCartProductReqMultiError) AllErrors() []error { return m }

// CartItemGetCartProductReqValidationError is the validation error returned by
// CartItemGetCartProductReq.Validate if the designated constraints aren't met.
type CartItemGetCartProductReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CartItemGetCartProductReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CartItemGetCartProductReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CartItemGetCartProductReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CartItemGetCartProductReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CartItemGetCartProductReqValidationError) ErrorName() string {
	return "CartItemGetCartProductReqValidationError"
}

// Error satisfies the builtin error interface
func (e CartItemGetCartProductReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCartItemGetCartProductReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CartItemGetCartProductReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CartItemGetCartProductReqValidationError{}

// Validate checks the field values on CartItemGetCartProductRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CartItemGetCartProductRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CartItemGetCartProductRsp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CartItemGetCartProductRspMultiError, or nil if none found.
func (m *CartItemGetCartProductRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *CartItemGetCartProductRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CartItemGetCartProductRspMultiError(errors)
	}

	return nil
}

// CartItemGetCartProductRspMultiError is an error wrapping multiple validation
// errors returned by CartItemGetCartProductRsp.ValidateAll() if the
// designated constraints aren't met.
type CartItemGetCartProductRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CartItemGetCartProductRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CartItemGetCartProductRspMultiError) AllErrors() []error { return m }

// CartItemGetCartProductRspValidationError is the validation error returned by
// CartItemGetCartProductRsp.Validate if the designated constraints aren't met.
type CartItemGetCartProductRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CartItemGetCartProductRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CartItemGetCartProductRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CartItemGetCartProductRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CartItemGetCartProductRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CartItemGetCartProductRspValidationError) ErrorName() string {
	return "CartItemGetCartProductRspValidationError"
}

// Error satisfies the builtin error interface
func (e CartItemGetCartProductRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCartItemGetCartProductRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CartItemGetCartProductRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CartItemGetCartProductRspValidationError{}

// Validate checks the field values on CartItemUpdateAttrReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CartItemUpdateAttrReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CartItemUpdateAttrReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CartItemUpdateAttrReqMultiError, or nil if none found.
func (m *CartItemUpdateAttrReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CartItemUpdateAttrReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CartItemUpdateAttrReqMultiError(errors)
	}

	return nil
}

// CartItemUpdateAttrReqMultiError is an error wrapping multiple validation
// errors returned by CartItemUpdateAttrReq.ValidateAll() if the designated
// constraints aren't met.
type CartItemUpdateAttrReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CartItemUpdateAttrReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CartItemUpdateAttrReqMultiError) AllErrors() []error { return m }

// CartItemUpdateAttrReqValidationError is the validation error returned by
// CartItemUpdateAttrReq.Validate if the designated constraints aren't met.
type CartItemUpdateAttrReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CartItemUpdateAttrReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CartItemUpdateAttrReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CartItemUpdateAttrReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CartItemUpdateAttrReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CartItemUpdateAttrReqValidationError) ErrorName() string {
	return "CartItemUpdateAttrReqValidationError"
}

// Error satisfies the builtin error interface
func (e CartItemUpdateAttrReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCartItemUpdateAttrReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CartItemUpdateAttrReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CartItemUpdateAttrReqValidationError{}

// Validate checks the field values on CartItemUpdateAttrRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CartItemUpdateAttrRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CartItemUpdateAttrRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CartItemUpdateAttrRspMultiError, or nil if none found.
func (m *CartItemUpdateAttrRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *CartItemUpdateAttrRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CartItemUpdateAttrRspMultiError(errors)
	}

	return nil
}

// CartItemUpdateAttrRspMultiError is an error wrapping multiple validation
// errors returned by CartItemUpdateAttrRsp.ValidateAll() if the designated
// constraints aren't met.
type CartItemUpdateAttrRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CartItemUpdateAttrRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CartItemUpdateAttrRspMultiError) AllErrors() []error { return m }

// CartItemUpdateAttrRspValidationError is the validation error returned by
// CartItemUpdateAttrRsp.Validate if the designated constraints aren't met.
type CartItemUpdateAttrRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CartItemUpdateAttrRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CartItemUpdateAttrRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CartItemUpdateAttrRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CartItemUpdateAttrRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CartItemUpdateAttrRspValidationError) ErrorName() string {
	return "CartItemUpdateAttrRspValidationError"
}

// Error satisfies the builtin error interface
func (e CartItemUpdateAttrRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCartItemUpdateAttrRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CartItemUpdateAttrRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CartItemUpdateAttrRspValidationError{}

// Validate checks the field values on CartItemDeleteReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CartItemDeleteReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CartItemDeleteReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CartItemDeleteReqMultiError, or nil if none found.
func (m *CartItemDeleteReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CartItemDeleteReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CartItemDeleteReqMultiError(errors)
	}

	return nil
}

// CartItemDeleteReqMultiError is an error wrapping multiple validation errors
// returned by CartItemDeleteReq.ValidateAll() if the designated constraints
// aren't met.
type CartItemDeleteReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CartItemDeleteReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CartItemDeleteReqMultiError) AllErrors() []error { return m }

// CartItemDeleteReqValidationError is the validation error returned by
// CartItemDeleteReq.Validate if the designated constraints aren't met.
type CartItemDeleteReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CartItemDeleteReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CartItemDeleteReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CartItemDeleteReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CartItemDeleteReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CartItemDeleteReqValidationError) ErrorName() string {
	return "CartItemDeleteReqValidationError"
}

// Error satisfies the builtin error interface
func (e CartItemDeleteReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCartItemDeleteReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CartItemDeleteReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CartItemDeleteReqValidationError{}

// Validate checks the field values on CartItemDeleteRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CartItemDeleteRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CartItemDeleteRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CartItemDeleteRspMultiError, or nil if none found.
func (m *CartItemDeleteRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *CartItemDeleteRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CartItemDeleteRspMultiError(errors)
	}

	return nil
}

// CartItemDeleteRspMultiError is an error wrapping multiple validation errors
// returned by CartItemDeleteRsp.ValidateAll() if the designated constraints
// aren't met.
type CartItemDeleteRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CartItemDeleteRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CartItemDeleteRspMultiError) AllErrors() []error { return m }

// CartItemDeleteRspValidationError is the validation error returned by
// CartItemDeleteRsp.Validate if the designated constraints aren't met.
type CartItemDeleteRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CartItemDeleteRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CartItemDeleteRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CartItemDeleteRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CartItemDeleteRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CartItemDeleteRspValidationError) ErrorName() string {
	return "CartItemDeleteRspValidationError"
}

// Error satisfies the builtin error interface
func (e CartItemDeleteRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCartItemDeleteRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CartItemDeleteRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CartItemDeleteRspValidationError{}

// Validate checks the field values on CartItemClearReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CartItemClearReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CartItemClearReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CartItemClearReqMultiError, or nil if none found.
func (m *CartItemClearReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CartItemClearReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CartItemClearReqMultiError(errors)
	}

	return nil
}

// CartItemClearReqMultiError is an error wrapping multiple validation errors
// returned by CartItemClearReq.ValidateAll() if the designated constraints
// aren't met.
type CartItemClearReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CartItemClearReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CartItemClearReqMultiError) AllErrors() []error { return m }

// CartItemClearReqValidationError is the validation error returned by
// CartItemClearReq.Validate if the designated constraints aren't met.
type CartItemClearReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CartItemClearReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CartItemClearReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CartItemClearReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CartItemClearReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CartItemClearReqValidationError) ErrorName() string { return "CartItemClearReqValidationError" }

// Error satisfies the builtin error interface
func (e CartItemClearReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCartItemClearReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CartItemClearReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CartItemClearReqValidationError{}

// Validate checks the field values on CartItemClearRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CartItemClearRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CartItemClearRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CartItemClearRspMultiError, or nil if none found.
func (m *CartItemClearRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *CartItemClearRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CartItemClearRspMultiError(errors)
	}

	return nil
}

// CartItemClearRspMultiError is an error wrapping multiple validation errors
// returned by CartItemClearRsp.ValidateAll() if the designated constraints
// aren't met.
type CartItemClearRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CartItemClearRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CartItemClearRspMultiError) AllErrors() []error { return m }

// CartItemClearRspValidationError is the validation error returned by
// CartItemClearRsp.Validate if the designated constraints aren't met.
type CartItemClearRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CartItemClearRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CartItemClearRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CartItemClearRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CartItemClearRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CartItemClearRspValidationError) ErrorName() string { return "CartItemClearRspValidationError" }

// Error satisfies the builtin error interface
func (e CartItemClearRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCartItemClearRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CartItemClearRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CartItemClearRspValidationError{}
