// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: portal/order.proto

package mall

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GenerateConfirmOrderReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateConfirmOrderReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateConfirmOrderReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateConfirmOrderReqMultiError, or nil if none found.
func (m *GenerateConfirmOrderReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateConfirmOrderReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetCartIds()) < 1 {
		err := GenerateConfirmOrderReqValidationError{
			field:  "CartIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GenerateConfirmOrderReqMultiError(errors)
	}

	return nil
}

// GenerateConfirmOrderReqMultiError is an error wrapping multiple validation
// errors returned by GenerateConfirmOrderReq.ValidateAll() if the designated
// constraints aren't met.
type GenerateConfirmOrderReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateConfirmOrderReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateConfirmOrderReqMultiError) AllErrors() []error { return m }

// GenerateConfirmOrderReqValidationError is the validation error returned by
// GenerateConfirmOrderReq.Validate if the designated constraints aren't met.
type GenerateConfirmOrderReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateConfirmOrderReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateConfirmOrderReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateConfirmOrderReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateConfirmOrderReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateConfirmOrderReqValidationError) ErrorName() string {
	return "GenerateConfirmOrderReqValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateConfirmOrderReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateConfirmOrderReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateConfirmOrderReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateConfirmOrderReqValidationError{}

// Validate checks the field values on GenerateConfirmOrderRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateConfirmOrderRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateConfirmOrderRsp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateConfirmOrderRspMultiError, or nil if none found.
func (m *GenerateConfirmOrderRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateConfirmOrderRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCartPromotionItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GenerateConfirmOrderRspValidationError{
						field:  fmt.Sprintf("CartPromotionItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GenerateConfirmOrderRspValidationError{
						field:  fmt.Sprintf("CartPromotionItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GenerateConfirmOrderRspValidationError{
					field:  fmt.Sprintf("CartPromotionItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetMemberReceiveAddresses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GenerateConfirmOrderRspValidationError{
						field:  fmt.Sprintf("MemberReceiveAddresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GenerateConfirmOrderRspValidationError{
						field:  fmt.Sprintf("MemberReceiveAddresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GenerateConfirmOrderRspValidationError{
					field:  fmt.Sprintf("MemberReceiveAddresses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCouponHistoryDetails() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GenerateConfirmOrderRspValidationError{
						field:  fmt.Sprintf("CouponHistoryDetails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GenerateConfirmOrderRspValidationError{
						field:  fmt.Sprintf("CouponHistoryDetails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GenerateConfirmOrderRspValidationError{
					field:  fmt.Sprintf("CouponHistoryDetails[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetIntegrationConsumeSetting()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GenerateConfirmOrderRspValidationError{
					field:  "IntegrationConsumeSetting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GenerateConfirmOrderRspValidationError{
					field:  "IntegrationConsumeSetting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIntegrationConsumeSetting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenerateConfirmOrderRspValidationError{
				field:  "IntegrationConsumeSetting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MemberIntegration

	if all {
		switch v := interface{}(m.GetCalcAmount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GenerateConfirmOrderRspValidationError{
					field:  "CalcAmount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GenerateConfirmOrderRspValidationError{
					field:  "CalcAmount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCalcAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenerateConfirmOrderRspValidationError{
				field:  "CalcAmount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GenerateConfirmOrderRspMultiError(errors)
	}

	return nil
}

// GenerateConfirmOrderRspMultiError is an error wrapping multiple validation
// errors returned by GenerateConfirmOrderRsp.ValidateAll() if the designated
// constraints aren't met.
type GenerateConfirmOrderRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateConfirmOrderRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateConfirmOrderRspMultiError) AllErrors() []error { return m }

// GenerateConfirmOrderRspValidationError is the validation error returned by
// GenerateConfirmOrderRsp.Validate if the designated constraints aren't met.
type GenerateConfirmOrderRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateConfirmOrderRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateConfirmOrderRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateConfirmOrderRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateConfirmOrderRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateConfirmOrderRspValidationError) ErrorName() string {
	return "GenerateConfirmOrderRspValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateConfirmOrderRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateConfirmOrderRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateConfirmOrderRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateConfirmOrderRspValidationError{}

// Validate checks the field values on GenerateOrderReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GenerateOrderReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateOrderReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateOrderReqMultiError, or nil if none found.
func (m *GenerateOrderReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateOrderReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetMemberReceiveAddressId() < 0 {
		err := GenerateOrderReqValidationError{
			field:  "MemberReceiveAddressId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCouponId() < 0 {
		err := GenerateOrderReqValidationError{
			field:  "CouponId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUseIntegration() < 0 {
		err := GenerateOrderReqValidationError{
			field:  "UseIntegration",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _GenerateOrderReq_PayType_InLookup[m.GetPayType()]; !ok {
		err := GenerateOrderReqValidationError{
			field:  "PayType",
			reason: "value must be in list [0 1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetCartIds()) < 1 {
		err := GenerateOrderReqValidationError{
			field:  "CartIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GenerateOrderReqMultiError(errors)
	}

	return nil
}

// GenerateOrderReqMultiError is an error wrapping multiple validation errors
// returned by GenerateOrderReq.ValidateAll() if the designated constraints
// aren't met.
type GenerateOrderReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateOrderReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateOrderReqMultiError) AllErrors() []error { return m }

// GenerateOrderReqValidationError is the validation error returned by
// GenerateOrderReq.Validate if the designated constraints aren't met.
type GenerateOrderReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateOrderReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateOrderReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateOrderReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateOrderReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateOrderReqValidationError) ErrorName() string { return "GenerateOrderReqValidationError" }

// Error satisfies the builtin error interface
func (e GenerateOrderReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateOrderReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateOrderReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateOrderReqValidationError{}

var _GenerateOrderReq_PayType_InLookup = map[uint32]struct{}{
	0: {},
	1: {},
	2: {},
}

// Validate checks the field values on GenerateOrderRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GenerateOrderRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateOrderRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateOrderRspMultiError, or nil if none found.
func (m *GenerateOrderRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateOrderRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GenerateOrderRspValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GenerateOrderRspValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenerateOrderRspValidationError{
				field:  "Order",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOrderItems()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GenerateOrderRspValidationError{
					field:  "OrderItems",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GenerateOrderRspValidationError{
					field:  "OrderItems",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrderItems()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenerateOrderRspValidationError{
				field:  "OrderItems",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GenerateOrderRspMultiError(errors)
	}

	return nil
}

// GenerateOrderRspMultiError is an error wrapping multiple validation errors
// returned by GenerateOrderRsp.ValidateAll() if the designated constraints
// aren't met.
type GenerateOrderRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateOrderRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateOrderRspMultiError) AllErrors() []error { return m }

// GenerateOrderRspValidationError is the validation error returned by
// GenerateOrderRsp.Validate if the designated constraints aren't met.
type GenerateOrderRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateOrderRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateOrderRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateOrderRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateOrderRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateOrderRspValidationError) ErrorName() string { return "GenerateOrderRspValidationError" }

// Error satisfies the builtin error interface
func (e GenerateOrderRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateOrderRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateOrderRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateOrderRspValidationError{}

// Validate checks the field values on PaySuccessReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PaySuccessReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaySuccessReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PaySuccessReqMultiError, or
// nil if none found.
func (m *PaySuccessReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PaySuccessReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PaySuccessReqMultiError(errors)
	}

	return nil
}

// PaySuccessReqMultiError is an error wrapping multiple validation errors
// returned by PaySuccessReq.ValidateAll() if the designated constraints
// aren't met.
type PaySuccessReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaySuccessReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaySuccessReqMultiError) AllErrors() []error { return m }

// PaySuccessReqValidationError is the validation error returned by
// PaySuccessReq.Validate if the designated constraints aren't met.
type PaySuccessReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaySuccessReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaySuccessReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaySuccessReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaySuccessReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaySuccessReqValidationError) ErrorName() string { return "PaySuccessReqValidationError" }

// Error satisfies the builtin error interface
func (e PaySuccessReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaySuccessReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaySuccessReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaySuccessReqValidationError{}

// Validate checks the field values on PaySuccessRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PaySuccessRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaySuccessRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PaySuccessRspMultiError, or
// nil if none found.
func (m *PaySuccessRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *PaySuccessRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PaySuccessRspMultiError(errors)
	}

	return nil
}

// PaySuccessRspMultiError is an error wrapping multiple validation errors
// returned by PaySuccessRsp.ValidateAll() if the designated constraints
// aren't met.
type PaySuccessRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaySuccessRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaySuccessRspMultiError) AllErrors() []error { return m }

// PaySuccessRspValidationError is the validation error returned by
// PaySuccessRsp.Validate if the designated constraints aren't met.
type PaySuccessRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaySuccessRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaySuccessRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaySuccessRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaySuccessRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaySuccessRspValidationError) ErrorName() string { return "PaySuccessRspValidationError" }

// Error satisfies the builtin error interface
func (e PaySuccessRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaySuccessRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaySuccessRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaySuccessRspValidationError{}

// Validate checks the field values on CancelTimeOutOrderReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelTimeOutOrderReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelTimeOutOrderReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelTimeOutOrderReqMultiError, or nil if none found.
func (m *CancelTimeOutOrderReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelTimeOutOrderReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancelTimeOutOrderReqMultiError(errors)
	}

	return nil
}

// CancelTimeOutOrderReqMultiError is an error wrapping multiple validation
// errors returned by CancelTimeOutOrderReq.ValidateAll() if the designated
// constraints aren't met.
type CancelTimeOutOrderReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelTimeOutOrderReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelTimeOutOrderReqMultiError) AllErrors() []error { return m }

// CancelTimeOutOrderReqValidationError is the validation error returned by
// CancelTimeOutOrderReq.Validate if the designated constraints aren't met.
type CancelTimeOutOrderReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelTimeOutOrderReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelTimeOutOrderReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelTimeOutOrderReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelTimeOutOrderReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelTimeOutOrderReqValidationError) ErrorName() string {
	return "CancelTimeOutOrderReqValidationError"
}

// Error satisfies the builtin error interface
func (e CancelTimeOutOrderReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelTimeOutOrderReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelTimeOutOrderReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelTimeOutOrderReqValidationError{}

// Validate checks the field values on CancelTimeOutOrderRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelTimeOutOrderRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelTimeOutOrderRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelTimeOutOrderRspMultiError, or nil if none found.
func (m *CancelTimeOutOrderRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelTimeOutOrderRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancelTimeOutOrderRspMultiError(errors)
	}

	return nil
}

// CancelTimeOutOrderRspMultiError is an error wrapping multiple validation
// errors returned by CancelTimeOutOrderRsp.ValidateAll() if the designated
// constraints aren't met.
type CancelTimeOutOrderRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelTimeOutOrderRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelTimeOutOrderRspMultiError) AllErrors() []error { return m }

// CancelTimeOutOrderRspValidationError is the validation error returned by
// CancelTimeOutOrderRsp.Validate if the designated constraints aren't met.
type CancelTimeOutOrderRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelTimeOutOrderRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelTimeOutOrderRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelTimeOutOrderRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelTimeOutOrderRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelTimeOutOrderRspValidationError) ErrorName() string {
	return "CancelTimeOutOrderRspValidationError"
}

// Error satisfies the builtin error interface
func (e CancelTimeOutOrderRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelTimeOutOrderRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelTimeOutOrderRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelTimeOutOrderRspValidationError{}

// Validate checks the field values on CancelOrderReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CancelOrderReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelOrderReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CancelOrderReqMultiError,
// or nil if none found.
func (m *CancelOrderReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelOrderReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancelOrderReqMultiError(errors)
	}

	return nil
}

// CancelOrderReqMultiError is an error wrapping multiple validation errors
// returned by CancelOrderReq.ValidateAll() if the designated constraints
// aren't met.
type CancelOrderReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelOrderReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelOrderReqMultiError) AllErrors() []error { return m }

// CancelOrderReqValidationError is the validation error returned by
// CancelOrderReq.Validate if the designated constraints aren't met.
type CancelOrderReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelOrderReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelOrderReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelOrderReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelOrderReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelOrderReqValidationError) ErrorName() string { return "CancelOrderReqValidationError" }

// Error satisfies the builtin error interface
func (e CancelOrderReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelOrderReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelOrderReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelOrderReqValidationError{}

// Validate checks the field values on CancelOrderRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CancelOrderRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelOrderRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CancelOrderRspMultiError,
// or nil if none found.
func (m *CancelOrderRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelOrderRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancelOrderRspMultiError(errors)
	}

	return nil
}

// CancelOrderRspMultiError is an error wrapping multiple validation errors
// returned by CancelOrderRsp.ValidateAll() if the designated constraints
// aren't met.
type CancelOrderRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelOrderRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelOrderRspMultiError) AllErrors() []error { return m }

// CancelOrderRspValidationError is the validation error returned by
// CancelOrderRsp.Validate if the designated constraints aren't met.
type CancelOrderRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelOrderRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelOrderRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelOrderRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelOrderRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelOrderRspValidationError) ErrorName() string { return "CancelOrderRspValidationError" }

// Error satisfies the builtin error interface
func (e CancelOrderRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelOrderRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelOrderRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelOrderRspValidationError{}

// Validate checks the field values on OrderListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderListReqMultiError, or
// nil if none found.
func (m *OrderListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return OrderListReqMultiError(errors)
	}

	return nil
}

// OrderListReqMultiError is an error wrapping multiple validation errors
// returned by OrderListReq.ValidateAll() if the designated constraints aren't met.
type OrderListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderListReqMultiError) AllErrors() []error { return m }

// OrderListReqValidationError is the validation error returned by
// OrderListReq.Validate if the designated constraints aren't met.
type OrderListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderListReqValidationError) ErrorName() string { return "OrderListReqValidationError" }

// Error satisfies the builtin error interface
func (e OrderListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderListReqValidationError{}

// Validate checks the field values on OrderListRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderListRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderListRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderListRspMultiError, or
// nil if none found.
func (m *OrderListRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderListRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return OrderListRspMultiError(errors)
	}

	return nil
}

// OrderListRspMultiError is an error wrapping multiple validation errors
// returned by OrderListRsp.ValidateAll() if the designated constraints aren't met.
type OrderListRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderListRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderListRspMultiError) AllErrors() []error { return m }

// OrderListRspValidationError is the validation error returned by
// OrderListRsp.Validate if the designated constraints aren't met.
type OrderListRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderListRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderListRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderListRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderListRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderListRspValidationError) ErrorName() string { return "OrderListRspValidationError" }

// Error satisfies the builtin error interface
func (e OrderListRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderListRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderListRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderListRspValidationError{}

// Validate checks the field values on OrderDetailReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderDetailReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderDetailReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderDetailReqMultiError,
// or nil if none found.
func (m *OrderDetailReq) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderDetailReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	if len(errors) > 0 {
		return OrderDetailReqMultiError(errors)
	}

	return nil
}

// OrderDetailReqMultiError is an error wrapping multiple validation errors
// returned by OrderDetailReq.ValidateAll() if the designated constraints
// aren't met.
type OrderDetailReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderDetailReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderDetailReqMultiError) AllErrors() []error { return m }

// OrderDetailReqValidationError is the validation error returned by
// OrderDetailReq.Validate if the designated constraints aren't met.
type OrderDetailReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderDetailReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderDetailReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderDetailReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderDetailReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderDetailReqValidationError) ErrorName() string { return "OrderDetailReqValidationError" }

// Error satisfies the builtin error interface
func (e OrderDetailReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderDetailReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderDetailReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderDetailReqValidationError{}

// Validate checks the field values on OrderDetailRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderDetailRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderDetailRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderDetailRspMultiError,
// or nil if none found.
func (m *OrderDetailRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderDetailRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return OrderDetailRspMultiError(errors)
	}

	return nil
}

// OrderDetailRspMultiError is an error wrapping multiple validation errors
// returned by OrderDetailRsp.ValidateAll() if the designated constraints
// aren't met.
type OrderDetailRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderDetailRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderDetailRspMultiError) AllErrors() []error { return m }

// OrderDetailRspValidationError is the validation error returned by
// OrderDetailRsp.Validate if the designated constraints aren't met.
type OrderDetailRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderDetailRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderDetailRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderDetailRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderDetailRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderDetailRspValidationError) ErrorName() string { return "OrderDetailRspValidationError" }

// Error satisfies the builtin error interface
func (e OrderDetailRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderDetailRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderDetailRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderDetailRspValidationError{}

// Validate checks the field values on CancelUserOrderReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelUserOrderReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelUserOrderReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelUserOrderReqMultiError, or nil if none found.
func (m *CancelUserOrderReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelUserOrderReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancelUserOrderReqMultiError(errors)
	}

	return nil
}

// CancelUserOrderReqMultiError is an error wrapping multiple validation errors
// returned by CancelUserOrderReq.ValidateAll() if the designated constraints
// aren't met.
type CancelUserOrderReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelUserOrderReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelUserOrderReqMultiError) AllErrors() []error { return m }

// CancelUserOrderReqValidationError is the validation error returned by
// CancelUserOrderReq.Validate if the designated constraints aren't met.
type CancelUserOrderReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelUserOrderReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelUserOrderReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelUserOrderReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelUserOrderReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelUserOrderReqValidationError) ErrorName() string {
	return "CancelUserOrderReqValidationError"
}

// Error satisfies the builtin error interface
func (e CancelUserOrderReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelUserOrderReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelUserOrderReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelUserOrderReqValidationError{}

// Validate checks the field values on CancelUserOrderRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelUserOrderRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelUserOrderRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelUserOrderRspMultiError, or nil if none found.
func (m *CancelUserOrderRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelUserOrderRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancelUserOrderRspMultiError(errors)
	}

	return nil
}

// CancelUserOrderRspMultiError is an error wrapping multiple validation errors
// returned by CancelUserOrderRsp.ValidateAll() if the designated constraints
// aren't met.
type CancelUserOrderRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelUserOrderRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelUserOrderRspMultiError) AllErrors() []error { return m }

// CancelUserOrderRspValidationError is the validation error returned by
// CancelUserOrderRsp.Validate if the designated constraints aren't met.
type CancelUserOrderRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelUserOrderRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelUserOrderRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelUserOrderRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelUserOrderRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelUserOrderRspValidationError) ErrorName() string {
	return "CancelUserOrderRspValidationError"
}

// Error satisfies the builtin error interface
func (e CancelUserOrderRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelUserOrderRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelUserOrderRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelUserOrderRspValidationError{}

// Validate checks the field values on ConfirmReceiveOrderReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfirmReceiveOrderReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfirmReceiveOrderReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfirmReceiveOrderReqMultiError, or nil if none found.
func (m *ConfirmReceiveOrderReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfirmReceiveOrderReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ConfirmReceiveOrderReqMultiError(errors)
	}

	return nil
}

// ConfirmReceiveOrderReqMultiError is an error wrapping multiple validation
// errors returned by ConfirmReceiveOrderReq.ValidateAll() if the designated
// constraints aren't met.
type ConfirmReceiveOrderReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfirmReceiveOrderReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfirmReceiveOrderReqMultiError) AllErrors() []error { return m }

// ConfirmReceiveOrderReqValidationError is the validation error returned by
// ConfirmReceiveOrderReq.Validate if the designated constraints aren't met.
type ConfirmReceiveOrderReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmReceiveOrderReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmReceiveOrderReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmReceiveOrderReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmReceiveOrderReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmReceiveOrderReqValidationError) ErrorName() string {
	return "ConfirmReceiveOrderReqValidationError"
}

// Error satisfies the builtin error interface
func (e ConfirmReceiveOrderReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmReceiveOrderReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmReceiveOrderReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmReceiveOrderReqValidationError{}

// Validate checks the field values on ConfirmReceiveOrderRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfirmReceiveOrderRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfirmReceiveOrderRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfirmReceiveOrderRspMultiError, or nil if none found.
func (m *ConfirmReceiveOrderRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfirmReceiveOrderRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ConfirmReceiveOrderRspMultiError(errors)
	}

	return nil
}

// ConfirmReceiveOrderRspMultiError is an error wrapping multiple validation
// errors returned by ConfirmReceiveOrderRsp.ValidateAll() if the designated
// constraints aren't met.
type ConfirmReceiveOrderRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfirmReceiveOrderRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfirmReceiveOrderRspMultiError) AllErrors() []error { return m }

// ConfirmReceiveOrderRspValidationError is the validation error returned by
// ConfirmReceiveOrderRsp.Validate if the designated constraints aren't met.
type ConfirmReceiveOrderRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmReceiveOrderRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmReceiveOrderRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmReceiveOrderRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmReceiveOrderRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmReceiveOrderRspValidationError) ErrorName() string {
	return "ConfirmReceiveOrderRspValidationError"
}

// Error satisfies the builtin error interface
func (e ConfirmReceiveOrderRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmReceiveOrderRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmReceiveOrderRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmReceiveOrderRspValidationError{}

// Validate checks the field values on PortalDeleteOrderReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PortalDeleteOrderReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PortalDeleteOrderReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PortalDeleteOrderReqMultiError, or nil if none found.
func (m *PortalDeleteOrderReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PortalDeleteOrderReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PortalDeleteOrderReqMultiError(errors)
	}

	return nil
}

// PortalDeleteOrderReqMultiError is an error wrapping multiple validation
// errors returned by PortalDeleteOrderReq.ValidateAll() if the designated
// constraints aren't met.
type PortalDeleteOrderReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PortalDeleteOrderReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PortalDeleteOrderReqMultiError) AllErrors() []error { return m }

// PortalDeleteOrderReqValidationError is the validation error returned by
// PortalDeleteOrderReq.Validate if the designated constraints aren't met.
type PortalDeleteOrderReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PortalDeleteOrderReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PortalDeleteOrderReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PortalDeleteOrderReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PortalDeleteOrderReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PortalDeleteOrderReqValidationError) ErrorName() string {
	return "PortalDeleteOrderReqValidationError"
}

// Error satisfies the builtin error interface
func (e PortalDeleteOrderReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPortalDeleteOrderReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PortalDeleteOrderReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PortalDeleteOrderReqValidationError{}

// Validate checks the field values on PortalDeleteOrderRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PortalDeleteOrderRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PortalDeleteOrderRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PortalDeleteOrderRspMultiError, or nil if none found.
func (m *PortalDeleteOrderRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *PortalDeleteOrderRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PortalDeleteOrderRspMultiError(errors)
	}

	return nil
}

// PortalDeleteOrderRspMultiError is an error wrapping multiple validation
// errors returned by PortalDeleteOrderRsp.ValidateAll() if the designated
// constraints aren't met.
type PortalDeleteOrderRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PortalDeleteOrderRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PortalDeleteOrderRspMultiError) AllErrors() []error { return m }

// PortalDeleteOrderRspValidationError is the validation error returned by
// PortalDeleteOrderRsp.Validate if the designated constraints aren't met.
type PortalDeleteOrderRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PortalDeleteOrderRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PortalDeleteOrderRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PortalDeleteOrderRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PortalDeleteOrderRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PortalDeleteOrderRspValidationError) ErrorName() string {
	return "PortalDeleteOrderRspValidationError"
}

// Error satisfies the builtin error interface
func (e PortalDeleteOrderRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPortalDeleteOrderRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PortalDeleteOrderRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PortalDeleteOrderRspValidationError{}

// Validate checks the field values on GenerateConfirmOrderRsp_CalcAmount with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GenerateConfirmOrderRsp_CalcAmount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateConfirmOrderRsp_CalcAmount
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GenerateConfirmOrderRsp_CalcAmountMultiError, or nil if none found.
func (m *GenerateConfirmOrderRsp_CalcAmount) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateConfirmOrderRsp_CalcAmount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalAmount

	// no validation rules for FreightAmount

	// no validation rules for PromotionAmount

	// no validation rules for PayAmount

	if len(errors) > 0 {
		return GenerateConfirmOrderRsp_CalcAmountMultiError(errors)
	}

	return nil
}

// GenerateConfirmOrderRsp_CalcAmountMultiError is an error wrapping multiple
// validation errors returned by
// GenerateConfirmOrderRsp_CalcAmount.ValidateAll() if the designated
// constraints aren't met.
type GenerateConfirmOrderRsp_CalcAmountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateConfirmOrderRsp_CalcAmountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateConfirmOrderRsp_CalcAmountMultiError) AllErrors() []error { return m }

// GenerateConfirmOrderRsp_CalcAmountValidationError is the validation error
// returned by GenerateConfirmOrderRsp_CalcAmount.Validate if the designated
// constraints aren't met.
type GenerateConfirmOrderRsp_CalcAmountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateConfirmOrderRsp_CalcAmountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateConfirmOrderRsp_CalcAmountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateConfirmOrderRsp_CalcAmountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateConfirmOrderRsp_CalcAmountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateConfirmOrderRsp_CalcAmountValidationError) ErrorName() string {
	return "GenerateConfirmOrderRsp_CalcAmountValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateConfirmOrderRsp_CalcAmountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateConfirmOrderRsp_CalcAmount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateConfirmOrderRsp_CalcAmountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateConfirmOrderRsp_CalcAmountValidationError{}

// Validate checks the field values on
// GenerateConfirmOrderRsp_IntegrationConsumeSetting with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GenerateConfirmOrderRsp_IntegrationConsumeSetting) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GenerateConfirmOrderRsp_IntegrationConsumeSetting with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// GenerateConfirmOrderRsp_IntegrationConsumeSettingMultiError, or nil if none found.
func (m *GenerateConfirmOrderRsp_IntegrationConsumeSetting) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateConfirmOrderRsp_IntegrationConsumeSetting) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeductionPerAmount

	// no validation rules for MaxPercentPerOrder

	// no validation rules for UseUnit

	// no validation rules for CouponStatus

	if len(errors) > 0 {
		return GenerateConfirmOrderRsp_IntegrationConsumeSettingMultiError(errors)
	}

	return nil
}

// GenerateConfirmOrderRsp_IntegrationConsumeSettingMultiError is an error
// wrapping multiple validation errors returned by
// GenerateConfirmOrderRsp_IntegrationConsumeSetting.ValidateAll() if the
// designated constraints aren't met.
type GenerateConfirmOrderRsp_IntegrationConsumeSettingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateConfirmOrderRsp_IntegrationConsumeSettingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateConfirmOrderRsp_IntegrationConsumeSettingMultiError) AllErrors() []error { return m }

// GenerateConfirmOrderRsp_IntegrationConsumeSettingValidationError is the
// validation error returned by
// GenerateConfirmOrderRsp_IntegrationConsumeSetting.Validate if the
// designated constraints aren't met.
type GenerateConfirmOrderRsp_IntegrationConsumeSettingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateConfirmOrderRsp_IntegrationConsumeSettingValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GenerateConfirmOrderRsp_IntegrationConsumeSettingValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GenerateConfirmOrderRsp_IntegrationConsumeSettingValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GenerateConfirmOrderRsp_IntegrationConsumeSettingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateConfirmOrderRsp_IntegrationConsumeSettingValidationError) ErrorName() string {
	return "GenerateConfirmOrderRsp_IntegrationConsumeSettingValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateConfirmOrderRsp_IntegrationConsumeSettingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateConfirmOrderRsp_IntegrationConsumeSetting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateConfirmOrderRsp_IntegrationConsumeSettingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateConfirmOrderRsp_IntegrationConsumeSettingValidationError{}

// Validate checks the field values on
// GenerateConfirmOrderRsp_MemberReceiveAddress with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GenerateConfirmOrderRsp_MemberReceiveAddress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GenerateConfirmOrderRsp_MemberReceiveAddress with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GenerateConfirmOrderRsp_MemberReceiveAddressMultiError, or nil if none found.
func (m *GenerateConfirmOrderRsp_MemberReceiveAddress) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateConfirmOrderRsp_MemberReceiveAddress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for MemberId

	// no validation rules for Name

	// no validation rules for PhoneNumber

	// no validation rules for DefaultStatus

	// no validation rules for PostCode

	// no validation rules for Province

	// no validation rules for City

	// no validation rules for Region

	// no validation rules for DetailAddress

	if len(errors) > 0 {
		return GenerateConfirmOrderRsp_MemberReceiveAddressMultiError(errors)
	}

	return nil
}

// GenerateConfirmOrderRsp_MemberReceiveAddressMultiError is an error wrapping
// multiple validation errors returned by
// GenerateConfirmOrderRsp_MemberReceiveAddress.ValidateAll() if the
// designated constraints aren't met.
type GenerateConfirmOrderRsp_MemberReceiveAddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateConfirmOrderRsp_MemberReceiveAddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateConfirmOrderRsp_MemberReceiveAddressMultiError) AllErrors() []error { return m }

// GenerateConfirmOrderRsp_MemberReceiveAddressValidationError is the
// validation error returned by
// GenerateConfirmOrderRsp_MemberReceiveAddress.Validate if the designated
// constraints aren't met.
type GenerateConfirmOrderRsp_MemberReceiveAddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateConfirmOrderRsp_MemberReceiveAddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateConfirmOrderRsp_MemberReceiveAddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateConfirmOrderRsp_MemberReceiveAddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateConfirmOrderRsp_MemberReceiveAddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateConfirmOrderRsp_MemberReceiveAddressValidationError) ErrorName() string {
	return "GenerateConfirmOrderRsp_MemberReceiveAddressValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateConfirmOrderRsp_MemberReceiveAddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateConfirmOrderRsp_MemberReceiveAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateConfirmOrderRsp_MemberReceiveAddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateConfirmOrderRsp_MemberReceiveAddressValidationError{}

// Validate checks the field values on GenerateOrderRsp_Order with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateOrderRsp_Order) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateOrderRsp_Order with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateOrderRsp_OrderMultiError, or nil if none found.
func (m *GenerateOrderRsp_Order) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateOrderRsp_Order) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GenerateOrderRsp_OrderMultiError(errors)
	}

	return nil
}

// GenerateOrderRsp_OrderMultiError is an error wrapping multiple validation
// errors returned by GenerateOrderRsp_Order.ValidateAll() if the designated
// constraints aren't met.
type GenerateOrderRsp_OrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateOrderRsp_OrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateOrderRsp_OrderMultiError) AllErrors() []error { return m }

// GenerateOrderRsp_OrderValidationError is the validation error returned by
// GenerateOrderRsp_Order.Validate if the designated constraints aren't met.
type GenerateOrderRsp_OrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateOrderRsp_OrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateOrderRsp_OrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateOrderRsp_OrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateOrderRsp_OrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateOrderRsp_OrderValidationError) ErrorName() string {
	return "GenerateOrderRsp_OrderValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateOrderRsp_OrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateOrderRsp_Order.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateOrderRsp_OrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateOrderRsp_OrderValidationError{}

// Validate checks the field values on GenerateOrderRsp_OrderItems with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateOrderRsp_OrderItems) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateOrderRsp_OrderItems with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateOrderRsp_OrderItemsMultiError, or nil if none found.
func (m *GenerateOrderRsp_OrderItems) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateOrderRsp_OrderItems) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GenerateOrderRsp_OrderItemsMultiError(errors)
	}

	return nil
}

// GenerateOrderRsp_OrderItemsMultiError is an error wrapping multiple
// validation errors returned by GenerateOrderRsp_OrderItems.ValidateAll() if
// the designated constraints aren't met.
type GenerateOrderRsp_OrderItemsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateOrderRsp_OrderItemsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateOrderRsp_OrderItemsMultiError) AllErrors() []error { return m }

// GenerateOrderRsp_OrderItemsValidationError is the validation error returned
// by GenerateOrderRsp_OrderItems.Validate if the designated constraints
// aren't met.
type GenerateOrderRsp_OrderItemsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateOrderRsp_OrderItemsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateOrderRsp_OrderItemsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateOrderRsp_OrderItemsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateOrderRsp_OrderItemsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateOrderRsp_OrderItemsValidationError) ErrorName() string {
	return "GenerateOrderRsp_OrderItemsValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateOrderRsp_OrderItemsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateOrderRsp_OrderItems.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateOrderRsp_OrderItemsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateOrderRsp_OrderItemsValidationError{}
