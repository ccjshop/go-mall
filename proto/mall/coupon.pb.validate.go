// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: portal/coupon.proto

package mall

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CouponHistoryDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CouponHistoryDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CouponHistoryDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CouponHistoryDetailMultiError, or nil if none found.
func (m *CouponHistoryDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *CouponHistoryDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for MemberId

	// no validation rules for CouponId

	// no validation rules for CouponCode

	// no validation rules for OrderId

	// no validation rules for OrderSn

	// no validation rules for GetType

	// no validation rules for UseStatus

	// no validation rules for CreateTime

	// no validation rules for UseTime

	// no validation rules for MemberNickname

	if all {
		switch v := interface{}(m.GetCoupon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CouponHistoryDetailValidationError{
					field:  "Coupon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CouponHistoryDetailValidationError{
					field:  "Coupon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCoupon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CouponHistoryDetailValidationError{
				field:  "Coupon",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetProductRelations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CouponHistoryDetailValidationError{
						field:  fmt.Sprintf("ProductRelations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CouponHistoryDetailValidationError{
						field:  fmt.Sprintf("ProductRelations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CouponHistoryDetailValidationError{
					field:  fmt.Sprintf("ProductRelations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCategoryRelations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CouponHistoryDetailValidationError{
						field:  fmt.Sprintf("CategoryRelations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CouponHistoryDetailValidationError{
						field:  fmt.Sprintf("CategoryRelations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CouponHistoryDetailValidationError{
					field:  fmt.Sprintf("CategoryRelations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CouponHistoryDetailMultiError(errors)
	}

	return nil
}

// CouponHistoryDetailMultiError is an error wrapping multiple validation
// errors returned by CouponHistoryDetail.ValidateAll() if the designated
// constraints aren't met.
type CouponHistoryDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponHistoryDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponHistoryDetailMultiError) AllErrors() []error { return m }

// CouponHistoryDetailValidationError is the validation error returned by
// CouponHistoryDetail.Validate if the designated constraints aren't met.
type CouponHistoryDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponHistoryDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponHistoryDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponHistoryDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponHistoryDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponHistoryDetailValidationError) ErrorName() string {
	return "CouponHistoryDetailValidationError"
}

// Error satisfies the builtin error interface
func (e CouponHistoryDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCouponHistoryDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponHistoryDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponHistoryDetailValidationError{}

// Validate checks the field values on CouponAddReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CouponAddReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CouponAddReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CouponAddReqMultiError, or
// nil if none found.
func (m *CouponAddReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CouponAddReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CouponId

	if len(errors) > 0 {
		return CouponAddReqMultiError(errors)
	}

	return nil
}

// CouponAddReqMultiError is an error wrapping multiple validation errors
// returned by CouponAddReq.ValidateAll() if the designated constraints aren't met.
type CouponAddReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponAddReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponAddReqMultiError) AllErrors() []error { return m }

// CouponAddReqValidationError is the validation error returned by
// CouponAddReq.Validate if the designated constraints aren't met.
type CouponAddReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponAddReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponAddReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponAddReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponAddReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponAddReqValidationError) ErrorName() string { return "CouponAddReqValidationError" }

// Error satisfies the builtin error interface
func (e CouponAddReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCouponAddReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponAddReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponAddReqValidationError{}

// Validate checks the field values on CouponAddRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CouponAddRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CouponAddRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CouponAddRspMultiError, or
// nil if none found.
func (m *CouponAddRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *CouponAddRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CouponAddRspMultiError(errors)
	}

	return nil
}

// CouponAddRspMultiError is an error wrapping multiple validation errors
// returned by CouponAddRsp.ValidateAll() if the designated constraints aren't met.
type CouponAddRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponAddRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponAddRspMultiError) AllErrors() []error { return m }

// CouponAddRspValidationError is the validation error returned by
// CouponAddRsp.Validate if the designated constraints aren't met.
type CouponAddRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponAddRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponAddRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponAddRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponAddRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponAddRspValidationError) ErrorName() string { return "CouponAddRspValidationError" }

// Error satisfies the builtin error interface
func (e CouponAddRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCouponAddRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponAddRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponAddRspValidationError{}

// Validate checks the field values on CouponListHistoryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CouponListHistoryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CouponListHistoryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CouponListHistoryReqMultiError, or nil if none found.
func (m *CouponListHistoryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CouponListHistoryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CouponListHistoryReqMultiError(errors)
	}

	return nil
}

// CouponListHistoryReqMultiError is an error wrapping multiple validation
// errors returned by CouponListHistoryReq.ValidateAll() if the designated
// constraints aren't met.
type CouponListHistoryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponListHistoryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponListHistoryReqMultiError) AllErrors() []error { return m }

// CouponListHistoryReqValidationError is the validation error returned by
// CouponListHistoryReq.Validate if the designated constraints aren't met.
type CouponListHistoryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponListHistoryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponListHistoryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponListHistoryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponListHistoryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponListHistoryReqValidationError) ErrorName() string {
	return "CouponListHistoryReqValidationError"
}

// Error satisfies the builtin error interface
func (e CouponListHistoryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCouponListHistoryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponListHistoryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponListHistoryReqValidationError{}

// Validate checks the field values on CouponListHistoryRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CouponListHistoryRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CouponListHistoryRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CouponListHistoryRspMultiError, or nil if none found.
func (m *CouponListHistoryRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *CouponListHistoryRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CouponListHistoryRspMultiError(errors)
	}

	return nil
}

// CouponListHistoryRspMultiError is an error wrapping multiple validation
// errors returned by CouponListHistoryRsp.ValidateAll() if the designated
// constraints aren't met.
type CouponListHistoryRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponListHistoryRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponListHistoryRspMultiError) AllErrors() []error { return m }

// CouponListHistoryRspValidationError is the validation error returned by
// CouponListHistoryRsp.Validate if the designated constraints aren't met.
type CouponListHistoryRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponListHistoryRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponListHistoryRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponListHistoryRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponListHistoryRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponListHistoryRspValidationError) ErrorName() string {
	return "CouponListHistoryRspValidationError"
}

// Error satisfies the builtin error interface
func (e CouponListHistoryRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCouponListHistoryRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponListHistoryRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponListHistoryRspValidationError{}

// Validate checks the field values on CouponListReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CouponListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CouponListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CouponListReqMultiError, or
// nil if none found.
func (m *CouponListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CouponListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CouponListReqMultiError(errors)
	}

	return nil
}

// CouponListReqMultiError is an error wrapping multiple validation errors
// returned by CouponListReq.ValidateAll() if the designated constraints
// aren't met.
type CouponListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponListReqMultiError) AllErrors() []error { return m }

// CouponListReqValidationError is the validation error returned by
// CouponListReq.Validate if the designated constraints aren't met.
type CouponListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponListReqValidationError) ErrorName() string { return "CouponListReqValidationError" }

// Error satisfies the builtin error interface
func (e CouponListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCouponListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponListReqValidationError{}

// Validate checks the field values on CouponListRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CouponListRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CouponListRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CouponListRspMultiError, or
// nil if none found.
func (m *CouponListRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *CouponListRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CouponListRspMultiError(errors)
	}

	return nil
}

// CouponListRspMultiError is an error wrapping multiple validation errors
// returned by CouponListRsp.ValidateAll() if the designated constraints
// aren't met.
type CouponListRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponListRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponListRspMultiError) AllErrors() []error { return m }

// CouponListRspValidationError is the validation error returned by
// CouponListRsp.Validate if the designated constraints aren't met.
type CouponListRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponListRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponListRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponListRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponListRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponListRspValidationError) ErrorName() string { return "CouponListRspValidationError" }

// Error satisfies the builtin error interface
func (e CouponListRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCouponListRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponListRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponListRspValidationError{}

// Validate checks the field values on CouponListCartReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CouponListCartReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CouponListCartReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CouponListCartReqMultiError, or nil if none found.
func (m *CouponListCartReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CouponListCartReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if len(errors) > 0 {
		return CouponListCartReqMultiError(errors)
	}

	return nil
}

// CouponListCartReqMultiError is an error wrapping multiple validation errors
// returned by CouponListCartReq.ValidateAll() if the designated constraints
// aren't met.
type CouponListCartReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponListCartReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponListCartReqMultiError) AllErrors() []error { return m }

// CouponListCartReqValidationError is the validation error returned by
// CouponListCartReq.Validate if the designated constraints aren't met.
type CouponListCartReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponListCartReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponListCartReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponListCartReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponListCartReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponListCartReqValidationError) ErrorName() string {
	return "CouponListCartReqValidationError"
}

// Error satisfies the builtin error interface
func (e CouponListCartReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCouponListCartReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponListCartReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponListCartReqValidationError{}

// Validate checks the field values on CouponListCartRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CouponListCartRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CouponListCartRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CouponListCartRspMultiError, or nil if none found.
func (m *CouponListCartRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *CouponListCartRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CouponListCartRspMultiError(errors)
	}

	return nil
}

// CouponListCartRspMultiError is an error wrapping multiple validation errors
// returned by CouponListCartRsp.ValidateAll() if the designated constraints
// aren't met.
type CouponListCartRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponListCartRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponListCartRspMultiError) AllErrors() []error { return m }

// CouponListCartRspValidationError is the validation error returned by
// CouponListCartRsp.Validate if the designated constraints aren't met.
type CouponListCartRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponListCartRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponListCartRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponListCartRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponListCartRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponListCartRspValidationError) ErrorName() string {
	return "CouponListCartRspValidationError"
}

// Error satisfies the builtin error interface
func (e CouponListCartRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCouponListCartRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponListCartRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponListCartRspValidationError{}

// Validate checks the field values on CouponListByProductReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CouponListByProductReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CouponListByProductReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CouponListByProductReqMultiError, or nil if none found.
func (m *CouponListByProductReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CouponListByProductReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductId

	if len(errors) > 0 {
		return CouponListByProductReqMultiError(errors)
	}

	return nil
}

// CouponListByProductReqMultiError is an error wrapping multiple validation
// errors returned by CouponListByProductReq.ValidateAll() if the designated
// constraints aren't met.
type CouponListByProductReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponListByProductReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponListByProductReqMultiError) AllErrors() []error { return m }

// CouponListByProductReqValidationError is the validation error returned by
// CouponListByProductReq.Validate if the designated constraints aren't met.
type CouponListByProductReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponListByProductReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponListByProductReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponListByProductReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponListByProductReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponListByProductReqValidationError) ErrorName() string {
	return "CouponListByProductReqValidationError"
}

// Error satisfies the builtin error interface
func (e CouponListByProductReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCouponListByProductReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponListByProductReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponListByProductReqValidationError{}

// Validate checks the field values on CouponListByProductRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CouponListByProductRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CouponListByProductRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CouponListByProductRspMultiError, or nil if none found.
func (m *CouponListByProductRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *CouponListByProductRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CouponListByProductRspMultiError(errors)
	}

	return nil
}

// CouponListByProductRspMultiError is an error wrapping multiple validation
// errors returned by CouponListByProductRsp.ValidateAll() if the designated
// constraints aren't met.
type CouponListByProductRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponListByProductRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponListByProductRspMultiError) AllErrors() []error { return m }

// CouponListByProductRspValidationError is the validation error returned by
// CouponListByProductRsp.Validate if the designated constraints aren't met.
type CouponListByProductRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponListByProductRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponListByProductRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponListByProductRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponListByProductRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponListByProductRspValidationError) ErrorName() string {
	return "CouponListByProductRspValidationError"
}

// Error satisfies the builtin error interface
func (e CouponListByProductRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCouponListByProductRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponListByProductRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponListByProductRspValidationError{}

// Validate checks the field values on CouponHistoryDetail_Coupon with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CouponHistoryDetail_Coupon) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CouponHistoryDetail_Coupon with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CouponHistoryDetail_CouponMultiError, or nil if none found.
func (m *CouponHistoryDetail_Coupon) ValidateAll() error {
	return m.validate(true)
}

func (m *CouponHistoryDetail_Coupon) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Amount

	// no validation rules for Note

	// no validation rules for Code

	// no validation rules for Type

	// no validation rules for UseType

	// no validation rules for EndTime

	if len(errors) > 0 {
		return CouponHistoryDetail_CouponMultiError(errors)
	}

	return nil
}

// CouponHistoryDetail_CouponMultiError is an error wrapping multiple
// validation errors returned by CouponHistoryDetail_Coupon.ValidateAll() if
// the designated constraints aren't met.
type CouponHistoryDetail_CouponMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponHistoryDetail_CouponMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponHistoryDetail_CouponMultiError) AllErrors() []error { return m }

// CouponHistoryDetail_CouponValidationError is the validation error returned
// by CouponHistoryDetail_Coupon.Validate if the designated constraints aren't met.
type CouponHistoryDetail_CouponValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponHistoryDetail_CouponValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponHistoryDetail_CouponValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponHistoryDetail_CouponValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponHistoryDetail_CouponValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponHistoryDetail_CouponValidationError) ErrorName() string {
	return "CouponHistoryDetail_CouponValidationError"
}

// Error satisfies the builtin error interface
func (e CouponHistoryDetail_CouponValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCouponHistoryDetail_Coupon.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponHistoryDetail_CouponValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponHistoryDetail_CouponValidationError{}

// Validate checks the field values on
// CouponHistoryDetail_CouponProductRelation with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CouponHistoryDetail_CouponProductRelation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CouponHistoryDetail_CouponProductRelation with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CouponHistoryDetail_CouponProductRelationMultiError, or nil if none found.
func (m *CouponHistoryDetail_CouponProductRelation) ValidateAll() error {
	return m.validate(true)
}

func (m *CouponHistoryDetail_CouponProductRelation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CouponId

	// no validation rules for ProductId

	// no validation rules for ProductName

	// no validation rules for ProductSn

	if len(errors) > 0 {
		return CouponHistoryDetail_CouponProductRelationMultiError(errors)
	}

	return nil
}

// CouponHistoryDetail_CouponProductRelationMultiError is an error wrapping
// multiple validation errors returned by
// CouponHistoryDetail_CouponProductRelation.ValidateAll() if the designated
// constraints aren't met.
type CouponHistoryDetail_CouponProductRelationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponHistoryDetail_CouponProductRelationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponHistoryDetail_CouponProductRelationMultiError) AllErrors() []error { return m }

// CouponHistoryDetail_CouponProductRelationValidationError is the validation
// error returned by CouponHistoryDetail_CouponProductRelation.Validate if the
// designated constraints aren't met.
type CouponHistoryDetail_CouponProductRelationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponHistoryDetail_CouponProductRelationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponHistoryDetail_CouponProductRelationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponHistoryDetail_CouponProductRelationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponHistoryDetail_CouponProductRelationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponHistoryDetail_CouponProductRelationValidationError) ErrorName() string {
	return "CouponHistoryDetail_CouponProductRelationValidationError"
}

// Error satisfies the builtin error interface
func (e CouponHistoryDetail_CouponProductRelationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCouponHistoryDetail_CouponProductRelation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponHistoryDetail_CouponProductRelationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponHistoryDetail_CouponProductRelationValidationError{}

// Validate checks the field values on
// CouponHistoryDetail_CouponProductCategoryRelation with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CouponHistoryDetail_CouponProductCategoryRelation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CouponHistoryDetail_CouponProductCategoryRelation with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// CouponHistoryDetail_CouponProductCategoryRelationMultiError, or nil if none found.
func (m *CouponHistoryDetail_CouponProductCategoryRelation) ValidateAll() error {
	return m.validate(true)
}

func (m *CouponHistoryDetail_CouponProductCategoryRelation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CouponId

	// no validation rules for ProductCategoryId

	// no validation rules for ProductCategoryName

	// no validation rules for ParentCategoryName

	if len(errors) > 0 {
		return CouponHistoryDetail_CouponProductCategoryRelationMultiError(errors)
	}

	return nil
}

// CouponHistoryDetail_CouponProductCategoryRelationMultiError is an error
// wrapping multiple validation errors returned by
// CouponHistoryDetail_CouponProductCategoryRelation.ValidateAll() if the
// designated constraints aren't met.
type CouponHistoryDetail_CouponProductCategoryRelationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponHistoryDetail_CouponProductCategoryRelationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponHistoryDetail_CouponProductCategoryRelationMultiError) AllErrors() []error { return m }

// CouponHistoryDetail_CouponProductCategoryRelationValidationError is the
// validation error returned by
// CouponHistoryDetail_CouponProductCategoryRelation.Validate if the
// designated constraints aren't met.
type CouponHistoryDetail_CouponProductCategoryRelationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponHistoryDetail_CouponProductCategoryRelationValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e CouponHistoryDetail_CouponProductCategoryRelationValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e CouponHistoryDetail_CouponProductCategoryRelationValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e CouponHistoryDetail_CouponProductCategoryRelationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponHistoryDetail_CouponProductCategoryRelationValidationError) ErrorName() string {
	return "CouponHistoryDetail_CouponProductCategoryRelationValidationError"
}

// Error satisfies the builtin error interface
func (e CouponHistoryDetail_CouponProductCategoryRelationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCouponHistoryDetail_CouponProductCategoryRelation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponHistoryDetail_CouponProductCategoryRelationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponHistoryDetail_CouponProductCategoryRelationValidationError{}
