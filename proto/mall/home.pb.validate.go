// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: portal/home.proto

package mall

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on HomeContentReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HomeContentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HomeContentReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HomeContentReqMultiError,
// or nil if none found.
func (m *HomeContentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *HomeContentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return HomeContentReqMultiError(errors)
	}

	return nil
}

// HomeContentReqMultiError is an error wrapping multiple validation errors
// returned by HomeContentReq.ValidateAll() if the designated constraints
// aren't met.
type HomeContentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HomeContentReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HomeContentReqMultiError) AllErrors() []error { return m }

// HomeContentReqValidationError is the validation error returned by
// HomeContentReq.Validate if the designated constraints aren't met.
type HomeContentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HomeContentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HomeContentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HomeContentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HomeContentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HomeContentReqValidationError) ErrorName() string { return "HomeContentReqValidationError" }

// Error satisfies the builtin error interface
func (e HomeContentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHomeContentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HomeContentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HomeContentReqValidationError{}

// Validate checks the field values on HomeContentRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HomeContentRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HomeContentRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HomeContentRspMultiError,
// or nil if none found.
func (m *HomeContentRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *HomeContentRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAdvertises() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HomeContentRspValidationError{
						field:  fmt.Sprintf("Advertises[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HomeContentRspValidationError{
						field:  fmt.Sprintf("Advertises[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HomeContentRspValidationError{
					field:  fmt.Sprintf("Advertises[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return HomeContentRspMultiError(errors)
	}

	return nil
}

// HomeContentRspMultiError is an error wrapping multiple validation errors
// returned by HomeContentRsp.ValidateAll() if the designated constraints
// aren't met.
type HomeContentRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HomeContentRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HomeContentRspMultiError) AllErrors() []error { return m }

// HomeContentRspValidationError is the validation error returned by
// HomeContentRsp.Validate if the designated constraints aren't met.
type HomeContentRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HomeContentRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HomeContentRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HomeContentRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HomeContentRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HomeContentRspValidationError) ErrorName() string { return "HomeContentRspValidationError" }

// Error satisfies the builtin error interface
func (e HomeContentRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHomeContentRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HomeContentRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HomeContentRspValidationError{}

// Validate checks the field values on ProductCategoryItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProductCategoryItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductCategoryItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductCategoryItemMultiError, or nil if none found.
func (m *ProductCategoryItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductCategoryItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ParentId

	// no validation rules for Name

	// no validation rules for Icon

	if len(errors) > 0 {
		return ProductCategoryItemMultiError(errors)
	}

	return nil
}

// ProductCategoryItemMultiError is an error wrapping multiple validation
// errors returned by ProductCategoryItem.ValidateAll() if the designated
// constraints aren't met.
type ProductCategoryItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductCategoryItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductCategoryItemMultiError) AllErrors() []error { return m }

// ProductCategoryItemValidationError is the validation error returned by
// ProductCategoryItem.Validate if the designated constraints aren't met.
type ProductCategoryItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductCategoryItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductCategoryItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductCategoryItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductCategoryItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductCategoryItemValidationError) ErrorName() string {
	return "ProductCategoryItemValidationError"
}

// Error satisfies the builtin error interface
func (e ProductCategoryItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductCategoryItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductCategoryItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductCategoryItemValidationError{}

// Validate checks the field values on ProductCategoryListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProductCategoryListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductCategoryListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductCategoryListReqMultiError, or nil if none found.
func (m *ProductCategoryListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductCategoryListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetParentId() < 0 {
		err := ProductCategoryListReqValidationError{
			field:  "ParentId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProductCategoryListReqMultiError(errors)
	}

	return nil
}

// ProductCategoryListReqMultiError is an error wrapping multiple validation
// errors returned by ProductCategoryListReq.ValidateAll() if the designated
// constraints aren't met.
type ProductCategoryListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductCategoryListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductCategoryListReqMultiError) AllErrors() []error { return m }

// ProductCategoryListReqValidationError is the validation error returned by
// ProductCategoryListReq.Validate if the designated constraints aren't met.
type ProductCategoryListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductCategoryListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductCategoryListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductCategoryListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductCategoryListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductCategoryListReqValidationError) ErrorName() string {
	return "ProductCategoryListReqValidationError"
}

// Error satisfies the builtin error interface
func (e ProductCategoryListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductCategoryListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductCategoryListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductCategoryListReqValidationError{}

// Validate checks the field values on ProductCategoryListRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProductCategoryListRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductCategoryListRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductCategoryListRspMultiError, or nil if none found.
func (m *ProductCategoryListRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductCategoryListRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProductCategoryListRspValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProductCategoryListRspValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProductCategoryListRspValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProductCategoryListRspMultiError(errors)
	}

	return nil
}

// ProductCategoryListRspMultiError is an error wrapping multiple validation
// errors returned by ProductCategoryListRsp.ValidateAll() if the designated
// constraints aren't met.
type ProductCategoryListRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductCategoryListRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductCategoryListRspMultiError) AllErrors() []error { return m }

// ProductCategoryListRspValidationError is the validation error returned by
// ProductCategoryListRsp.Validate if the designated constraints aren't met.
type ProductCategoryListRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductCategoryListRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductCategoryListRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductCategoryListRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductCategoryListRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductCategoryListRspValidationError) ErrorName() string {
	return "ProductCategoryListRspValidationError"
}

// Error satisfies the builtin error interface
func (e ProductCategoryListRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductCategoryListRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductCategoryListRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductCategoryListRspValidationError{}

// Validate checks the field values on HomeContentRsp_HomeAdvertise with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HomeContentRsp_HomeAdvertise) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HomeContentRsp_HomeAdvertise with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HomeContentRsp_HomeAdvertiseMultiError, or nil if none found.
func (m *HomeContentRsp_HomeAdvertise) ValidateAll() error {
	return m.validate(true)
}

func (m *HomeContentRsp_HomeAdvertise) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pic

	// no validation rules for Url

	if len(errors) > 0 {
		return HomeContentRsp_HomeAdvertiseMultiError(errors)
	}

	return nil
}

// HomeContentRsp_HomeAdvertiseMultiError is an error wrapping multiple
// validation errors returned by HomeContentRsp_HomeAdvertise.ValidateAll() if
// the designated constraints aren't met.
type HomeContentRsp_HomeAdvertiseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HomeContentRsp_HomeAdvertiseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HomeContentRsp_HomeAdvertiseMultiError) AllErrors() []error { return m }

// HomeContentRsp_HomeAdvertiseValidationError is the validation error returned
// by HomeContentRsp_HomeAdvertise.Validate if the designated constraints
// aren't met.
type HomeContentRsp_HomeAdvertiseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HomeContentRsp_HomeAdvertiseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HomeContentRsp_HomeAdvertiseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HomeContentRsp_HomeAdvertiseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HomeContentRsp_HomeAdvertiseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HomeContentRsp_HomeAdvertiseValidationError) ErrorName() string {
	return "HomeContentRsp_HomeAdvertiseValidationError"
}

// Error satisfies the builtin error interface
func (e HomeContentRsp_HomeAdvertiseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHomeContentRsp_HomeAdvertise.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HomeContentRsp_HomeAdvertiseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HomeContentRsp_HomeAdvertiseValidationError{}
