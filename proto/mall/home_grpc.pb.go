// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: portal/home.proto

package mall

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PortalHomeApi_HomeContent_FullMethodName         = "/admin.PortalHomeApi/HomeContent"
	PortalHomeApi_ProductCategoryList_FullMethodName = "/admin.PortalHomeApi/ProductCategoryList"
)

// PortalHomeApiClient is the client API for PortalHomeApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortalHomeApiClient interface {
	// 首页内容信息展示
	HomeContent(ctx context.Context, in *HomeContentReq, opts ...grpc.CallOption) (*HomeContentRsp, error)
	// 获取首页商品分类
	ProductCategoryList(ctx context.Context, in *ProductCategoryListReq, opts ...grpc.CallOption) (*ProductCategoryListRsp, error)
}

type portalHomeApiClient struct {
	cc grpc.ClientConnInterface
}

func NewPortalHomeApiClient(cc grpc.ClientConnInterface) PortalHomeApiClient {
	return &portalHomeApiClient{cc}
}

func (c *portalHomeApiClient) HomeContent(ctx context.Context, in *HomeContentReq, opts ...grpc.CallOption) (*HomeContentRsp, error) {
	out := new(HomeContentRsp)
	err := c.cc.Invoke(ctx, PortalHomeApi_HomeContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalHomeApiClient) ProductCategoryList(ctx context.Context, in *ProductCategoryListReq, opts ...grpc.CallOption) (*ProductCategoryListRsp, error) {
	out := new(ProductCategoryListRsp)
	err := c.cc.Invoke(ctx, PortalHomeApi_ProductCategoryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortalHomeApiServer is the server API for PortalHomeApi service.
// All implementations must embed UnimplementedPortalHomeApiServer
// for forward compatibility
type PortalHomeApiServer interface {
	// 首页内容信息展示
	HomeContent(context.Context, *HomeContentReq) (*HomeContentRsp, error)
	// 获取首页商品分类
	ProductCategoryList(context.Context, *ProductCategoryListReq) (*ProductCategoryListRsp, error)
	mustEmbedUnimplementedPortalHomeApiServer()
}

// UnimplementedPortalHomeApiServer must be embedded to have forward compatible implementations.
type UnimplementedPortalHomeApiServer struct {
}

func (UnimplementedPortalHomeApiServer) HomeContent(context.Context, *HomeContentReq) (*HomeContentRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HomeContent not implemented")
}
func (UnimplementedPortalHomeApiServer) ProductCategoryList(context.Context, *ProductCategoryListReq) (*ProductCategoryListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCategoryList not implemented")
}
func (UnimplementedPortalHomeApiServer) mustEmbedUnimplementedPortalHomeApiServer() {}

// UnsafePortalHomeApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortalHomeApiServer will
// result in compilation errors.
type UnsafePortalHomeApiServer interface {
	mustEmbedUnimplementedPortalHomeApiServer()
}

func RegisterPortalHomeApiServer(s grpc.ServiceRegistrar, srv PortalHomeApiServer) {
	s.RegisterService(&PortalHomeApi_ServiceDesc, srv)
}

func _PortalHomeApi_HomeContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HomeContentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalHomeApiServer).HomeContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalHomeApi_HomeContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalHomeApiServer).HomeContent(ctx, req.(*HomeContentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalHomeApi_ProductCategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategoryListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalHomeApiServer).ProductCategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalHomeApi_ProductCategoryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalHomeApiServer).ProductCategoryList(ctx, req.(*ProductCategoryListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PortalHomeApi_ServiceDesc is the grpc.ServiceDesc for PortalHomeApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortalHomeApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.PortalHomeApi",
	HandlerType: (*PortalHomeApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HomeContent",
			Handler:    _PortalHomeApi_HomeContent_Handler,
		},
		{
			MethodName: "ProductCategoryList",
			Handler:    _PortalHomeApi_ProductCategoryList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "portal/home.proto",
}
