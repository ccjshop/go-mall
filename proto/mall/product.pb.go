// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: portal/product.proto

package mall

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SearchProductReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 条件
	Keyword           string                  `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`                     // 关键词
	BrandId           *wrapperspb.UInt64Value `protobuf:"bytes,2,opt,name=brandId,proto3" json:"brandId,omitempty"`                     // 品牌ID
	ProductCategoryId *wrapperspb.UInt64Value `protobuf:"bytes,3,opt,name=productCategoryId,proto3" json:"productCategoryId,omitempty"` // 商品分类ID
	// 分页排序
	PageNum  uint32 `protobuf:"varint,10,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`    //
	PageSize uint32 `protobuf:"varint,11,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` //
	Sort     uint32 `protobuf:"varint,12,opt,name=sort,proto3" json:"sort,omitempty"`                         // 排序字段:0->按相关度；1->按新品；2->按销量；3->价格从低到高；4->价格从高到低
}

func (x *SearchProductReq) Reset() {
	*x = SearchProductReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_portal_product_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchProductReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchProductReq) ProtoMessage() {}

func (x *SearchProductReq) ProtoReflect() protoreflect.Message {
	mi := &file_portal_product_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchProductReq.ProtoReflect.Descriptor instead.
func (*SearchProductReq) Descriptor() ([]byte, []int) {
	return file_portal_product_proto_rawDescGZIP(), []int{0}
}

func (x *SearchProductReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchProductReq) GetBrandId() *wrapperspb.UInt64Value {
	if x != nil {
		return x.BrandId
	}
	return nil
}

func (x *SearchProductReq) GetProductCategoryId() *wrapperspb.UInt64Value {
	if x != nil {
		return x.ProductCategoryId
	}
	return nil
}

func (x *SearchProductReq) GetPageNum() uint32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *SearchProductReq) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SearchProductReq) GetSort() uint32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

type SearchProductRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data      []*SearchProductRsp_Product `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`                              // 商品
	Total     uint32                      `protobuf:"varint,10,opt,name=total,proto3" json:"total,omitempty"`                          // 总数量
	PageTotal uint32                      `protobuf:"varint,11,opt,name=page_total,json=pageTotal,proto3" json:"page_total,omitempty"` // 总页数
	PageSize  uint32                      `protobuf:"varint,12,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`    // 每页的数量
	PageNum   uint32                      `protobuf:"varint,13,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`       // 当前页数
}

func (x *SearchProductRsp) Reset() {
	*x = SearchProductRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_portal_product_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchProductRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchProductRsp) ProtoMessage() {}

func (x *SearchProductRsp) ProtoReflect() protoreflect.Message {
	mi := &file_portal_product_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchProductRsp.ProtoReflect.Descriptor instead.
func (*SearchProductRsp) Descriptor() ([]byte, []int) {
	return file_portal_product_proto_rawDescGZIP(), []int{1}
}

func (x *SearchProductRsp) GetData() []*SearchProductRsp_Product {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SearchProductRsp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchProductRsp) GetPageTotal() uint32 {
	if x != nil {
		return x.PageTotal
	}
	return 0
}

func (x *SearchProductRsp) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SearchProductRsp) GetPageNum() uint32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

type CategoryTreeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CategoryTreeItem) Reset() {
	*x = CategoryTreeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_portal_product_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryTreeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryTreeItem) ProtoMessage() {}

func (x *CategoryTreeItem) ProtoReflect() protoreflect.Message {
	mi := &file_portal_product_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryTreeItem.ProtoReflect.Descriptor instead.
func (*CategoryTreeItem) Descriptor() ([]byte, []int) {
	return file_portal_product_proto_rawDescGZIP(), []int{2}
}

type CategoryTreeListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CategoryTreeListReq) Reset() {
	*x = CategoryTreeListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_portal_product_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryTreeListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryTreeListReq) ProtoMessage() {}

func (x *CategoryTreeListReq) ProtoReflect() protoreflect.Message {
	mi := &file_portal_product_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryTreeListReq.ProtoReflect.Descriptor instead.
func (*CategoryTreeListReq) Descriptor() ([]byte, []int) {
	return file_portal_product_proto_rawDescGZIP(), []int{3}
}

type CategoryTreeListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`      // 状态码
	Message string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // 提示信息
	Data    []*CategoryTreeItem `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CategoryTreeListRsp) Reset() {
	*x = CategoryTreeListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_portal_product_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryTreeListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryTreeListRsp) ProtoMessage() {}

func (x *CategoryTreeListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_portal_product_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryTreeListRsp.ProtoReflect.Descriptor instead.
func (*CategoryTreeListRsp) Descriptor() ([]byte, []int) {
	return file_portal_product_proto_rawDescGZIP(), []int{4}
}

func (x *CategoryTreeListRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CategoryTreeListRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CategoryTreeListRsp) GetData() []*CategoryTreeItem {
	if x != nil {
		return x.Data
	}
	return nil
}

type ProductDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // 主键
}

func (x *ProductDetailReq) Reset() {
	*x = ProductDetailReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_portal_product_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductDetailReq) ProtoMessage() {}

func (x *ProductDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_portal_product_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductDetailReq.ProtoReflect.Descriptor instead.
func (*ProductDetailReq) Descriptor() ([]byte, []int) {
	return file_portal_product_proto_rawDescGZIP(), []int{5}
}

func (x *ProductDetailReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 前台商品详情
type ProductDetailRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Product                *ProductDetailRsp_Product                 `protobuf:"bytes,1,opt,name=product,proto3" json:"product,omitempty"`                                                               // 商品信息
	Brand                  *ProductDetailRsp_Brand                   `protobuf:"bytes,2,opt,name=brand,proto3" json:"brand,omitempty"`                                                                   // 商品品牌
	ProductAttributes      []*ProductDetailRsp_ProductAttribute      `protobuf:"bytes,3,rep,name=product_attributes,json=productAttributes,proto3" json:"product_attributes,omitempty"`                  // 商品属性与参数
	ProductAttributeValues []*ProductDetailRsp_ProductAttributeValue `protobuf:"bytes,4,rep,name=product_attribute_values,json=productAttributeValues,proto3" json:"product_attribute_values,omitempty"` // 手动录入的商品属性与参数值
	SkuStocks              []*ProductDetailRsp_SkuStock              `protobuf:"bytes,5,rep,name=sku_stocks,json=skuStocks,proto3" json:"sku_stocks,omitempty"`                                          // 商品的sku库存信息
	ProductLadders         []*ProductDetailRsp_ProductLadder         `protobuf:"bytes,6,rep,name=product_ladders,json=productLadders,proto3" json:"product_ladders,omitempty"`                           // 商品阶梯价格设置
	ProductFullReductions  []*ProductDetailRsp_ProductFullReduction  `protobuf:"bytes,7,rep,name=product_full_reductions,json=productFullReductions,proto3" json:"product_full_reductions,omitempty"`    // 商品满减价格设置
	Coupons                []*ProductDetailRsp_Coupon                `protobuf:"bytes,8,rep,name=coupons,proto3" json:"coupons,omitempty"`                                                               // 商品可用优惠券
}

func (x *ProductDetailRsp) Reset() {
	*x = ProductDetailRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_portal_product_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductDetailRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductDetailRsp) ProtoMessage() {}

func (x *ProductDetailRsp) ProtoReflect() protoreflect.Message {
	mi := &file_portal_product_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductDetailRsp.ProtoReflect.Descriptor instead.
func (*ProductDetailRsp) Descriptor() ([]byte, []int) {
	return file_portal_product_proto_rawDescGZIP(), []int{6}
}

func (x *ProductDetailRsp) GetProduct() *ProductDetailRsp_Product {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *ProductDetailRsp) GetBrand() *ProductDetailRsp_Brand {
	if x != nil {
		return x.Brand
	}
	return nil
}

func (x *ProductDetailRsp) GetProductAttributes() []*ProductDetailRsp_ProductAttribute {
	if x != nil {
		return x.ProductAttributes
	}
	return nil
}

func (x *ProductDetailRsp) GetProductAttributeValues() []*ProductDetailRsp_ProductAttributeValue {
	if x != nil {
		return x.ProductAttributeValues
	}
	return nil
}

func (x *ProductDetailRsp) GetSkuStocks() []*ProductDetailRsp_SkuStock {
	if x != nil {
		return x.SkuStocks
	}
	return nil
}

func (x *ProductDetailRsp) GetProductLadders() []*ProductDetailRsp_ProductLadder {
	if x != nil {
		return x.ProductLadders
	}
	return nil
}

func (x *ProductDetailRsp) GetProductFullReductions() []*ProductDetailRsp_ProductFullReduction {
	if x != nil {
		return x.ProductFullReductions
	}
	return nil
}

func (x *ProductDetailRsp) GetCoupons() []*ProductDetailRsp_Coupon {
	if x != nil {
		return x.Coupons
	}
	return nil
}

// 商品列表
type SearchProductRsp_Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                            // 主键
	Pic      string `protobuf:"bytes,31,opt,name=pic,proto3" json:"pic,omitempty"`                          // 图片
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                         // 商品名称
	SubTitle string `protobuf:"bytes,4,opt,name=sub_title,json=subTitle,proto3" json:"sub_title,omitempty"` // 副标题
	Price    string `protobuf:"bytes,8,opt,name=price,proto3" json:"price,omitempty"`                       // 价格
	Sale     uint32 `protobuf:"varint,38,opt,name=sale,proto3" json:"sale,omitempty"`                       // 销量
}

func (x *SearchProductRsp_Product) Reset() {
	*x = SearchProductRsp_Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_portal_product_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchProductRsp_Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchProductRsp_Product) ProtoMessage() {}

func (x *SearchProductRsp_Product) ProtoReflect() protoreflect.Message {
	mi := &file_portal_product_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchProductRsp_Product.ProtoReflect.Descriptor instead.
func (*SearchProductRsp_Product) Descriptor() ([]byte, []int) {
	return file_portal_product_proto_rawDescGZIP(), []int{1, 0}
}

func (x *SearchProductRsp_Product) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SearchProductRsp_Product) GetPic() string {
	if x != nil {
		return x.Pic
	}
	return ""
}

func (x *SearchProductRsp_Product) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SearchProductRsp_Product) GetSubTitle() string {
	if x != nil {
		return x.SubTitle
	}
	return ""
}

func (x *SearchProductRsp_Product) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *SearchProductRsp_Product) GetSale() uint32 {
	if x != nil {
		return x.Sale
	}
	return 0
}

type ProductDetailRsp_Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                           // 主键
	AlbumPics     []string `protobuf:"bytes,32,rep,name=album_pics,json=albumPics,proto3" json:"album_pics,omitempty"`            // 画册图片，连产品图片限制为5张
	Pic           string   `protobuf:"bytes,31,opt,name=pic,proto3" json:"pic,omitempty"`                                         // 图片
	Name          string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                        // 商品名称
	SubTitle      string   `protobuf:"bytes,4,opt,name=sub_title,json=subTitle,proto3" json:"sub_title,omitempty"`                // 副标题
	Price         string   `protobuf:"bytes,8,opt,name=price,proto3" json:"price,omitempty"`                                      // 价格
	OriginalPrice string   `protobuf:"bytes,9,opt,name=original_price,json=originalPrice,proto3" json:"original_price,omitempty"` // 市场价
	Sale          uint32   `protobuf:"varint,38,opt,name=sale,proto3" json:"sale,omitempty"`                                      // 销量
	Stock         uint32   `protobuf:"varint,10,opt,name=stock,proto3" json:"stock,omitempty"`                                    // 库存
	ServiceIds    string   `protobuf:"bytes,21,opt,name=service_ids,json=serviceIds,proto3" json:"service_ids,omitempty"`         // 以逗号分割的产品服务：1->无忧退货；2->快速退款；3->免费包邮
}

func (x *ProductDetailRsp_Product) Reset() {
	*x = ProductDetailRsp_Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_portal_product_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductDetailRsp_Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductDetailRsp_Product) ProtoMessage() {}

func (x *ProductDetailRsp_Product) ProtoReflect() protoreflect.Message {
	mi := &file_portal_product_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductDetailRsp_Product.ProtoReflect.Descriptor instead.
func (*ProductDetailRsp_Product) Descriptor() ([]byte, []int) {
	return file_portal_product_proto_rawDescGZIP(), []int{6, 0}
}

func (x *ProductDetailRsp_Product) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductDetailRsp_Product) GetAlbumPics() []string {
	if x != nil {
		return x.AlbumPics
	}
	return nil
}

func (x *ProductDetailRsp_Product) GetPic() string {
	if x != nil {
		return x.Pic
	}
	return ""
}

func (x *ProductDetailRsp_Product) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductDetailRsp_Product) GetSubTitle() string {
	if x != nil {
		return x.SubTitle
	}
	return ""
}

func (x *ProductDetailRsp_Product) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *ProductDetailRsp_Product) GetOriginalPrice() string {
	if x != nil {
		return x.OriginalPrice
	}
	return ""
}

func (x *ProductDetailRsp_Product) GetSale() uint32 {
	if x != nil {
		return x.Sale
	}
	return 0
}

func (x *ProductDetailRsp_Product) GetStock() uint32 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *ProductDetailRsp_Product) GetServiceIds() string {
	if x != nil {
		return x.ServiceIds
	}
	return ""
}

type ProductDetailRsp_Brand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                  // 名称
	FirstLetter string `protobuf:"bytes,3,opt,name=first_letter,json=firstLetter,proto3" json:"first_letter,omitempty"` // 首字母
	Logo        string `protobuf:"bytes,9,opt,name=logo,proto3" json:"logo,omitempty"`                                  // 品牌logo
}

func (x *ProductDetailRsp_Brand) Reset() {
	*x = ProductDetailRsp_Brand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_portal_product_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductDetailRsp_Brand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductDetailRsp_Brand) ProtoMessage() {}

func (x *ProductDetailRsp_Brand) ProtoReflect() protoreflect.Message {
	mi := &file_portal_product_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductDetailRsp_Brand.ProtoReflect.Descriptor instead.
func (*ProductDetailRsp_Brand) Descriptor() ([]byte, []int) {
	return file_portal_product_proto_rawDescGZIP(), []int{6, 1}
}

func (x *ProductDetailRsp_Brand) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductDetailRsp_Brand) GetFirstLetter() string {
	if x != nil {
		return x.FirstLetter
	}
	return ""
}

func (x *ProductDetailRsp_Brand) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

type ProductDetailRsp_ProductAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                       // 编号
	Type                       uint32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`                                                                                   // 属性的类型；0->规格；1->参数
	ProductAttributeCategoryId uint64 `protobuf:"varint,3,opt,name=product_attribute_category_id,json=productAttributeCategoryId,proto3" json:"product_attribute_category_id,omitempty"` // 产品属性分类表ID
	Name                       string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                                                                                    // 属性名称
	Sort                       uint32 `protobuf:"varint,8,opt,name=sort,proto3" json:"sort,omitempty"`                                                                                   // 排序字段
	SelectType uint32 `protobuf:"varint,5,opt,name=select_type,json=selectType,proto3" json:"select_type,omitempty"` // 属性选择类型：0->唯一；1->单选；2->多选
	InputType  uint32 `protobuf:"varint,6,opt,name=input_type,json=inputType,proto3" json:"input_type,omitempty"`    // 属性录入方式：0->手工录入；1->从列表中选取
	InputList  string `protobuf:"bytes,7,opt,name=input_list,json=inputList,proto3" json:"input_list,omitempty"`     // 可选值列表，以逗号隔开
	FilterType uint32 `protobuf:"varint,9,opt,name=filter_type,json=filterType,proto3" json:"filter_type,omitempty"`  // 分类筛选样式：1->普通；1->颜色
	SearchType uint32 `protobuf:"varint,10,opt,name=search_type,json=searchType,proto3" json:"search_type,omitempty"` // 检索类型；0->不需要进行检索；1->关键字检索；2->范围检索
	RelatedStatus uint32 `protobuf:"varint,11,opt,name=related_status,json=relatedStatus,proto3" json:"related_status,omitempty"`   // 相同属性产品是否关联；0->不关联；1->关联
	HandAddStatus uint32 `protobuf:"varint,12,opt,name=hand_add_status,json=handAddStatus,proto3" json:"hand_add_status,omitempty"` // 是否支持手动新增；0->不支持；1->支持
}

func (x *ProductDetailRsp_ProductAttribute) Reset() {
	*x = ProductDetailRsp_ProductAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_portal_product_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductDetailRsp_ProductAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductDetailRsp_ProductAttribute) ProtoMessage() {}

func (x *ProductDetailRsp_ProductAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_portal_product_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductDetailRsp_ProductAttribute.ProtoReflect.Descriptor instead.
func (*ProductDetailRsp_ProductAttribute) Descriptor() ([]byte, []int) {
	return file_portal_product_proto_rawDescGZIP(), []int{6, 2}
}

func (x *ProductDetailRsp_ProductAttribute) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductDetailRsp_ProductAttribute) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ProductDetailRsp_ProductAttribute) GetProductAttributeCategoryId() uint64 {
	if x != nil {
		return x.ProductAttributeCategoryId
	}
	return 0
}

func (x *ProductDetailRsp_ProductAttribute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductDetailRsp_ProductAttribute) GetSort() uint32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *ProductDetailRsp_ProductAttribute) GetSelectType() uint32 {
	if x != nil {
		return x.SelectType
	}
	return 0
}

func (x *ProductDetailRsp_ProductAttribute) GetInputType() uint32 {
	if x != nil {
		return x.InputType
	}
	return 0
}

func (x *ProductDetailRsp_ProductAttribute) GetInputList() string {
	if x != nil {
		return x.InputList
	}
	return ""
}

func (x *ProductDetailRsp_ProductAttribute) GetFilterType() uint32 {
	if x != nil {
		return x.FilterType
	}
	return 0
}

func (x *ProductDetailRsp_ProductAttribute) GetSearchType() uint32 {
	if x != nil {
		return x.SearchType
	}
	return 0
}

func (x *ProductDetailRsp_ProductAttribute) GetRelatedStatus() uint32 {
	if x != nil {
		return x.RelatedStatus
	}
	return 0
}

func (x *ProductDetailRsp_ProductAttribute) GetHandAddStatus() uint32 {
	if x != nil {
		return x.HandAddStatus
	}
	return 0
}

type ProductDetailRsp_ProductAttributeValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                             // 主键ID
	ProductId          uint64 `protobuf:"varint,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`                              // 商品ID
	ProductAttributeId uint64 `protobuf:"varint,3,opt,name=product_attribute_id,json=productAttributeId,proto3" json:"product_attribute_id,omitempty"` // 商品属性ID
	Value              string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`                                                        // 手动添加规格或参数的值，参数单值，规格有多个时以逗号隔开
}

func (x *ProductDetailRsp_ProductAttributeValue) Reset() {
	*x = ProductDetailRsp_ProductAttributeValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_portal_product_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductDetailRsp_ProductAttributeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductDetailRsp_ProductAttributeValue) ProtoMessage() {}

func (x *ProductDetailRsp_ProductAttributeValue) ProtoReflect() protoreflect.Message {
	mi := &file_portal_product_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductDetailRsp_ProductAttributeValue.ProtoReflect.Descriptor instead.
func (*ProductDetailRsp_ProductAttributeValue) Descriptor() ([]byte, []int) {
	return file_portal_product_proto_rawDescGZIP(), []int{6, 3}
}

func (x *ProductDetailRsp_ProductAttributeValue) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductDetailRsp_ProductAttributeValue) GetProductId() uint64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *ProductDetailRsp_ProductAttributeValue) GetProductAttributeId() uint64 {
	if x != nil {
		return x.ProductAttributeId
	}
	return 0
}

func (x *ProductDetailRsp_ProductAttributeValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ProductDetailRsp_SkuStock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                // 主键
	SkuCode   string `protobuf:"bytes,3,opt,name=sku_code,json=skuCode,proto3" json:"sku_code,omitempty"`        // sku编码
	Pic       string `protobuf:"bytes,7,opt,name=pic,proto3" json:"pic,omitempty"`                               // 展示图片
	Sale      uint32 `protobuf:"varint,8,opt,name=sale,proto3" json:"sale,omitempty"`                            // 销量
	SpData    string `protobuf:"bytes,11,opt,name=sp_data,json=spData,proto3" json:"sp_data,omitempty"`          // 商品销售属性，json格式
	ProductId uint64 `protobuf:"varint,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"` // 产品ID
	// 价格
	Price          string `protobuf:"bytes,4,opt,name=price,proto3" json:"price,omitempty"`                                         // 价格
	PromotionPrice string `protobuf:"bytes,9,opt,name=promotion_price,json=promotionPrice,proto3" json:"promotion_price,omitempty"` // 单品促销价格
	// 库存
	Stock     uint32 `protobuf:"varint,5,opt,name=stock,proto3" json:"stock,omitempty"`                           // 库存
	LowStock  uint32 `protobuf:"varint,6,opt,name=low_stock,json=lowStock,proto3" json:"low_stock,omitempty"`     // 预警库存
	LockStock uint32 `protobuf:"varint,10,opt,name=lock_stock,json=lockStock,proto3" json:"lock_stock,omitempty"` // 锁定库存
}

func (x *ProductDetailRsp_SkuStock) Reset() {
	*x = ProductDetailRsp_SkuStock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_portal_product_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductDetailRsp_SkuStock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductDetailRsp_SkuStock) ProtoMessage() {}

func (x *ProductDetailRsp_SkuStock) ProtoReflect() protoreflect.Message {
	mi := &file_portal_product_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductDetailRsp_SkuStock.ProtoReflect.Descriptor instead.
func (*ProductDetailRsp_SkuStock) Descriptor() ([]byte, []int) {
	return file_portal_product_proto_rawDescGZIP(), []int{6, 4}
}

func (x *ProductDetailRsp_SkuStock) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductDetailRsp_SkuStock) GetSkuCode() string {
	if x != nil {
		return x.SkuCode
	}
	return ""
}

func (x *ProductDetailRsp_SkuStock) GetPic() string {
	if x != nil {
		return x.Pic
	}
	return ""
}

func (x *ProductDetailRsp_SkuStock) GetSale() uint32 {
	if x != nil {
		return x.Sale
	}
	return 0
}

func (x *ProductDetailRsp_SkuStock) GetSpData() string {
	if x != nil {
		return x.SpData
	}
	return ""
}

func (x *ProductDetailRsp_SkuStock) GetProductId() uint64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *ProductDetailRsp_SkuStock) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *ProductDetailRsp_SkuStock) GetPromotionPrice() string {
	if x != nil {
		return x.PromotionPrice
	}
	return ""
}

func (x *ProductDetailRsp_SkuStock) GetStock() uint32 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *ProductDetailRsp_SkuStock) GetLowStock() uint32 {
	if x != nil {
		return x.LowStock
	}
	return 0
}

func (x *ProductDetailRsp_SkuStock) GetLockStock() uint32 {
	if x != nil {
		return x.LockStock
	}
	return 0
}

type ProductDetailRsp_ProductLadder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProductDetailRsp_ProductLadder) Reset() {
	*x = ProductDetailRsp_ProductLadder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_portal_product_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductDetailRsp_ProductLadder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductDetailRsp_ProductLadder) ProtoMessage() {}

func (x *ProductDetailRsp_ProductLadder) ProtoReflect() protoreflect.Message {
	mi := &file_portal_product_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductDetailRsp_ProductLadder.ProtoReflect.Descriptor instead.
func (*ProductDetailRsp_ProductLadder) Descriptor() ([]byte, []int) {
	return file_portal_product_proto_rawDescGZIP(), []int{6, 5}
}

type ProductDetailRsp_ProductFullReduction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProductDetailRsp_ProductFullReduction) Reset() {
	*x = ProductDetailRsp_ProductFullReduction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_portal_product_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductDetailRsp_ProductFullReduction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductDetailRsp_ProductFullReduction) ProtoMessage() {}

func (x *ProductDetailRsp_ProductFullReduction) ProtoReflect() protoreflect.Message {
	mi := &file_portal_product_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductDetailRsp_ProductFullReduction.ProtoReflect.Descriptor instead.
func (*ProductDetailRsp_ProductFullReduction) Descriptor() ([]byte, []int) {
	return file_portal_product_proto_rawDescGZIP(), []int{6, 6}
}

type ProductDetailRsp_Coupon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProductDetailRsp_Coupon) Reset() {
	*x = ProductDetailRsp_Coupon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_portal_product_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductDetailRsp_Coupon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductDetailRsp_Coupon) ProtoMessage() {}

func (x *ProductDetailRsp_Coupon) ProtoReflect() protoreflect.Message {
	mi := &file_portal_product_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductDetailRsp_Coupon.ProtoReflect.Descriptor instead.
func (*ProductDetailRsp_Coupon) Descriptor() ([]byte, []int) {
	return file_portal_product_proto_rawDescGZIP(), []int{6, 7}
}

var File_portal_product_proto protoreflect.FileDescriptor

var file_portal_product_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x1a, 0x13, 0x70,
	0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9f, 0x02, 0x0a, 0x10, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18,
	0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x62, 0x72, 0x61, 0x6e,
	0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64,
	0x12, 0x4a, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x00, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x12, 0x24, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x00, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x0f, 0xfa, 0x42, 0x0c, 0x2a, 0x0a, 0x30, 0x00, 0x30, 0x01, 0x30,
	0x02, 0x30, 0x03, 0x30, 0x04, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0xbd, 0x02, 0x0a, 0x10,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x73, 0x70,
	0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x73, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x1a, 0x86, 0x01, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x69, 0x63, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x63,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x65, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x65, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x22,
	0x15, 0x0a, 0x13, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x65, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x22, 0x70, 0x0a, 0x13, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x54, 0x72, 0x65, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x65, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2b, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x28,
	0x00, 0x52, 0x02, 0x69, 0x64, 0x22, 0xce, 0x0e, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x73, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x33, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x73, 0x70, 0x2e, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x57, 0x0a, 0x12, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x73, 0x70, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x67, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x73, 0x70, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0a,
	0x73, 0x6b, 0x75, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x73, 0x70, 0x2e, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x52, 0x09, 0x73, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x4e, 0x0a,
	0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x73, 0x70, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x73, 0x12, 0x64, 0x0a,
	0x17, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x72, 0x65,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x73, 0x70, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46,
	0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x73, 0x70, 0x2e, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x1a, 0x83, 0x02,
	0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x62,
	0x75, 0x6d, 0x5f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x6c, 0x62, 0x75, 0x6d, 0x50, 0x69, 0x63, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x63, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x65,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x73, 0x1a, 0x52, 0x0a, 0x05, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x1a, 0x91, 0x03, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x41, 0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x68, 0x61,
	0x6e, 0x64, 0x41, 0x64, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x8e, 0x01, 0x0a, 0x15,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xa4, 0x02, 0x0a,
	0x08, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6b, 0x75,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6b, 0x75,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x70, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x1a, 0x0f, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x61,
	0x64, 0x64, 0x65, 0x72, 0x1a, 0x16, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46,
	0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x08, 0x0a, 0x06,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x32, 0xbe, 0x02, 0x0a, 0x10, 0x50, 0x6f, 0x72, 0x74, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x70, 0x69, 0x12, 0x5a, 0x0a, 0x0d, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x17, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x73, 0x70, 0x22, 0x17,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x6d, 0x0a, 0x10, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x54, 0x72, 0x65, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x65, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x65, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x73, 0x70, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x72,
	0x65, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x17, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x1a, 0x17, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x73, 0x70, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x16, 0x12, 0x14, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x3b, 0x6d, 0x61, 0x6c,
	0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_portal_product_proto_rawDescOnce sync.Once
	file_portal_product_proto_rawDescData = file_portal_product_proto_rawDesc
)

func file_portal_product_proto_rawDescGZIP() []byte {
	file_portal_product_proto_rawDescOnce.Do(func() {
		file_portal_product_proto_rawDescData = protoimpl.X.CompressGZIP(file_portal_product_proto_rawDescData)
	})
	return file_portal_product_proto_rawDescData
}

var file_portal_product_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_portal_product_proto_goTypes = []interface{}{
	(*SearchProductReq)(nil),                       // 0: admin.SearchProductReq
	(*SearchProductRsp)(nil),                       // 1: admin.SearchProductRsp
	(*CategoryTreeItem)(nil),                       // 2: admin.CategoryTreeItem
	(*CategoryTreeListReq)(nil),                    // 3: admin.CategoryTreeListReq
	(*CategoryTreeListRsp)(nil),                    // 4: admin.CategoryTreeListRsp
	(*ProductDetailReq)(nil),                       // 5: admin.ProductDetailReq
	(*ProductDetailRsp)(nil),                       // 6: admin.ProductDetailRsp
	(*SearchProductRsp_Product)(nil),               // 7: admin.SearchProductRsp.Product
	(*ProductDetailRsp_Product)(nil),               // 8: admin.ProductDetailRsp.Product
	(*ProductDetailRsp_Brand)(nil),                 // 9: admin.ProductDetailRsp.Brand
	(*ProductDetailRsp_ProductAttribute)(nil),      // 10: admin.ProductDetailRsp.ProductAttribute
	(*ProductDetailRsp_ProductAttributeValue)(nil), // 11: admin.ProductDetailRsp.ProductAttributeValue
	(*ProductDetailRsp_SkuStock)(nil),              // 12: admin.ProductDetailRsp.SkuStock
	(*ProductDetailRsp_ProductLadder)(nil),         // 13: admin.ProductDetailRsp.ProductLadder
	(*ProductDetailRsp_ProductFullReduction)(nil),  // 14: admin.ProductDetailRsp.ProductFullReduction
	(*ProductDetailRsp_Coupon)(nil),                // 15: admin.ProductDetailRsp.Coupon
	(*wrapperspb.UInt64Value)(nil),                 // 16: google.protobuf.UInt64Value
}
var file_portal_product_proto_depIdxs = []int32{
	16, // 0: admin.SearchProductReq.brandId:type_name -> google.protobuf.UInt64Value
	16, // 1: admin.SearchProductReq.productCategoryId:type_name -> google.protobuf.UInt64Value
	7,  // 2: admin.SearchProductRsp.data:type_name -> admin.SearchProductRsp.Product
	2,  // 3: admin.CategoryTreeListRsp.data:type_name -> admin.CategoryTreeItem
	8,  // 4: admin.ProductDetailRsp.product:type_name -> admin.ProductDetailRsp.Product
	9,  // 5: admin.ProductDetailRsp.brand:type_name -> admin.ProductDetailRsp.Brand
	10, // 6: admin.ProductDetailRsp.product_attributes:type_name -> admin.ProductDetailRsp.ProductAttribute
	11, // 7: admin.ProductDetailRsp.product_attribute_values:type_name -> admin.ProductDetailRsp.ProductAttributeValue
	12, // 8: admin.ProductDetailRsp.sku_stocks:type_name -> admin.ProductDetailRsp.SkuStock
	13, // 9: admin.ProductDetailRsp.product_ladders:type_name -> admin.ProductDetailRsp.ProductLadder
	14, // 10: admin.ProductDetailRsp.product_full_reductions:type_name -> admin.ProductDetailRsp.ProductFullReduction
	15, // 11: admin.ProductDetailRsp.coupons:type_name -> admin.ProductDetailRsp.Coupon
	0,  // 12: admin.PortalProductApi.SearchProduct:input_type -> admin.SearchProductReq
	3,  // 13: admin.PortalProductApi.CategoryTreeList:input_type -> admin.CategoryTreeListReq
	5,  // 14: admin.PortalProductApi.ProductDetail:input_type -> admin.ProductDetailReq
	1,  // 15: admin.PortalProductApi.SearchProduct:output_type -> admin.SearchProductRsp
	4,  // 16: admin.PortalProductApi.CategoryTreeList:output_type -> admin.CategoryTreeListRsp
	6,  // 17: admin.PortalProductApi.ProductDetail:output_type -> admin.ProductDetailRsp
	15, // [15:18] is the sub-list for method output_type
	12, // [12:15] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_portal_product_proto_init() }
func file_portal_product_proto_init() {
	if File_portal_product_proto != nil {
		return
	}
	file_portal_portal_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_portal_product_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchProductReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_portal_product_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchProductRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_portal_product_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryTreeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_portal_product_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryTreeListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_portal_product_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryTreeListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_portal_product_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductDetailReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_portal_product_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductDetailRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_portal_product_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchProductRsp_Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_portal_product_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductDetailRsp_Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_portal_product_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductDetailRsp_Brand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_portal_product_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductDetailRsp_ProductAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_portal_product_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductDetailRsp_ProductAttributeValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_portal_product_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductDetailRsp_SkuStock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_portal_product_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductDetailRsp_ProductLadder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_portal_product_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductDetailRsp_ProductFullReduction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_portal_product_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductDetailRsp_Coupon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_portal_product_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_portal_product_proto_goTypes,
		DependencyIndexes: file_portal_product_proto_depIdxs,
		MessageInfos:      file_portal_product_proto_msgTypes,
	}.Build()
	File_portal_product_proto = out.File
	file_portal_product_proto_rawDesc = nil
	file_portal_product_proto_goTypes = nil
	file_portal_product_proto_depIdxs = nil
}
