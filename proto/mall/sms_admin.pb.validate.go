// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: admin/sms_admin.proto

package mall

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddOrUpdateHomeAdvertiseParam with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOrUpdateHomeAdvertiseParam) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrUpdateHomeAdvertiseParam with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddOrUpdateHomeAdvertiseParamMultiError, or nil if none found.
func (m *AddOrUpdateHomeAdvertiseParam) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrUpdateHomeAdvertiseParam) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Pic

	// no validation rules for Url

	// no validation rules for Sort

	// no validation rules for Note

	// no validation rules for Type

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for Status

	// no validation rules for ClickCount

	// no validation rules for OrderCount

	if len(errors) > 0 {
		return AddOrUpdateHomeAdvertiseParamMultiError(errors)
	}

	return nil
}

// AddOrUpdateHomeAdvertiseParamMultiError is an error wrapping multiple
// validation errors returned by AddOrUpdateHomeAdvertiseParam.ValidateAll()
// if the designated constraints aren't met.
type AddOrUpdateHomeAdvertiseParamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrUpdateHomeAdvertiseParamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrUpdateHomeAdvertiseParamMultiError) AllErrors() []error { return m }

// AddOrUpdateHomeAdvertiseParamValidationError is the validation error
// returned by AddOrUpdateHomeAdvertiseParam.Validate if the designated
// constraints aren't met.
type AddOrUpdateHomeAdvertiseParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrUpdateHomeAdvertiseParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrUpdateHomeAdvertiseParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrUpdateHomeAdvertiseParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrUpdateHomeAdvertiseParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrUpdateHomeAdvertiseParamValidationError) ErrorName() string {
	return "AddOrUpdateHomeAdvertiseParamValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrUpdateHomeAdvertiseParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrUpdateHomeAdvertiseParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrUpdateHomeAdvertiseParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrUpdateHomeAdvertiseParamValidationError{}

// Validate checks the field values on GetHomeAdvertisesParam with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetHomeAdvertisesParam) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHomeAdvertisesParam with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetHomeAdvertisesParamMultiError, or nil if none found.
func (m *GetHomeAdvertisesParam) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHomeAdvertisesParam) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageNum() < 0 {
		err := GetHomeAdvertisesParamValidationError{
			field:  "PageNum",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() < 0 {
		err := GetHomeAdvertisesParamValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetHomeAdvertisesParamMultiError(errors)
	}

	return nil
}

// GetHomeAdvertisesParamMultiError is an error wrapping multiple validation
// errors returned by GetHomeAdvertisesParam.ValidateAll() if the designated
// constraints aren't met.
type GetHomeAdvertisesParamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHomeAdvertisesParamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHomeAdvertisesParamMultiError) AllErrors() []error { return m }

// GetHomeAdvertisesParamValidationError is the validation error returned by
// GetHomeAdvertisesParam.Validate if the designated constraints aren't met.
type GetHomeAdvertisesParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHomeAdvertisesParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHomeAdvertisesParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHomeAdvertisesParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHomeAdvertisesParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHomeAdvertisesParamValidationError) ErrorName() string {
	return "GetHomeAdvertisesParamValidationError"
}

// Error satisfies the builtin error interface
func (e GetHomeAdvertisesParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHomeAdvertisesParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHomeAdvertisesParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHomeAdvertisesParamValidationError{}

// Validate checks the field values on HomeAdvertisesData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HomeAdvertisesData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HomeAdvertisesData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HomeAdvertisesDataMultiError, or nil if none found.
func (m *HomeAdvertisesData) ValidateAll() error {
	return m.validate(true)
}

func (m *HomeAdvertisesData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HomeAdvertisesDataValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HomeAdvertisesDataValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HomeAdvertisesDataValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageTotal

	// no validation rules for PageSize

	// no validation rules for PageNum

	if len(errors) > 0 {
		return HomeAdvertisesDataMultiError(errors)
	}

	return nil
}

// HomeAdvertisesDataMultiError is an error wrapping multiple validation errors
// returned by HomeAdvertisesData.ValidateAll() if the designated constraints
// aren't met.
type HomeAdvertisesDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HomeAdvertisesDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HomeAdvertisesDataMultiError) AllErrors() []error { return m }

// HomeAdvertisesDataValidationError is the validation error returned by
// HomeAdvertisesData.Validate if the designated constraints aren't met.
type HomeAdvertisesDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HomeAdvertisesDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HomeAdvertisesDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HomeAdvertisesDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HomeAdvertisesDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HomeAdvertisesDataValidationError) ErrorName() string {
	return "HomeAdvertisesDataValidationError"
}

// Error satisfies the builtin error interface
func (e HomeAdvertisesDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHomeAdvertisesData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HomeAdvertisesDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HomeAdvertisesDataValidationError{}

// Validate checks the field values on GetHomeAdvertisesRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetHomeAdvertisesRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHomeAdvertisesRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetHomeAdvertisesRspMultiError, or nil if none found.
func (m *GetHomeAdvertisesRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHomeAdvertisesRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetHomeAdvertisesRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetHomeAdvertisesRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetHomeAdvertisesRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetHomeAdvertisesRspMultiError(errors)
	}

	return nil
}

// GetHomeAdvertisesRspMultiError is an error wrapping multiple validation
// errors returned by GetHomeAdvertisesRsp.ValidateAll() if the designated
// constraints aren't met.
type GetHomeAdvertisesRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHomeAdvertisesRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHomeAdvertisesRspMultiError) AllErrors() []error { return m }

// GetHomeAdvertisesRspValidationError is the validation error returned by
// GetHomeAdvertisesRsp.Validate if the designated constraints aren't met.
type GetHomeAdvertisesRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHomeAdvertisesRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHomeAdvertisesRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHomeAdvertisesRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHomeAdvertisesRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHomeAdvertisesRspValidationError) ErrorName() string {
	return "GetHomeAdvertisesRspValidationError"
}

// Error satisfies the builtin error interface
func (e GetHomeAdvertisesRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHomeAdvertisesRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHomeAdvertisesRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHomeAdvertisesRspValidationError{}

// Validate checks the field values on GetHomeAdvertiseReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetHomeAdvertiseReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHomeAdvertiseReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetHomeAdvertiseReqMultiError, or nil if none found.
func (m *GetHomeAdvertiseReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHomeAdvertiseReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetHomeAdvertiseReqMultiError(errors)
	}

	return nil
}

// GetHomeAdvertiseReqMultiError is an error wrapping multiple validation
// errors returned by GetHomeAdvertiseReq.ValidateAll() if the designated
// constraints aren't met.
type GetHomeAdvertiseReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHomeAdvertiseReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHomeAdvertiseReqMultiError) AllErrors() []error { return m }

// GetHomeAdvertiseReqValidationError is the validation error returned by
// GetHomeAdvertiseReq.Validate if the designated constraints aren't met.
type GetHomeAdvertiseReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHomeAdvertiseReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHomeAdvertiseReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHomeAdvertiseReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHomeAdvertiseReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHomeAdvertiseReqValidationError) ErrorName() string {
	return "GetHomeAdvertiseReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetHomeAdvertiseReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHomeAdvertiseReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHomeAdvertiseReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHomeAdvertiseReqValidationError{}

// Validate checks the field values on GetHomeAdvertiseRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetHomeAdvertiseRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHomeAdvertiseRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetHomeAdvertiseRspMultiError, or nil if none found.
func (m *GetHomeAdvertiseRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHomeAdvertiseRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetHomeAdvertiseRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetHomeAdvertiseRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetHomeAdvertiseRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetHomeAdvertiseRspMultiError(errors)
	}

	return nil
}

// GetHomeAdvertiseRspMultiError is an error wrapping multiple validation
// errors returned by GetHomeAdvertiseRsp.ValidateAll() if the designated
// constraints aren't met.
type GetHomeAdvertiseRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHomeAdvertiseRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHomeAdvertiseRspMultiError) AllErrors() []error { return m }

// GetHomeAdvertiseRspValidationError is the validation error returned by
// GetHomeAdvertiseRsp.Validate if the designated constraints aren't met.
type GetHomeAdvertiseRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHomeAdvertiseRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHomeAdvertiseRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHomeAdvertiseRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHomeAdvertiseRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHomeAdvertiseRspValidationError) ErrorName() string {
	return "GetHomeAdvertiseRspValidationError"
}

// Error satisfies the builtin error interface
func (e GetHomeAdvertiseRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHomeAdvertiseRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHomeAdvertiseRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHomeAdvertiseRspValidationError{}

// Validate checks the field values on DeleteHomeAdvertiseReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteHomeAdvertiseReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteHomeAdvertiseReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteHomeAdvertiseReqMultiError, or nil if none found.
func (m *DeleteHomeAdvertiseReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteHomeAdvertiseReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteHomeAdvertiseReqMultiError(errors)
	}

	return nil
}

// DeleteHomeAdvertiseReqMultiError is an error wrapping multiple validation
// errors returned by DeleteHomeAdvertiseReq.ValidateAll() if the designated
// constraints aren't met.
type DeleteHomeAdvertiseReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteHomeAdvertiseReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteHomeAdvertiseReqMultiError) AllErrors() []error { return m }

// DeleteHomeAdvertiseReqValidationError is the validation error returned by
// DeleteHomeAdvertiseReq.Validate if the designated constraints aren't met.
type DeleteHomeAdvertiseReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteHomeAdvertiseReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteHomeAdvertiseReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteHomeAdvertiseReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteHomeAdvertiseReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteHomeAdvertiseReqValidationError) ErrorName() string {
	return "DeleteHomeAdvertiseReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteHomeAdvertiseReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteHomeAdvertiseReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteHomeAdvertiseReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteHomeAdvertiseReqValidationError{}
