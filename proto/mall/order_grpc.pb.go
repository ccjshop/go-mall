// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: portal/order.proto

package mall

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PortalOrderApi_GenerateConfirmOrder_FullMethodName = "/admin.PortalOrderApi/GenerateConfirmOrder"
	PortalOrderApi_GenerateOrder_FullMethodName        = "/admin.PortalOrderApi/GenerateOrder"
	PortalOrderApi_PaySuccess_FullMethodName           = "/admin.PortalOrderApi/PaySuccess"
	PortalOrderApi_CancelTimeOutOrder_FullMethodName   = "/admin.PortalOrderApi/CancelTimeOutOrder"
	PortalOrderApi_CancelOrder_FullMethodName          = "/admin.PortalOrderApi/CancelOrder"
	PortalOrderApi_OrderList_FullMethodName            = "/admin.PortalOrderApi/OrderList"
	PortalOrderApi_OrderDetail_FullMethodName          = "/admin.PortalOrderApi/OrderDetail"
	PortalOrderApi_CancelUserOrder_FullMethodName      = "/admin.PortalOrderApi/CancelUserOrder"
	PortalOrderApi_ConfirmReceiveOrder_FullMethodName  = "/admin.PortalOrderApi/ConfirmReceiveOrder"
	PortalOrderApi_DeleteOrder_FullMethodName          = "/admin.PortalOrderApi/DeleteOrder"
)

// PortalOrderApiClient is the client API for PortalOrderApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortalOrderApiClient interface {
	// 根据购物车信息生成确认单
	GenerateConfirmOrder(ctx context.Context, in *GenerateConfirmOrderReq, opts ...grpc.CallOption) (*GenerateConfirmOrderRsp, error)
	// 根据购物车信息生成订单
	GenerateOrder(ctx context.Context, in *GenerateOrderReq, opts ...grpc.CallOption) (*GenerateOrderRsp, error)
	// 用户支付成功的回调
	PaySuccess(ctx context.Context, in *PaySuccessReq, opts ...grpc.CallOption) (*PaySuccessRsp, error)
	// 自动取消超时订单
	CancelTimeOutOrder(ctx context.Context, in *CancelTimeOutOrderReq, opts ...grpc.CallOption) (*CancelTimeOutOrderRsp, error)
	// 取消单个超时订单
	CancelOrder(ctx context.Context, in *CancelOrderReq, opts ...grpc.CallOption) (*CancelOrderRsp, error)
	// 按状态分页获取用户订单列表
	OrderList(ctx context.Context, in *OrderListReq, opts ...grpc.CallOption) (*OrderListRsp, error)
	// 根据ID获取订单详情
	OrderDetail(ctx context.Context, in *OrderDetailReq, opts ...grpc.CallOption) (*OrderDetailRsp, error)
	// 用户取消订单
	CancelUserOrder(ctx context.Context, in *CancelUserOrderReq, opts ...grpc.CallOption) (*CancelUserOrderRsp, error)
	// 用户确认收货
	ConfirmReceiveOrder(ctx context.Context, in *ConfirmReceiveOrderReq, opts ...grpc.CallOption) (*ConfirmReceiveOrderRsp, error)
	// 用户删除订单
	DeleteOrder(ctx context.Context, in *PortalDeleteOrderReq, opts ...grpc.CallOption) (*PortalDeleteOrderRsp, error)
}

type portalOrderApiClient struct {
	cc grpc.ClientConnInterface
}

func NewPortalOrderApiClient(cc grpc.ClientConnInterface) PortalOrderApiClient {
	return &portalOrderApiClient{cc}
}

func (c *portalOrderApiClient) GenerateConfirmOrder(ctx context.Context, in *GenerateConfirmOrderReq, opts ...grpc.CallOption) (*GenerateConfirmOrderRsp, error) {
	out := new(GenerateConfirmOrderRsp)
	err := c.cc.Invoke(ctx, PortalOrderApi_GenerateConfirmOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalOrderApiClient) GenerateOrder(ctx context.Context, in *GenerateOrderReq, opts ...grpc.CallOption) (*GenerateOrderRsp, error) {
	out := new(GenerateOrderRsp)
	err := c.cc.Invoke(ctx, PortalOrderApi_GenerateOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalOrderApiClient) PaySuccess(ctx context.Context, in *PaySuccessReq, opts ...grpc.CallOption) (*PaySuccessRsp, error) {
	out := new(PaySuccessRsp)
	err := c.cc.Invoke(ctx, PortalOrderApi_PaySuccess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalOrderApiClient) CancelTimeOutOrder(ctx context.Context, in *CancelTimeOutOrderReq, opts ...grpc.CallOption) (*CancelTimeOutOrderRsp, error) {
	out := new(CancelTimeOutOrderRsp)
	err := c.cc.Invoke(ctx, PortalOrderApi_CancelTimeOutOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalOrderApiClient) CancelOrder(ctx context.Context, in *CancelOrderReq, opts ...grpc.CallOption) (*CancelOrderRsp, error) {
	out := new(CancelOrderRsp)
	err := c.cc.Invoke(ctx, PortalOrderApi_CancelOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalOrderApiClient) OrderList(ctx context.Context, in *OrderListReq, opts ...grpc.CallOption) (*OrderListRsp, error) {
	out := new(OrderListRsp)
	err := c.cc.Invoke(ctx, PortalOrderApi_OrderList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalOrderApiClient) OrderDetail(ctx context.Context, in *OrderDetailReq, opts ...grpc.CallOption) (*OrderDetailRsp, error) {
	out := new(OrderDetailRsp)
	err := c.cc.Invoke(ctx, PortalOrderApi_OrderDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalOrderApiClient) CancelUserOrder(ctx context.Context, in *CancelUserOrderReq, opts ...grpc.CallOption) (*CancelUserOrderRsp, error) {
	out := new(CancelUserOrderRsp)
	err := c.cc.Invoke(ctx, PortalOrderApi_CancelUserOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalOrderApiClient) ConfirmReceiveOrder(ctx context.Context, in *ConfirmReceiveOrderReq, opts ...grpc.CallOption) (*ConfirmReceiveOrderRsp, error) {
	out := new(ConfirmReceiveOrderRsp)
	err := c.cc.Invoke(ctx, PortalOrderApi_ConfirmReceiveOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalOrderApiClient) DeleteOrder(ctx context.Context, in *PortalDeleteOrderReq, opts ...grpc.CallOption) (*PortalDeleteOrderRsp, error) {
	out := new(PortalDeleteOrderRsp)
	err := c.cc.Invoke(ctx, PortalOrderApi_DeleteOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortalOrderApiServer is the server API for PortalOrderApi service.
// All implementations must embed UnimplementedPortalOrderApiServer
// for forward compatibility
type PortalOrderApiServer interface {
	// 根据购物车信息生成确认单
	GenerateConfirmOrder(context.Context, *GenerateConfirmOrderReq) (*GenerateConfirmOrderRsp, error)
	// 根据购物车信息生成订单
	GenerateOrder(context.Context, *GenerateOrderReq) (*GenerateOrderRsp, error)
	// 用户支付成功的回调
	PaySuccess(context.Context, *PaySuccessReq) (*PaySuccessRsp, error)
	// 自动取消超时订单
	CancelTimeOutOrder(context.Context, *CancelTimeOutOrderReq) (*CancelTimeOutOrderRsp, error)
	// 取消单个超时订单
	CancelOrder(context.Context, *CancelOrderReq) (*CancelOrderRsp, error)
	// 按状态分页获取用户订单列表
	OrderList(context.Context, *OrderListReq) (*OrderListRsp, error)
	// 根据ID获取订单详情
	OrderDetail(context.Context, *OrderDetailReq) (*OrderDetailRsp, error)
	// 用户取消订单
	CancelUserOrder(context.Context, *CancelUserOrderReq) (*CancelUserOrderRsp, error)
	// 用户确认收货
	ConfirmReceiveOrder(context.Context, *ConfirmReceiveOrderReq) (*ConfirmReceiveOrderRsp, error)
	// 用户删除订单
	DeleteOrder(context.Context, *PortalDeleteOrderReq) (*PortalDeleteOrderRsp, error)
	mustEmbedUnimplementedPortalOrderApiServer()
}

// UnimplementedPortalOrderApiServer must be embedded to have forward compatible implementations.
type UnimplementedPortalOrderApiServer struct {
}

func (UnimplementedPortalOrderApiServer) GenerateConfirmOrder(context.Context, *GenerateConfirmOrderReq) (*GenerateConfirmOrderRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateConfirmOrder not implemented")
}
func (UnimplementedPortalOrderApiServer) GenerateOrder(context.Context, *GenerateOrderReq) (*GenerateOrderRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateOrder not implemented")
}
func (UnimplementedPortalOrderApiServer) PaySuccess(context.Context, *PaySuccessReq) (*PaySuccessRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaySuccess not implemented")
}
func (UnimplementedPortalOrderApiServer) CancelTimeOutOrder(context.Context, *CancelTimeOutOrderReq) (*CancelTimeOutOrderRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTimeOutOrder not implemented")
}
func (UnimplementedPortalOrderApiServer) CancelOrder(context.Context, *CancelOrderReq) (*CancelOrderRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedPortalOrderApiServer) OrderList(context.Context, *OrderListReq) (*OrderListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderList not implemented")
}
func (UnimplementedPortalOrderApiServer) OrderDetail(context.Context, *OrderDetailReq) (*OrderDetailRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderDetail not implemented")
}
func (UnimplementedPortalOrderApiServer) CancelUserOrder(context.Context, *CancelUserOrderReq) (*CancelUserOrderRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelUserOrder not implemented")
}
func (UnimplementedPortalOrderApiServer) ConfirmReceiveOrder(context.Context, *ConfirmReceiveOrderReq) (*ConfirmReceiveOrderRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmReceiveOrder not implemented")
}
func (UnimplementedPortalOrderApiServer) DeleteOrder(context.Context, *PortalDeleteOrderReq) (*PortalDeleteOrderRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrder not implemented")
}
func (UnimplementedPortalOrderApiServer) mustEmbedUnimplementedPortalOrderApiServer() {}

// UnsafePortalOrderApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortalOrderApiServer will
// result in compilation errors.
type UnsafePortalOrderApiServer interface {
	mustEmbedUnimplementedPortalOrderApiServer()
}

func RegisterPortalOrderApiServer(s grpc.ServiceRegistrar, srv PortalOrderApiServer) {
	s.RegisterService(&PortalOrderApi_ServiceDesc, srv)
}

func _PortalOrderApi_GenerateConfirmOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateConfirmOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalOrderApiServer).GenerateConfirmOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalOrderApi_GenerateConfirmOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalOrderApiServer).GenerateConfirmOrder(ctx, req.(*GenerateConfirmOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalOrderApi_GenerateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalOrderApiServer).GenerateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalOrderApi_GenerateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalOrderApiServer).GenerateOrder(ctx, req.(*GenerateOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalOrderApi_PaySuccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaySuccessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalOrderApiServer).PaySuccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalOrderApi_PaySuccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalOrderApiServer).PaySuccess(ctx, req.(*PaySuccessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalOrderApi_CancelTimeOutOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTimeOutOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalOrderApiServer).CancelTimeOutOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalOrderApi_CancelTimeOutOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalOrderApiServer).CancelTimeOutOrder(ctx, req.(*CancelTimeOutOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalOrderApi_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalOrderApiServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalOrderApi_CancelOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalOrderApiServer).CancelOrder(ctx, req.(*CancelOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalOrderApi_OrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalOrderApiServer).OrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalOrderApi_OrderList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalOrderApiServer).OrderList(ctx, req.(*OrderListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalOrderApi_OrderDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalOrderApiServer).OrderDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalOrderApi_OrderDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalOrderApiServer).OrderDetail(ctx, req.(*OrderDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalOrderApi_CancelUserOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelUserOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalOrderApiServer).CancelUserOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalOrderApi_CancelUserOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalOrderApiServer).CancelUserOrder(ctx, req.(*CancelUserOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalOrderApi_ConfirmReceiveOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmReceiveOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalOrderApiServer).ConfirmReceiveOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalOrderApi_ConfirmReceiveOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalOrderApiServer).ConfirmReceiveOrder(ctx, req.(*ConfirmReceiveOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalOrderApi_DeleteOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortalDeleteOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalOrderApiServer).DeleteOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalOrderApi_DeleteOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalOrderApiServer).DeleteOrder(ctx, req.(*PortalDeleteOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PortalOrderApi_ServiceDesc is the grpc.ServiceDesc for PortalOrderApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortalOrderApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.PortalOrderApi",
	HandlerType: (*PortalOrderApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateConfirmOrder",
			Handler:    _PortalOrderApi_GenerateConfirmOrder_Handler,
		},
		{
			MethodName: "GenerateOrder",
			Handler:    _PortalOrderApi_GenerateOrder_Handler,
		},
		{
			MethodName: "PaySuccess",
			Handler:    _PortalOrderApi_PaySuccess_Handler,
		},
		{
			MethodName: "CancelTimeOutOrder",
			Handler:    _PortalOrderApi_CancelTimeOutOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _PortalOrderApi_CancelOrder_Handler,
		},
		{
			MethodName: "OrderList",
			Handler:    _PortalOrderApi_OrderList_Handler,
		},
		{
			MethodName: "OrderDetail",
			Handler:    _PortalOrderApi_OrderDetail_Handler,
		},
		{
			MethodName: "CancelUserOrder",
			Handler:    _PortalOrderApi_CancelUserOrder_Handler,
		},
		{
			MethodName: "ConfirmReceiveOrder",
			Handler:    _PortalOrderApi_ConfirmReceiveOrder_Handler,
		},
		{
			MethodName: "DeleteOrder",
			Handler:    _PortalOrderApi_DeleteOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "portal/order.proto",
}
