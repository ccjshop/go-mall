// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: admin/cms_admin.proto

package mall

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CmsAdminApi_CreateProductCategory_FullMethodName            = "/admin.CmsAdminApi/CreateProductCategory"
	CmsAdminApi_UpdateProductCategory_FullMethodName            = "/admin.CmsAdminApi/UpdateProductCategory"
	CmsAdminApi_GetProductCategories_FullMethodName             = "/admin.CmsAdminApi/GetProductCategories"
	CmsAdminApi_GetProductCategory_FullMethodName               = "/admin.CmsAdminApi/GetProductCategory"
	CmsAdminApi_DeleteProductCategory_FullMethodName            = "/admin.CmsAdminApi/DeleteProductCategory"
	CmsAdminApi_GetProductCategoriesWithChildren_FullMethodName = "/admin.CmsAdminApi/GetProductCategoriesWithChildren"
	CmsAdminApi_CreateBrand_FullMethodName                      = "/admin.CmsAdminApi/CreateBrand"
	CmsAdminApi_UpdateBrand_FullMethodName                      = "/admin.CmsAdminApi/UpdateBrand"
	CmsAdminApi_GetBrands_FullMethodName                        = "/admin.CmsAdminApi/GetBrands"
	CmsAdminApi_GetBrand_FullMethodName                         = "/admin.CmsAdminApi/GetBrand"
	CmsAdminApi_DeleteBrand_FullMethodName                      = "/admin.CmsAdminApi/DeleteBrand"
	CmsAdminApi_CreateProductAttributeCategory_FullMethodName   = "/admin.CmsAdminApi/CreateProductAttributeCategory"
	CmsAdminApi_UpdateProductAttributeCategory_FullMethodName   = "/admin.CmsAdminApi/UpdateProductAttributeCategory"
	CmsAdminApi_GetProductAttributeCategories_FullMethodName    = "/admin.CmsAdminApi/GetProductAttributeCategories"
	CmsAdminApi_GetProductAttributeCategory_FullMethodName      = "/admin.CmsAdminApi/GetProductAttributeCategory"
	CmsAdminApi_DeleteProductAttributeCategory_FullMethodName   = "/admin.CmsAdminApi/DeleteProductAttributeCategory"
	CmsAdminApi_CreateProductAttribute_FullMethodName           = "/admin.CmsAdminApi/CreateProductAttribute"
	CmsAdminApi_UpdateProductAttribute_FullMethodName           = "/admin.CmsAdminApi/UpdateProductAttribute"
	CmsAdminApi_GetProductAttributes_FullMethodName             = "/admin.CmsAdminApi/GetProductAttributes"
	CmsAdminApi_GetProductAttribute_FullMethodName              = "/admin.CmsAdminApi/GetProductAttribute"
	CmsAdminApi_DeleteProductAttribute_FullMethodName           = "/admin.CmsAdminApi/DeleteProductAttribute"
	CmsAdminApi_CreateProduct_FullMethodName                    = "/admin.CmsAdminApi/CreateProduct"
	CmsAdminApi_UpdateProduct_FullMethodName                    = "/admin.CmsAdminApi/UpdateProduct"
	CmsAdminApi_GetProducts_FullMethodName                      = "/admin.CmsAdminApi/GetProducts"
	CmsAdminApi_GetProduct_FullMethodName                       = "/admin.CmsAdminApi/GetProduct"
	CmsAdminApi_DeleteProduct_FullMethodName                    = "/admin.CmsAdminApi/DeleteProduct"
	CmsAdminApi_BatchUpdateSkuStock_FullMethodName              = "/admin.CmsAdminApi/BatchUpdateSkuStock"
	CmsAdminApi_GetSkuStocksByProductId_FullMethodName          = "/admin.CmsAdminApi/GetSkuStocksByProductId"
	CmsAdminApi_CreateSubject_FullMethodName                    = "/admin.CmsAdminApi/CreateSubject"
	CmsAdminApi_UpdateSubject_FullMethodName                    = "/admin.CmsAdminApi/UpdateSubject"
	CmsAdminApi_GetSubjects_FullMethodName                      = "/admin.CmsAdminApi/GetSubjects"
	CmsAdminApi_GetSubject_FullMethodName                       = "/admin.CmsAdminApi/GetSubject"
	CmsAdminApi_DeleteSubject_FullMethodName                    = "/admin.CmsAdminApi/DeleteSubject"
	CmsAdminApi_CreatePrefrenceArea_FullMethodName              = "/admin.CmsAdminApi/CreatePrefrenceArea"
	CmsAdminApi_UpdatePrefrenceArea_FullMethodName              = "/admin.CmsAdminApi/UpdatePrefrenceArea"
	CmsAdminApi_GetPrefrenceAreas_FullMethodName                = "/admin.CmsAdminApi/GetPrefrenceAreas"
	CmsAdminApi_GetPrefrenceArea_FullMethodName                 = "/admin.CmsAdminApi/GetPrefrenceArea"
	CmsAdminApi_DeletePrefrenceArea_FullMethodName              = "/admin.CmsAdminApi/DeletePrefrenceArea"
	CmsAdminApi_CreateJsonDynamicConfig_FullMethodName          = "/admin.CmsAdminApi/CreateJsonDynamicConfig"
	CmsAdminApi_UpdateJsonDynamicConfig_FullMethodName          = "/admin.CmsAdminApi/UpdateJsonDynamicConfig"
	CmsAdminApi_GetJsonDynamicConfigs_FullMethodName            = "/admin.CmsAdminApi/GetJsonDynamicConfigs"
	CmsAdminApi_GetJsonDynamicConfig_FullMethodName             = "/admin.CmsAdminApi/GetJsonDynamicConfig"
	CmsAdminApi_DeleteJsonDynamicConfig_FullMethodName          = "/admin.CmsAdminApi/DeleteJsonDynamicConfig"
)

// CmsAdminApiClient is the client API for CmsAdminApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CmsAdminApiClient interface {
	// START ======================================= 分类管理 ======================================= START
	// 添加商品分类
	CreateProductCategory(ctx context.Context, in *AddOrUpdateProductCategoryParam, opts ...grpc.CallOption) (*CommonRsp, error)
	// 修改商品分类
	UpdateProductCategory(ctx context.Context, in *AddOrUpdateProductCategoryParam, opts ...grpc.CallOption) (*CommonRsp, error)
	// 分页查询商品分类
	GetProductCategories(ctx context.Context, in *GetProductCategoriesParam, opts ...grpc.CallOption) (*GetProductCategoriesRsp, error)
	// 根据id获取商品分类
	GetProductCategory(ctx context.Context, in *GetProductCategoryReq, opts ...grpc.CallOption) (*GetProductCategoryRsp, error)
	// 删除商品分类
	DeleteProductCategory(ctx context.Context, in *DeleteProductCategoryReq, opts ...grpc.CallOption) (*CommonRsp, error)
	// 查询所有一级分类及子分类
	GetProductCategoriesWithChildren(ctx context.Context, in *GetProductCategoriesWithChildrenReq, opts ...grpc.CallOption) (*GetProductCategoriesWithChildrenRsp, error)
	// START ======================================= 商品品牌 ======================================= START
	// 添加商品品牌
	CreateBrand(ctx context.Context, in *AddOrUpdateBrandParam, opts ...grpc.CallOption) (*CommonRsp, error)
	// 修改商品品牌
	UpdateBrand(ctx context.Context, in *AddOrUpdateBrandParam, opts ...grpc.CallOption) (*CommonRsp, error)
	// 分页查询商品品牌
	GetBrands(ctx context.Context, in *GetBrandsParam, opts ...grpc.CallOption) (*GetBrandsRsp, error)
	// 根据id获取商品品牌
	GetBrand(ctx context.Context, in *GetBrandReq, opts ...grpc.CallOption) (*GetBrandRsp, error)
	// 删除商品品牌
	DeleteBrand(ctx context.Context, in *DeleteBrandReq, opts ...grpc.CallOption) (*CommonRsp, error)
	// START ======================================= 产品属性分类 ======================================= START
	// 添加产品属性分类
	CreateProductAttributeCategory(ctx context.Context, in *AddOrUpdateProductAttributeCategoryParam, opts ...grpc.CallOption) (*CommonRsp, error)
	// 修改产品属性分类
	UpdateProductAttributeCategory(ctx context.Context, in *AddOrUpdateProductAttributeCategoryParam, opts ...grpc.CallOption) (*CommonRsp, error)
	// 分页查询产品属性分类
	GetProductAttributeCategories(ctx context.Context, in *GetProductAttributeCategoriesParam, opts ...grpc.CallOption) (*GetProductAttributeCategoriesRsp, error)
	// 根据id获取产品属性分类
	GetProductAttributeCategory(ctx context.Context, in *GetProductAttributeCategoryReq, opts ...grpc.CallOption) (*GetProductAttributeCategoryRsp, error)
	// 删除产品属性分类
	DeleteProductAttributeCategory(ctx context.Context, in *DeleteProductAttributeCategoryReq, opts ...grpc.CallOption) (*CommonRsp, error)
	// START ======================================= 商品属性参数 ======================================= START
	// 添加商品属性参数
	CreateProductAttribute(ctx context.Context, in *AddOrUpdateProductAttributeParam, opts ...grpc.CallOption) (*CommonRsp, error)
	// 修改商品属性参数
	UpdateProductAttribute(ctx context.Context, in *AddOrUpdateProductAttributeParam, opts ...grpc.CallOption) (*CommonRsp, error)
	// 分页查询商品属性参数
	GetProductAttributes(ctx context.Context, in *GetProductAttributesParam, opts ...grpc.CallOption) (*GetProductAttributesRsp, error)
	// 根据id获取商品属性参数
	GetProductAttribute(ctx context.Context, in *GetProductAttributeReq, opts ...grpc.CallOption) (*GetProductAttributeRsp, error)
	// 删除商品属性参数
	DeleteProductAttribute(ctx context.Context, in *DeleteProductAttributeReq, opts ...grpc.CallOption) (*CommonRsp, error)
	// START ======================================= 商品管理 ======================================= START
	// 添加商品
	CreateProduct(ctx context.Context, in *AddOrUpdateProductParam, opts ...grpc.CallOption) (*CommonRsp, error)
	// 修改商品
	UpdateProduct(ctx context.Context, in *AddOrUpdateProductParam, opts ...grpc.CallOption) (*CommonRsp, error)
	// 分页查询商品
	GetProducts(ctx context.Context, in *GetProductsParam, opts ...grpc.CallOption) (*GetProductsRsp, error)
	// 根据id获取商品
	GetProduct(ctx context.Context, in *GetProductReq, opts ...grpc.CallOption) (*GetProductRsp, error)
	// 删除商品
	DeleteProduct(ctx context.Context, in *DeleteProductReq, opts ...grpc.CallOption) (*CommonRsp, error)
	// START ======================================= sku库存 ======================================= START
	// 批量更新sku的库存
	BatchUpdateSkuStock(ctx context.Context, in *BatchUpdateSkuStockParam, opts ...grpc.CallOption) (*CommonRsp, error)
	// 分页查询sku的库存
	GetSkuStocksByProductId(ctx context.Context, in *GetSkuStocksByProductIdParam, opts ...grpc.CallOption) (*GetSkuStocksByProductIdRsp, error)
	// START ======================================= 专题 ======================================= START
	// 添加专题
	CreateSubject(ctx context.Context, in *AddOrUpdateSubjectParam, opts ...grpc.CallOption) (*CommonRsp, error)
	// 修改专题
	UpdateSubject(ctx context.Context, in *AddOrUpdateSubjectParam, opts ...grpc.CallOption) (*CommonRsp, error)
	// 分页查询专题
	GetSubjects(ctx context.Context, in *GetSubjectsParam, opts ...grpc.CallOption) (*GetSubjectsRsp, error)
	// 根据id获取专题
	GetSubject(ctx context.Context, in *GetSubjectReq, opts ...grpc.CallOption) (*GetSubjectRsp, error)
	// 删除专题
	DeleteSubject(ctx context.Context, in *DeleteSubjectReq, opts ...grpc.CallOption) (*CommonRsp, error)
	// START ======================================= 优选专区 ======================================= START
	// 添加优选专区
	CreatePrefrenceArea(ctx context.Context, in *AddOrUpdatePrefrenceAreaParam, opts ...grpc.CallOption) (*CommonRsp, error)
	// 修改优选专区
	UpdatePrefrenceArea(ctx context.Context, in *AddOrUpdatePrefrenceAreaParam, opts ...grpc.CallOption) (*CommonRsp, error)
	// 分页查询优选专区
	GetPrefrenceAreas(ctx context.Context, in *GetPrefrenceAreasParam, opts ...grpc.CallOption) (*GetPrefrenceAreasRsp, error)
	// 根据id获取优选专区
	GetPrefrenceArea(ctx context.Context, in *GetPrefrenceAreaReq, opts ...grpc.CallOption) (*GetPrefrenceAreaRsp, error)
	// 删除优选专区
	DeletePrefrenceArea(ctx context.Context, in *DeletePrefrenceAreaReq, opts ...grpc.CallOption) (*CommonRsp, error)
	// START ======================================= json配置 ======================================= START
	// 添加JSON动态配置
	CreateJsonDynamicConfig(ctx context.Context, in *AddOrUpdateJsonDynamicConfigParam, opts ...grpc.CallOption) (*CommonRsp, error)
	// 修改JSON动态配置
	UpdateJsonDynamicConfig(ctx context.Context, in *AddOrUpdateJsonDynamicConfigParam, opts ...grpc.CallOption) (*CommonRsp, error)
	// 分页查询JSON动态配置
	GetJsonDynamicConfigs(ctx context.Context, in *GetJsonDynamicConfigsParam, opts ...grpc.CallOption) (*GetJsonDynamicConfigsRsp, error)
	// 根据id获取JSON动态配置
	GetJsonDynamicConfig(ctx context.Context, in *GetJsonDynamicConfigReq, opts ...grpc.CallOption) (*GetJsonDynamicConfigRsp, error)
	// 删除JSON动态配置
	DeleteJsonDynamicConfig(ctx context.Context, in *DeleteJsonDynamicConfigReq, opts ...grpc.CallOption) (*CommonRsp, error)
}

type cmsAdminApiClient struct {
	cc grpc.ClientConnInterface
}

func NewCmsAdminApiClient(cc grpc.ClientConnInterface) CmsAdminApiClient {
	return &cmsAdminApiClient{cc}
}

func (c *cmsAdminApiClient) CreateProductCategory(ctx context.Context, in *AddOrUpdateProductCategoryParam, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_CreateProductCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) UpdateProductCategory(ctx context.Context, in *AddOrUpdateProductCategoryParam, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_UpdateProductCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) GetProductCategories(ctx context.Context, in *GetProductCategoriesParam, opts ...grpc.CallOption) (*GetProductCategoriesRsp, error) {
	out := new(GetProductCategoriesRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_GetProductCategories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) GetProductCategory(ctx context.Context, in *GetProductCategoryReq, opts ...grpc.CallOption) (*GetProductCategoryRsp, error) {
	out := new(GetProductCategoryRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_GetProductCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) DeleteProductCategory(ctx context.Context, in *DeleteProductCategoryReq, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_DeleteProductCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) GetProductCategoriesWithChildren(ctx context.Context, in *GetProductCategoriesWithChildrenReq, opts ...grpc.CallOption) (*GetProductCategoriesWithChildrenRsp, error) {
	out := new(GetProductCategoriesWithChildrenRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_GetProductCategoriesWithChildren_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) CreateBrand(ctx context.Context, in *AddOrUpdateBrandParam, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_CreateBrand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) UpdateBrand(ctx context.Context, in *AddOrUpdateBrandParam, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_UpdateBrand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) GetBrands(ctx context.Context, in *GetBrandsParam, opts ...grpc.CallOption) (*GetBrandsRsp, error) {
	out := new(GetBrandsRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_GetBrands_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) GetBrand(ctx context.Context, in *GetBrandReq, opts ...grpc.CallOption) (*GetBrandRsp, error) {
	out := new(GetBrandRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_GetBrand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) DeleteBrand(ctx context.Context, in *DeleteBrandReq, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_DeleteBrand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) CreateProductAttributeCategory(ctx context.Context, in *AddOrUpdateProductAttributeCategoryParam, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_CreateProductAttributeCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) UpdateProductAttributeCategory(ctx context.Context, in *AddOrUpdateProductAttributeCategoryParam, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_UpdateProductAttributeCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) GetProductAttributeCategories(ctx context.Context, in *GetProductAttributeCategoriesParam, opts ...grpc.CallOption) (*GetProductAttributeCategoriesRsp, error) {
	out := new(GetProductAttributeCategoriesRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_GetProductAttributeCategories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) GetProductAttributeCategory(ctx context.Context, in *GetProductAttributeCategoryReq, opts ...grpc.CallOption) (*GetProductAttributeCategoryRsp, error) {
	out := new(GetProductAttributeCategoryRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_GetProductAttributeCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) DeleteProductAttributeCategory(ctx context.Context, in *DeleteProductAttributeCategoryReq, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_DeleteProductAttributeCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) CreateProductAttribute(ctx context.Context, in *AddOrUpdateProductAttributeParam, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_CreateProductAttribute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) UpdateProductAttribute(ctx context.Context, in *AddOrUpdateProductAttributeParam, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_UpdateProductAttribute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) GetProductAttributes(ctx context.Context, in *GetProductAttributesParam, opts ...grpc.CallOption) (*GetProductAttributesRsp, error) {
	out := new(GetProductAttributesRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_GetProductAttributes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) GetProductAttribute(ctx context.Context, in *GetProductAttributeReq, opts ...grpc.CallOption) (*GetProductAttributeRsp, error) {
	out := new(GetProductAttributeRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_GetProductAttribute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) DeleteProductAttribute(ctx context.Context, in *DeleteProductAttributeReq, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_DeleteProductAttribute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) CreateProduct(ctx context.Context, in *AddOrUpdateProductParam, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_CreateProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) UpdateProduct(ctx context.Context, in *AddOrUpdateProductParam, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_UpdateProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) GetProducts(ctx context.Context, in *GetProductsParam, opts ...grpc.CallOption) (*GetProductsRsp, error) {
	out := new(GetProductsRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_GetProducts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) GetProduct(ctx context.Context, in *GetProductReq, opts ...grpc.CallOption) (*GetProductRsp, error) {
	out := new(GetProductRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_GetProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) DeleteProduct(ctx context.Context, in *DeleteProductReq, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_DeleteProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) BatchUpdateSkuStock(ctx context.Context, in *BatchUpdateSkuStockParam, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_BatchUpdateSkuStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) GetSkuStocksByProductId(ctx context.Context, in *GetSkuStocksByProductIdParam, opts ...grpc.CallOption) (*GetSkuStocksByProductIdRsp, error) {
	out := new(GetSkuStocksByProductIdRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_GetSkuStocksByProductId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) CreateSubject(ctx context.Context, in *AddOrUpdateSubjectParam, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_CreateSubject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) UpdateSubject(ctx context.Context, in *AddOrUpdateSubjectParam, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_UpdateSubject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) GetSubjects(ctx context.Context, in *GetSubjectsParam, opts ...grpc.CallOption) (*GetSubjectsRsp, error) {
	out := new(GetSubjectsRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_GetSubjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) GetSubject(ctx context.Context, in *GetSubjectReq, opts ...grpc.CallOption) (*GetSubjectRsp, error) {
	out := new(GetSubjectRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_GetSubject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) DeleteSubject(ctx context.Context, in *DeleteSubjectReq, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_DeleteSubject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) CreatePrefrenceArea(ctx context.Context, in *AddOrUpdatePrefrenceAreaParam, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_CreatePrefrenceArea_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) UpdatePrefrenceArea(ctx context.Context, in *AddOrUpdatePrefrenceAreaParam, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_UpdatePrefrenceArea_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) GetPrefrenceAreas(ctx context.Context, in *GetPrefrenceAreasParam, opts ...grpc.CallOption) (*GetPrefrenceAreasRsp, error) {
	out := new(GetPrefrenceAreasRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_GetPrefrenceAreas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) GetPrefrenceArea(ctx context.Context, in *GetPrefrenceAreaReq, opts ...grpc.CallOption) (*GetPrefrenceAreaRsp, error) {
	out := new(GetPrefrenceAreaRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_GetPrefrenceArea_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) DeletePrefrenceArea(ctx context.Context, in *DeletePrefrenceAreaReq, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_DeletePrefrenceArea_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) CreateJsonDynamicConfig(ctx context.Context, in *AddOrUpdateJsonDynamicConfigParam, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_CreateJsonDynamicConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) UpdateJsonDynamicConfig(ctx context.Context, in *AddOrUpdateJsonDynamicConfigParam, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_UpdateJsonDynamicConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) GetJsonDynamicConfigs(ctx context.Context, in *GetJsonDynamicConfigsParam, opts ...grpc.CallOption) (*GetJsonDynamicConfigsRsp, error) {
	out := new(GetJsonDynamicConfigsRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_GetJsonDynamicConfigs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) GetJsonDynamicConfig(ctx context.Context, in *GetJsonDynamicConfigReq, opts ...grpc.CallOption) (*GetJsonDynamicConfigRsp, error) {
	out := new(GetJsonDynamicConfigRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_GetJsonDynamicConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAdminApiClient) DeleteJsonDynamicConfig(ctx context.Context, in *DeleteJsonDynamicConfigReq, opts ...grpc.CallOption) (*CommonRsp, error) {
	out := new(CommonRsp)
	err := c.cc.Invoke(ctx, CmsAdminApi_DeleteJsonDynamicConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CmsAdminApiServer is the server API for CmsAdminApi service.
// All implementations must embed UnimplementedCmsAdminApiServer
// for forward compatibility
type CmsAdminApiServer interface {
	// START ======================================= 分类管理 ======================================= START
	// 添加商品分类
	CreateProductCategory(context.Context, *AddOrUpdateProductCategoryParam) (*CommonRsp, error)
	// 修改商品分类
	UpdateProductCategory(context.Context, *AddOrUpdateProductCategoryParam) (*CommonRsp, error)
	// 分页查询商品分类
	GetProductCategories(context.Context, *GetProductCategoriesParam) (*GetProductCategoriesRsp, error)
	// 根据id获取商品分类
	GetProductCategory(context.Context, *GetProductCategoryReq) (*GetProductCategoryRsp, error)
	// 删除商品分类
	DeleteProductCategory(context.Context, *DeleteProductCategoryReq) (*CommonRsp, error)
	// 查询所有一级分类及子分类
	GetProductCategoriesWithChildren(context.Context, *GetProductCategoriesWithChildrenReq) (*GetProductCategoriesWithChildrenRsp, error)
	// START ======================================= 商品品牌 ======================================= START
	// 添加商品品牌
	CreateBrand(context.Context, *AddOrUpdateBrandParam) (*CommonRsp, error)
	// 修改商品品牌
	UpdateBrand(context.Context, *AddOrUpdateBrandParam) (*CommonRsp, error)
	// 分页查询商品品牌
	GetBrands(context.Context, *GetBrandsParam) (*GetBrandsRsp, error)
	// 根据id获取商品品牌
	GetBrand(context.Context, *GetBrandReq) (*GetBrandRsp, error)
	// 删除商品品牌
	DeleteBrand(context.Context, *DeleteBrandReq) (*CommonRsp, error)
	// START ======================================= 产品属性分类 ======================================= START
	// 添加产品属性分类
	CreateProductAttributeCategory(context.Context, *AddOrUpdateProductAttributeCategoryParam) (*CommonRsp, error)
	// 修改产品属性分类
	UpdateProductAttributeCategory(context.Context, *AddOrUpdateProductAttributeCategoryParam) (*CommonRsp, error)
	// 分页查询产品属性分类
	GetProductAttributeCategories(context.Context, *GetProductAttributeCategoriesParam) (*GetProductAttributeCategoriesRsp, error)
	// 根据id获取产品属性分类
	GetProductAttributeCategory(context.Context, *GetProductAttributeCategoryReq) (*GetProductAttributeCategoryRsp, error)
	// 删除产品属性分类
	DeleteProductAttributeCategory(context.Context, *DeleteProductAttributeCategoryReq) (*CommonRsp, error)
	// START ======================================= 商品属性参数 ======================================= START
	// 添加商品属性参数
	CreateProductAttribute(context.Context, *AddOrUpdateProductAttributeParam) (*CommonRsp, error)
	// 修改商品属性参数
	UpdateProductAttribute(context.Context, *AddOrUpdateProductAttributeParam) (*CommonRsp, error)
	// 分页查询商品属性参数
	GetProductAttributes(context.Context, *GetProductAttributesParam) (*GetProductAttributesRsp, error)
	// 根据id获取商品属性参数
	GetProductAttribute(context.Context, *GetProductAttributeReq) (*GetProductAttributeRsp, error)
	// 删除商品属性参数
	DeleteProductAttribute(context.Context, *DeleteProductAttributeReq) (*CommonRsp, error)
	// START ======================================= 商品管理 ======================================= START
	// 添加商品
	CreateProduct(context.Context, *AddOrUpdateProductParam) (*CommonRsp, error)
	// 修改商品
	UpdateProduct(context.Context, *AddOrUpdateProductParam) (*CommonRsp, error)
	// 分页查询商品
	GetProducts(context.Context, *GetProductsParam) (*GetProductsRsp, error)
	// 根据id获取商品
	GetProduct(context.Context, *GetProductReq) (*GetProductRsp, error)
	// 删除商品
	DeleteProduct(context.Context, *DeleteProductReq) (*CommonRsp, error)
	// START ======================================= sku库存 ======================================= START
	// 批量更新sku的库存
	BatchUpdateSkuStock(context.Context, *BatchUpdateSkuStockParam) (*CommonRsp, error)
	// 分页查询sku的库存
	GetSkuStocksByProductId(context.Context, *GetSkuStocksByProductIdParam) (*GetSkuStocksByProductIdRsp, error)
	// START ======================================= 专题 ======================================= START
	// 添加专题
	CreateSubject(context.Context, *AddOrUpdateSubjectParam) (*CommonRsp, error)
	// 修改专题
	UpdateSubject(context.Context, *AddOrUpdateSubjectParam) (*CommonRsp, error)
	// 分页查询专题
	GetSubjects(context.Context, *GetSubjectsParam) (*GetSubjectsRsp, error)
	// 根据id获取专题
	GetSubject(context.Context, *GetSubjectReq) (*GetSubjectRsp, error)
	// 删除专题
	DeleteSubject(context.Context, *DeleteSubjectReq) (*CommonRsp, error)
	// START ======================================= 优选专区 ======================================= START
	// 添加优选专区
	CreatePrefrenceArea(context.Context, *AddOrUpdatePrefrenceAreaParam) (*CommonRsp, error)
	// 修改优选专区
	UpdatePrefrenceArea(context.Context, *AddOrUpdatePrefrenceAreaParam) (*CommonRsp, error)
	// 分页查询优选专区
	GetPrefrenceAreas(context.Context, *GetPrefrenceAreasParam) (*GetPrefrenceAreasRsp, error)
	// 根据id获取优选专区
	GetPrefrenceArea(context.Context, *GetPrefrenceAreaReq) (*GetPrefrenceAreaRsp, error)
	// 删除优选专区
	DeletePrefrenceArea(context.Context, *DeletePrefrenceAreaReq) (*CommonRsp, error)
	// START ======================================= json配置 ======================================= START
	// 添加JSON动态配置
	CreateJsonDynamicConfig(context.Context, *AddOrUpdateJsonDynamicConfigParam) (*CommonRsp, error)
	// 修改JSON动态配置
	UpdateJsonDynamicConfig(context.Context, *AddOrUpdateJsonDynamicConfigParam) (*CommonRsp, error)
	// 分页查询JSON动态配置
	GetJsonDynamicConfigs(context.Context, *GetJsonDynamicConfigsParam) (*GetJsonDynamicConfigsRsp, error)
	// 根据id获取JSON动态配置
	GetJsonDynamicConfig(context.Context, *GetJsonDynamicConfigReq) (*GetJsonDynamicConfigRsp, error)
	// 删除JSON动态配置
	DeleteJsonDynamicConfig(context.Context, *DeleteJsonDynamicConfigReq) (*CommonRsp, error)
	mustEmbedUnimplementedCmsAdminApiServer()
}

// UnimplementedCmsAdminApiServer must be embedded to have forward compatible implementations.
type UnimplementedCmsAdminApiServer struct {
}

func (UnimplementedCmsAdminApiServer) CreateProductCategory(context.Context, *AddOrUpdateProductCategoryParam) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProductCategory not implemented")
}
func (UnimplementedCmsAdminApiServer) UpdateProductCategory(context.Context, *AddOrUpdateProductCategoryParam) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductCategory not implemented")
}
func (UnimplementedCmsAdminApiServer) GetProductCategories(context.Context, *GetProductCategoriesParam) (*GetProductCategoriesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductCategories not implemented")
}
func (UnimplementedCmsAdminApiServer) GetProductCategory(context.Context, *GetProductCategoryReq) (*GetProductCategoryRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductCategory not implemented")
}
func (UnimplementedCmsAdminApiServer) DeleteProductCategory(context.Context, *DeleteProductCategoryReq) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductCategory not implemented")
}
func (UnimplementedCmsAdminApiServer) GetProductCategoriesWithChildren(context.Context, *GetProductCategoriesWithChildrenReq) (*GetProductCategoriesWithChildrenRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductCategoriesWithChildren not implemented")
}
func (UnimplementedCmsAdminApiServer) CreateBrand(context.Context, *AddOrUpdateBrandParam) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBrand not implemented")
}
func (UnimplementedCmsAdminApiServer) UpdateBrand(context.Context, *AddOrUpdateBrandParam) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBrand not implemented")
}
func (UnimplementedCmsAdminApiServer) GetBrands(context.Context, *GetBrandsParam) (*GetBrandsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrands not implemented")
}
func (UnimplementedCmsAdminApiServer) GetBrand(context.Context, *GetBrandReq) (*GetBrandRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrand not implemented")
}
func (UnimplementedCmsAdminApiServer) DeleteBrand(context.Context, *DeleteBrandReq) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBrand not implemented")
}
func (UnimplementedCmsAdminApiServer) CreateProductAttributeCategory(context.Context, *AddOrUpdateProductAttributeCategoryParam) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProductAttributeCategory not implemented")
}
func (UnimplementedCmsAdminApiServer) UpdateProductAttributeCategory(context.Context, *AddOrUpdateProductAttributeCategoryParam) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductAttributeCategory not implemented")
}
func (UnimplementedCmsAdminApiServer) GetProductAttributeCategories(context.Context, *GetProductAttributeCategoriesParam) (*GetProductAttributeCategoriesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductAttributeCategories not implemented")
}
func (UnimplementedCmsAdminApiServer) GetProductAttributeCategory(context.Context, *GetProductAttributeCategoryReq) (*GetProductAttributeCategoryRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductAttributeCategory not implemented")
}
func (UnimplementedCmsAdminApiServer) DeleteProductAttributeCategory(context.Context, *DeleteProductAttributeCategoryReq) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductAttributeCategory not implemented")
}
func (UnimplementedCmsAdminApiServer) CreateProductAttribute(context.Context, *AddOrUpdateProductAttributeParam) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProductAttribute not implemented")
}
func (UnimplementedCmsAdminApiServer) UpdateProductAttribute(context.Context, *AddOrUpdateProductAttributeParam) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductAttribute not implemented")
}
func (UnimplementedCmsAdminApiServer) GetProductAttributes(context.Context, *GetProductAttributesParam) (*GetProductAttributesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductAttributes not implemented")
}
func (UnimplementedCmsAdminApiServer) GetProductAttribute(context.Context, *GetProductAttributeReq) (*GetProductAttributeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductAttribute not implemented")
}
func (UnimplementedCmsAdminApiServer) DeleteProductAttribute(context.Context, *DeleteProductAttributeReq) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductAttribute not implemented")
}
func (UnimplementedCmsAdminApiServer) CreateProduct(context.Context, *AddOrUpdateProductParam) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedCmsAdminApiServer) UpdateProduct(context.Context, *AddOrUpdateProductParam) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedCmsAdminApiServer) GetProducts(context.Context, *GetProductsParam) (*GetProductsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProducts not implemented")
}
func (UnimplementedCmsAdminApiServer) GetProduct(context.Context, *GetProductReq) (*GetProductRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedCmsAdminApiServer) DeleteProduct(context.Context, *DeleteProductReq) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedCmsAdminApiServer) BatchUpdateSkuStock(context.Context, *BatchUpdateSkuStockParam) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateSkuStock not implemented")
}
func (UnimplementedCmsAdminApiServer) GetSkuStocksByProductId(context.Context, *GetSkuStocksByProductIdParam) (*GetSkuStocksByProductIdRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSkuStocksByProductId not implemented")
}
func (UnimplementedCmsAdminApiServer) CreateSubject(context.Context, *AddOrUpdateSubjectParam) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubject not implemented")
}
func (UnimplementedCmsAdminApiServer) UpdateSubject(context.Context, *AddOrUpdateSubjectParam) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubject not implemented")
}
func (UnimplementedCmsAdminApiServer) GetSubjects(context.Context, *GetSubjectsParam) (*GetSubjectsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubjects not implemented")
}
func (UnimplementedCmsAdminApiServer) GetSubject(context.Context, *GetSubjectReq) (*GetSubjectRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubject not implemented")
}
func (UnimplementedCmsAdminApiServer) DeleteSubject(context.Context, *DeleteSubjectReq) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubject not implemented")
}
func (UnimplementedCmsAdminApiServer) CreatePrefrenceArea(context.Context, *AddOrUpdatePrefrenceAreaParam) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrefrenceArea not implemented")
}
func (UnimplementedCmsAdminApiServer) UpdatePrefrenceArea(context.Context, *AddOrUpdatePrefrenceAreaParam) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePrefrenceArea not implemented")
}
func (UnimplementedCmsAdminApiServer) GetPrefrenceAreas(context.Context, *GetPrefrenceAreasParam) (*GetPrefrenceAreasRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrefrenceAreas not implemented")
}
func (UnimplementedCmsAdminApiServer) GetPrefrenceArea(context.Context, *GetPrefrenceAreaReq) (*GetPrefrenceAreaRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrefrenceArea not implemented")
}
func (UnimplementedCmsAdminApiServer) DeletePrefrenceArea(context.Context, *DeletePrefrenceAreaReq) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePrefrenceArea not implemented")
}
func (UnimplementedCmsAdminApiServer) CreateJsonDynamicConfig(context.Context, *AddOrUpdateJsonDynamicConfigParam) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJsonDynamicConfig not implemented")
}
func (UnimplementedCmsAdminApiServer) UpdateJsonDynamicConfig(context.Context, *AddOrUpdateJsonDynamicConfigParam) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJsonDynamicConfig not implemented")
}
func (UnimplementedCmsAdminApiServer) GetJsonDynamicConfigs(context.Context, *GetJsonDynamicConfigsParam) (*GetJsonDynamicConfigsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJsonDynamicConfigs not implemented")
}
func (UnimplementedCmsAdminApiServer) GetJsonDynamicConfig(context.Context, *GetJsonDynamicConfigReq) (*GetJsonDynamicConfigRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJsonDynamicConfig not implemented")
}
func (UnimplementedCmsAdminApiServer) DeleteJsonDynamicConfig(context.Context, *DeleteJsonDynamicConfigReq) (*CommonRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJsonDynamicConfig not implemented")
}
func (UnimplementedCmsAdminApiServer) mustEmbedUnimplementedCmsAdminApiServer() {}

// UnsafeCmsAdminApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CmsAdminApiServer will
// result in compilation errors.
type UnsafeCmsAdminApiServer interface {
	mustEmbedUnimplementedCmsAdminApiServer()
}

func RegisterCmsAdminApiServer(s grpc.ServiceRegistrar, srv CmsAdminApiServer) {
	s.RegisterService(&CmsAdminApi_ServiceDesc, srv)
}

func _CmsAdminApi_CreateProductCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrUpdateProductCategoryParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).CreateProductCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_CreateProductCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).CreateProductCategory(ctx, req.(*AddOrUpdateProductCategoryParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_UpdateProductCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrUpdateProductCategoryParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).UpdateProductCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_UpdateProductCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).UpdateProductCategory(ctx, req.(*AddOrUpdateProductCategoryParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_GetProductCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductCategoriesParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).GetProductCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_GetProductCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).GetProductCategories(ctx, req.(*GetProductCategoriesParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_GetProductCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).GetProductCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_GetProductCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).GetProductCategory(ctx, req.(*GetProductCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_DeleteProductCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).DeleteProductCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_DeleteProductCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).DeleteProductCategory(ctx, req.(*DeleteProductCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_GetProductCategoriesWithChildren_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductCategoriesWithChildrenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).GetProductCategoriesWithChildren(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_GetProductCategoriesWithChildren_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).GetProductCategoriesWithChildren(ctx, req.(*GetProductCategoriesWithChildrenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_CreateBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrUpdateBrandParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).CreateBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_CreateBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).CreateBrand(ctx, req.(*AddOrUpdateBrandParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_UpdateBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrUpdateBrandParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).UpdateBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_UpdateBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).UpdateBrand(ctx, req.(*AddOrUpdateBrandParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_GetBrands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrandsParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).GetBrands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_GetBrands_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).GetBrands(ctx, req.(*GetBrandsParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_GetBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).GetBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_GetBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).GetBrand(ctx, req.(*GetBrandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_DeleteBrand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBrandReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).DeleteBrand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_DeleteBrand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).DeleteBrand(ctx, req.(*DeleteBrandReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_CreateProductAttributeCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrUpdateProductAttributeCategoryParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).CreateProductAttributeCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_CreateProductAttributeCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).CreateProductAttributeCategory(ctx, req.(*AddOrUpdateProductAttributeCategoryParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_UpdateProductAttributeCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrUpdateProductAttributeCategoryParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).UpdateProductAttributeCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_UpdateProductAttributeCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).UpdateProductAttributeCategory(ctx, req.(*AddOrUpdateProductAttributeCategoryParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_GetProductAttributeCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductAttributeCategoriesParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).GetProductAttributeCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_GetProductAttributeCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).GetProductAttributeCategories(ctx, req.(*GetProductAttributeCategoriesParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_GetProductAttributeCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductAttributeCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).GetProductAttributeCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_GetProductAttributeCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).GetProductAttributeCategory(ctx, req.(*GetProductAttributeCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_DeleteProductAttributeCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductAttributeCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).DeleteProductAttributeCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_DeleteProductAttributeCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).DeleteProductAttributeCategory(ctx, req.(*DeleteProductAttributeCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_CreateProductAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrUpdateProductAttributeParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).CreateProductAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_CreateProductAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).CreateProductAttribute(ctx, req.(*AddOrUpdateProductAttributeParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_UpdateProductAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrUpdateProductAttributeParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).UpdateProductAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_UpdateProductAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).UpdateProductAttribute(ctx, req.(*AddOrUpdateProductAttributeParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_GetProductAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductAttributesParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).GetProductAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_GetProductAttributes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).GetProductAttributes(ctx, req.(*GetProductAttributesParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_GetProductAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductAttributeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).GetProductAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_GetProductAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).GetProductAttribute(ctx, req.(*GetProductAttributeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_DeleteProductAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductAttributeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).DeleteProductAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_DeleteProductAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).DeleteProductAttribute(ctx, req.(*DeleteProductAttributeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrUpdateProductParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_CreateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).CreateProduct(ctx, req.(*AddOrUpdateProductParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrUpdateProductParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_UpdateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).UpdateProduct(ctx, req.(*AddOrUpdateProductParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_GetProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductsParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).GetProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_GetProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).GetProducts(ctx, req.(*GetProductsParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_GetProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).GetProduct(ctx, req.(*GetProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_DeleteProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).DeleteProduct(ctx, req.(*DeleteProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_BatchUpdateSkuStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateSkuStockParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).BatchUpdateSkuStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_BatchUpdateSkuStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).BatchUpdateSkuStock(ctx, req.(*BatchUpdateSkuStockParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_GetSkuStocksByProductId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSkuStocksByProductIdParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).GetSkuStocksByProductId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_GetSkuStocksByProductId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).GetSkuStocksByProductId(ctx, req.(*GetSkuStocksByProductIdParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_CreateSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrUpdateSubjectParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).CreateSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_CreateSubject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).CreateSubject(ctx, req.(*AddOrUpdateSubjectParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_UpdateSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrUpdateSubjectParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).UpdateSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_UpdateSubject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).UpdateSubject(ctx, req.(*AddOrUpdateSubjectParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_GetSubjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubjectsParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).GetSubjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_GetSubjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).GetSubjects(ctx, req.(*GetSubjectsParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_GetSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).GetSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_GetSubject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).GetSubject(ctx, req.(*GetSubjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_DeleteSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).DeleteSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_DeleteSubject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).DeleteSubject(ctx, req.(*DeleteSubjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_CreatePrefrenceArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrUpdatePrefrenceAreaParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).CreatePrefrenceArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_CreatePrefrenceArea_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).CreatePrefrenceArea(ctx, req.(*AddOrUpdatePrefrenceAreaParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_UpdatePrefrenceArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrUpdatePrefrenceAreaParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).UpdatePrefrenceArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_UpdatePrefrenceArea_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).UpdatePrefrenceArea(ctx, req.(*AddOrUpdatePrefrenceAreaParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_GetPrefrenceAreas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrefrenceAreasParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).GetPrefrenceAreas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_GetPrefrenceAreas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).GetPrefrenceAreas(ctx, req.(*GetPrefrenceAreasParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_GetPrefrenceArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrefrenceAreaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).GetPrefrenceArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_GetPrefrenceArea_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).GetPrefrenceArea(ctx, req.(*GetPrefrenceAreaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_DeletePrefrenceArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePrefrenceAreaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).DeletePrefrenceArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_DeletePrefrenceArea_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).DeletePrefrenceArea(ctx, req.(*DeletePrefrenceAreaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_CreateJsonDynamicConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrUpdateJsonDynamicConfigParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).CreateJsonDynamicConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_CreateJsonDynamicConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).CreateJsonDynamicConfig(ctx, req.(*AddOrUpdateJsonDynamicConfigParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_UpdateJsonDynamicConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrUpdateJsonDynamicConfigParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).UpdateJsonDynamicConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_UpdateJsonDynamicConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).UpdateJsonDynamicConfig(ctx, req.(*AddOrUpdateJsonDynamicConfigParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_GetJsonDynamicConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJsonDynamicConfigsParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).GetJsonDynamicConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_GetJsonDynamicConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).GetJsonDynamicConfigs(ctx, req.(*GetJsonDynamicConfigsParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_GetJsonDynamicConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJsonDynamicConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).GetJsonDynamicConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_GetJsonDynamicConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).GetJsonDynamicConfig(ctx, req.(*GetJsonDynamicConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAdminApi_DeleteJsonDynamicConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteJsonDynamicConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAdminApiServer).DeleteJsonDynamicConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CmsAdminApi_DeleteJsonDynamicConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAdminApiServer).DeleteJsonDynamicConfig(ctx, req.(*DeleteJsonDynamicConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CmsAdminApi_ServiceDesc is the grpc.ServiceDesc for CmsAdminApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CmsAdminApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.CmsAdminApi",
	HandlerType: (*CmsAdminApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProductCategory",
			Handler:    _CmsAdminApi_CreateProductCategory_Handler,
		},
		{
			MethodName: "UpdateProductCategory",
			Handler:    _CmsAdminApi_UpdateProductCategory_Handler,
		},
		{
			MethodName: "GetProductCategories",
			Handler:    _CmsAdminApi_GetProductCategories_Handler,
		},
		{
			MethodName: "GetProductCategory",
			Handler:    _CmsAdminApi_GetProductCategory_Handler,
		},
		{
			MethodName: "DeleteProductCategory",
			Handler:    _CmsAdminApi_DeleteProductCategory_Handler,
		},
		{
			MethodName: "GetProductCategoriesWithChildren",
			Handler:    _CmsAdminApi_GetProductCategoriesWithChildren_Handler,
		},
		{
			MethodName: "CreateBrand",
			Handler:    _CmsAdminApi_CreateBrand_Handler,
		},
		{
			MethodName: "UpdateBrand",
			Handler:    _CmsAdminApi_UpdateBrand_Handler,
		},
		{
			MethodName: "GetBrands",
			Handler:    _CmsAdminApi_GetBrands_Handler,
		},
		{
			MethodName: "GetBrand",
			Handler:    _CmsAdminApi_GetBrand_Handler,
		},
		{
			MethodName: "DeleteBrand",
			Handler:    _CmsAdminApi_DeleteBrand_Handler,
		},
		{
			MethodName: "CreateProductAttributeCategory",
			Handler:    _CmsAdminApi_CreateProductAttributeCategory_Handler,
		},
		{
			MethodName: "UpdateProductAttributeCategory",
			Handler:    _CmsAdminApi_UpdateProductAttributeCategory_Handler,
		},
		{
			MethodName: "GetProductAttributeCategories",
			Handler:    _CmsAdminApi_GetProductAttributeCategories_Handler,
		},
		{
			MethodName: "GetProductAttributeCategory",
			Handler:    _CmsAdminApi_GetProductAttributeCategory_Handler,
		},
		{
			MethodName: "DeleteProductAttributeCategory",
			Handler:    _CmsAdminApi_DeleteProductAttributeCategory_Handler,
		},
		{
			MethodName: "CreateProductAttribute",
			Handler:    _CmsAdminApi_CreateProductAttribute_Handler,
		},
		{
			MethodName: "UpdateProductAttribute",
			Handler:    _CmsAdminApi_UpdateProductAttribute_Handler,
		},
		{
			MethodName: "GetProductAttributes",
			Handler:    _CmsAdminApi_GetProductAttributes_Handler,
		},
		{
			MethodName: "GetProductAttribute",
			Handler:    _CmsAdminApi_GetProductAttribute_Handler,
		},
		{
			MethodName: "DeleteProductAttribute",
			Handler:    _CmsAdminApi_DeleteProductAttribute_Handler,
		},
		{
			MethodName: "CreateProduct",
			Handler:    _CmsAdminApi_CreateProduct_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _CmsAdminApi_UpdateProduct_Handler,
		},
		{
			MethodName: "GetProducts",
			Handler:    _CmsAdminApi_GetProducts_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _CmsAdminApi_GetProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _CmsAdminApi_DeleteProduct_Handler,
		},
		{
			MethodName: "BatchUpdateSkuStock",
			Handler:    _CmsAdminApi_BatchUpdateSkuStock_Handler,
		},
		{
			MethodName: "GetSkuStocksByProductId",
			Handler:    _CmsAdminApi_GetSkuStocksByProductId_Handler,
		},
		{
			MethodName: "CreateSubject",
			Handler:    _CmsAdminApi_CreateSubject_Handler,
		},
		{
			MethodName: "UpdateSubject",
			Handler:    _CmsAdminApi_UpdateSubject_Handler,
		},
		{
			MethodName: "GetSubjects",
			Handler:    _CmsAdminApi_GetSubjects_Handler,
		},
		{
			MethodName: "GetSubject",
			Handler:    _CmsAdminApi_GetSubject_Handler,
		},
		{
			MethodName: "DeleteSubject",
			Handler:    _CmsAdminApi_DeleteSubject_Handler,
		},
		{
			MethodName: "CreatePrefrenceArea",
			Handler:    _CmsAdminApi_CreatePrefrenceArea_Handler,
		},
		{
			MethodName: "UpdatePrefrenceArea",
			Handler:    _CmsAdminApi_UpdatePrefrenceArea_Handler,
		},
		{
			MethodName: "GetPrefrenceAreas",
			Handler:    _CmsAdminApi_GetPrefrenceAreas_Handler,
		},
		{
			MethodName: "GetPrefrenceArea",
			Handler:    _CmsAdminApi_GetPrefrenceArea_Handler,
		},
		{
			MethodName: "DeletePrefrenceArea",
			Handler:    _CmsAdminApi_DeletePrefrenceArea_Handler,
		},
		{
			MethodName: "CreateJsonDynamicConfig",
			Handler:    _CmsAdminApi_CreateJsonDynamicConfig_Handler,
		},
		{
			MethodName: "UpdateJsonDynamicConfig",
			Handler:    _CmsAdminApi_UpdateJsonDynamicConfig_Handler,
		},
		{
			MethodName: "GetJsonDynamicConfigs",
			Handler:    _CmsAdminApi_GetJsonDynamicConfigs_Handler,
		},
		{
			MethodName: "GetJsonDynamicConfig",
			Handler:    _CmsAdminApi_GetJsonDynamicConfig_Handler,
		},
		{
			MethodName: "DeleteJsonDynamicConfig",
			Handler:    _CmsAdminApi_DeleteJsonDynamicConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin/cms_admin.proto",
}
