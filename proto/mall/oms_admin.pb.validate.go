// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: admin/oms_admin.proto

package mall

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddOrUpdateOrderReturnReasonParam with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AddOrUpdateOrderReturnReasonParam) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrUpdateOrderReturnReasonParam
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AddOrUpdateOrderReturnReasonParamMultiError, or nil if none found.
func (m *AddOrUpdateOrderReturnReasonParam) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrUpdateOrderReturnReasonParam) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AddOrUpdateOrderReturnReasonParamValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSort() < 0 {
		err := AddOrUpdateOrderReturnReasonParamValidationError{
			field:  "Sort",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return AddOrUpdateOrderReturnReasonParamMultiError(errors)
	}

	return nil
}

// AddOrUpdateOrderReturnReasonParamMultiError is an error wrapping multiple
// validation errors returned by
// AddOrUpdateOrderReturnReasonParam.ValidateAll() if the designated
// constraints aren't met.
type AddOrUpdateOrderReturnReasonParamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrUpdateOrderReturnReasonParamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrUpdateOrderReturnReasonParamMultiError) AllErrors() []error { return m }

// AddOrUpdateOrderReturnReasonParamValidationError is the validation error
// returned by AddOrUpdateOrderReturnReasonParam.Validate if the designated
// constraints aren't met.
type AddOrUpdateOrderReturnReasonParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrUpdateOrderReturnReasonParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrUpdateOrderReturnReasonParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrUpdateOrderReturnReasonParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrUpdateOrderReturnReasonParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrUpdateOrderReturnReasonParamValidationError) ErrorName() string {
	return "AddOrUpdateOrderReturnReasonParamValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrUpdateOrderReturnReasonParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrUpdateOrderReturnReasonParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrUpdateOrderReturnReasonParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrUpdateOrderReturnReasonParamValidationError{}

// Validate checks the field values on GetOrderReturnReasonsParam with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrderReturnReasonsParam) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderReturnReasonsParam with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderReturnReasonsParamMultiError, or nil if none found.
func (m *GetOrderReturnReasonsParam) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderReturnReasonsParam) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrderReturnReasonsParamValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrderReturnReasonsParamValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrderReturnReasonsParamValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPageNum() < 0 {
		err := GetOrderReturnReasonsParamValidationError{
			field:  "PageNum",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() < 0 {
		err := GetOrderReturnReasonsParamValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOrderReturnReasonsParamMultiError(errors)
	}

	return nil
}

// GetOrderReturnReasonsParamMultiError is an error wrapping multiple
// validation errors returned by GetOrderReturnReasonsParam.ValidateAll() if
// the designated constraints aren't met.
type GetOrderReturnReasonsParamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderReturnReasonsParamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderReturnReasonsParamMultiError) AllErrors() []error { return m }

// GetOrderReturnReasonsParamValidationError is the validation error returned
// by GetOrderReturnReasonsParam.Validate if the designated constraints aren't met.
type GetOrderReturnReasonsParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderReturnReasonsParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderReturnReasonsParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderReturnReasonsParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderReturnReasonsParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderReturnReasonsParamValidationError) ErrorName() string {
	return "GetOrderReturnReasonsParamValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderReturnReasonsParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderReturnReasonsParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderReturnReasonsParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderReturnReasonsParamValidationError{}

// Validate checks the field values on OrderReturnReasonsData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderReturnReasonsData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderReturnReasonsData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderReturnReasonsDataMultiError, or nil if none found.
func (m *OrderReturnReasonsData) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderReturnReasonsData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrderReturnReasonsDataValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrderReturnReasonsDataValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrderReturnReasonsDataValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageTotal

	// no validation rules for PageSize

	// no validation rules for PageNum

	if len(errors) > 0 {
		return OrderReturnReasonsDataMultiError(errors)
	}

	return nil
}

// OrderReturnReasonsDataMultiError is an error wrapping multiple validation
// errors returned by OrderReturnReasonsData.ValidateAll() if the designated
// constraints aren't met.
type OrderReturnReasonsDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderReturnReasonsDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderReturnReasonsDataMultiError) AllErrors() []error { return m }

// OrderReturnReasonsDataValidationError is the validation error returned by
// OrderReturnReasonsData.Validate if the designated constraints aren't met.
type OrderReturnReasonsDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderReturnReasonsDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderReturnReasonsDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderReturnReasonsDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderReturnReasonsDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderReturnReasonsDataValidationError) ErrorName() string {
	return "OrderReturnReasonsDataValidationError"
}

// Error satisfies the builtin error interface
func (e OrderReturnReasonsDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderReturnReasonsData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderReturnReasonsDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderReturnReasonsDataValidationError{}

// Validate checks the field values on GetOrderReturnReasonsRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrderReturnReasonsRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderReturnReasonsRsp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderReturnReasonsRspMultiError, or nil if none found.
func (m *GetOrderReturnReasonsRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderReturnReasonsRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrderReturnReasonsRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrderReturnReasonsRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrderReturnReasonsRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrderReturnReasonsRspMultiError(errors)
	}

	return nil
}

// GetOrderReturnReasonsRspMultiError is an error wrapping multiple validation
// errors returned by GetOrderReturnReasonsRsp.ValidateAll() if the designated
// constraints aren't met.
type GetOrderReturnReasonsRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderReturnReasonsRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderReturnReasonsRspMultiError) AllErrors() []error { return m }

// GetOrderReturnReasonsRspValidationError is the validation error returned by
// GetOrderReturnReasonsRsp.Validate if the designated constraints aren't met.
type GetOrderReturnReasonsRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderReturnReasonsRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderReturnReasonsRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderReturnReasonsRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderReturnReasonsRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderReturnReasonsRspValidationError) ErrorName() string {
	return "GetOrderReturnReasonsRspValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderReturnReasonsRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderReturnReasonsRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderReturnReasonsRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderReturnReasonsRspValidationError{}

// Validate checks the field values on GetOrderReturnReasonReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrderReturnReasonReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderReturnReasonReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderReturnReasonReqMultiError, or nil if none found.
func (m *GetOrderReturnReasonReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderReturnReasonReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetOrderReturnReasonReqMultiError(errors)
	}

	return nil
}

// GetOrderReturnReasonReqMultiError is an error wrapping multiple validation
// errors returned by GetOrderReturnReasonReq.ValidateAll() if the designated
// constraints aren't met.
type GetOrderReturnReasonReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderReturnReasonReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderReturnReasonReqMultiError) AllErrors() []error { return m }

// GetOrderReturnReasonReqValidationError is the validation error returned by
// GetOrderReturnReasonReq.Validate if the designated constraints aren't met.
type GetOrderReturnReasonReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderReturnReasonReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderReturnReasonReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderReturnReasonReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderReturnReasonReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderReturnReasonReqValidationError) ErrorName() string {
	return "GetOrderReturnReasonReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderReturnReasonReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderReturnReasonReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderReturnReasonReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderReturnReasonReqValidationError{}

// Validate checks the field values on GetOrderReturnReasonRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrderReturnReasonRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderReturnReasonRsp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderReturnReasonRspMultiError, or nil if none found.
func (m *GetOrderReturnReasonRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderReturnReasonRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrderReturnReasonRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrderReturnReasonRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrderReturnReasonRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrderReturnReasonRspMultiError(errors)
	}

	return nil
}

// GetOrderReturnReasonRspMultiError is an error wrapping multiple validation
// errors returned by GetOrderReturnReasonRsp.ValidateAll() if the designated
// constraints aren't met.
type GetOrderReturnReasonRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderReturnReasonRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderReturnReasonRspMultiError) AllErrors() []error { return m }

// GetOrderReturnReasonRspValidationError is the validation error returned by
// GetOrderReturnReasonRsp.Validate if the designated constraints aren't met.
type GetOrderReturnReasonRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderReturnReasonRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderReturnReasonRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderReturnReasonRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderReturnReasonRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderReturnReasonRspValidationError) ErrorName() string {
	return "GetOrderReturnReasonRspValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderReturnReasonRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderReturnReasonRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderReturnReasonRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderReturnReasonRspValidationError{}

// Validate checks the field values on DeleteOrderReturnReasonReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrderReturnReasonReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrderReturnReasonReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOrderReturnReasonReqMultiError, or nil if none found.
func (m *DeleteOrderReturnReasonReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrderReturnReasonReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteOrderReturnReasonReqMultiError(errors)
	}

	return nil
}

// DeleteOrderReturnReasonReqMultiError is an error wrapping multiple
// validation errors returned by DeleteOrderReturnReasonReq.ValidateAll() if
// the designated constraints aren't met.
type DeleteOrderReturnReasonReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrderReturnReasonReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrderReturnReasonReqMultiError) AllErrors() []error { return m }

// DeleteOrderReturnReasonReqValidationError is the validation error returned
// by DeleteOrderReturnReasonReq.Validate if the designated constraints aren't met.
type DeleteOrderReturnReasonReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrderReturnReasonReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrderReturnReasonReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrderReturnReasonReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrderReturnReasonReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrderReturnReasonReqValidationError) ErrorName() string {
	return "DeleteOrderReturnReasonReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrderReturnReasonReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrderReturnReasonReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrderReturnReasonReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrderReturnReasonReqValidationError{}

// Validate checks the field values on GetOrdersParam with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetOrdersParam) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrdersParam with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetOrdersParamMultiError,
// or nil if none found.
func (m *GetOrdersParam) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrdersParam) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrdersParamValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrdersParamValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrdersParamValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPageNum() < 0 {
		err := GetOrdersParamValidationError{
			field:  "PageNum",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() < 0 {
		err := GetOrdersParamValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOrdersParamMultiError(errors)
	}

	return nil
}

// GetOrdersParamMultiError is an error wrapping multiple validation errors
// returned by GetOrdersParam.ValidateAll() if the designated constraints
// aren't met.
type GetOrdersParamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrdersParamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrdersParamMultiError) AllErrors() []error { return m }

// GetOrdersParamValidationError is the validation error returned by
// GetOrdersParam.Validate if the designated constraints aren't met.
type GetOrdersParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrdersParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrdersParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrdersParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrdersParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrdersParamValidationError) ErrorName() string { return "GetOrdersParamValidationError" }

// Error satisfies the builtin error interface
func (e GetOrdersParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrdersParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrdersParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrdersParamValidationError{}

// Validate checks the field values on OrdersData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrdersData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrdersData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrdersDataMultiError, or
// nil if none found.
func (m *OrdersData) ValidateAll() error {
	return m.validate(true)
}

func (m *OrdersData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrdersDataValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrdersDataValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrdersDataValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageTotal

	// no validation rules for PageSize

	// no validation rules for PageNum

	if len(errors) > 0 {
		return OrdersDataMultiError(errors)
	}

	return nil
}

// OrdersDataMultiError is an error wrapping multiple validation errors
// returned by OrdersData.ValidateAll() if the designated constraints aren't met.
type OrdersDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrdersDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrdersDataMultiError) AllErrors() []error { return m }

// OrdersDataValidationError is the validation error returned by
// OrdersData.Validate if the designated constraints aren't met.
type OrdersDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrdersDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrdersDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrdersDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrdersDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrdersDataValidationError) ErrorName() string { return "OrdersDataValidationError" }

// Error satisfies the builtin error interface
func (e OrdersDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrdersData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrdersDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrdersDataValidationError{}

// Validate checks the field values on GetOrdersRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetOrdersRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrdersRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetOrdersRspMultiError, or
// nil if none found.
func (m *GetOrdersRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrdersRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrdersRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrdersRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrdersRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrdersRspMultiError(errors)
	}

	return nil
}

// GetOrdersRspMultiError is an error wrapping multiple validation errors
// returned by GetOrdersRsp.ValidateAll() if the designated constraints aren't met.
type GetOrdersRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrdersRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrdersRspMultiError) AllErrors() []error { return m }

// GetOrdersRspValidationError is the validation error returned by
// GetOrdersRsp.Validate if the designated constraints aren't met.
type GetOrdersRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrdersRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrdersRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrdersRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrdersRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrdersRspValidationError) ErrorName() string { return "GetOrdersRspValidationError" }

// Error satisfies the builtin error interface
func (e GetOrdersRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrdersRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrdersRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrdersRspValidationError{}

// Validate checks the field values on GetOrderReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetOrderReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetOrderReqMultiError, or
// nil if none found.
func (m *GetOrderReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetOrderReqMultiError(errors)
	}

	return nil
}

// GetOrderReqMultiError is an error wrapping multiple validation errors
// returned by GetOrderReq.ValidateAll() if the designated constraints aren't met.
type GetOrderReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderReqMultiError) AllErrors() []error { return m }

// GetOrderReqValidationError is the validation error returned by
// GetOrderReq.Validate if the designated constraints aren't met.
type GetOrderReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderReqValidationError) ErrorName() string { return "GetOrderReqValidationError" }

// Error satisfies the builtin error interface
func (e GetOrderReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderReqValidationError{}

// Validate checks the field values on GetOrderRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetOrderRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetOrderRspMultiError, or
// nil if none found.
func (m *GetOrderRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrderRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrderRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrderRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrderRspMultiError(errors)
	}

	return nil
}

// GetOrderRspMultiError is an error wrapping multiple validation errors
// returned by GetOrderRsp.ValidateAll() if the designated constraints aren't met.
type GetOrderRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderRspMultiError) AllErrors() []error { return m }

// GetOrderRspValidationError is the validation error returned by
// GetOrderRsp.Validate if the designated constraints aren't met.
type GetOrderRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderRspValidationError) ErrorName() string { return "GetOrderRspValidationError" }

// Error satisfies the builtin error interface
func (e GetOrderRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderRspValidationError{}

// Validate checks the field values on DeleteOrderReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteOrderReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrderReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteOrderReqMultiError,
// or nil if none found.
func (m *DeleteOrderReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrderReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteOrderReqMultiError(errors)
	}

	return nil
}

// DeleteOrderReqMultiError is an error wrapping multiple validation errors
// returned by DeleteOrderReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteOrderReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrderReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrderReqMultiError) AllErrors() []error { return m }

// DeleteOrderReqValidationError is the validation error returned by
// DeleteOrderReq.Validate if the designated constraints aren't met.
type DeleteOrderReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrderReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrderReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrderReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrderReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrderReqValidationError) ErrorName() string { return "DeleteOrderReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteOrderReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrderReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrderReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrderReqValidationError{}

// Validate checks the field values on GetOrderReturnAppliesParam with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrderReturnAppliesParam) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderReturnAppliesParam with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderReturnAppliesParamMultiError, or nil if none found.
func (m *GetOrderReturnAppliesParam) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderReturnAppliesParam) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrderReturnAppliesParamValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrderReturnAppliesParamValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrderReturnAppliesParamValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrderReturnAppliesParamValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrderReturnAppliesParamValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrderReturnAppliesParamValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPageNum() < 0 {
		err := GetOrderReturnAppliesParamValidationError{
			field:  "PageNum",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() < 0 {
		err := GetOrderReturnAppliesParamValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOrderReturnAppliesParamMultiError(errors)
	}

	return nil
}

// GetOrderReturnAppliesParamMultiError is an error wrapping multiple
// validation errors returned by GetOrderReturnAppliesParam.ValidateAll() if
// the designated constraints aren't met.
type GetOrderReturnAppliesParamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderReturnAppliesParamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderReturnAppliesParamMultiError) AllErrors() []error { return m }

// GetOrderReturnAppliesParamValidationError is the validation error returned
// by GetOrderReturnAppliesParam.Validate if the designated constraints aren't met.
type GetOrderReturnAppliesParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderReturnAppliesParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderReturnAppliesParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderReturnAppliesParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderReturnAppliesParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderReturnAppliesParamValidationError) ErrorName() string {
	return "GetOrderReturnAppliesParamValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderReturnAppliesParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderReturnAppliesParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderReturnAppliesParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderReturnAppliesParamValidationError{}

// Validate checks the field values on OrderReturnAppliesData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderReturnAppliesData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderReturnAppliesData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderReturnAppliesDataMultiError, or nil if none found.
func (m *OrderReturnAppliesData) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderReturnAppliesData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrderReturnAppliesDataValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrderReturnAppliesDataValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrderReturnAppliesDataValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageTotal

	// no validation rules for PageSize

	// no validation rules for PageNum

	if len(errors) > 0 {
		return OrderReturnAppliesDataMultiError(errors)
	}

	return nil
}

// OrderReturnAppliesDataMultiError is an error wrapping multiple validation
// errors returned by OrderReturnAppliesData.ValidateAll() if the designated
// constraints aren't met.
type OrderReturnAppliesDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderReturnAppliesDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderReturnAppliesDataMultiError) AllErrors() []error { return m }

// OrderReturnAppliesDataValidationError is the validation error returned by
// OrderReturnAppliesData.Validate if the designated constraints aren't met.
type OrderReturnAppliesDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderReturnAppliesDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderReturnAppliesDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderReturnAppliesDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderReturnAppliesDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderReturnAppliesDataValidationError) ErrorName() string {
	return "OrderReturnAppliesDataValidationError"
}

// Error satisfies the builtin error interface
func (e OrderReturnAppliesDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderReturnAppliesData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderReturnAppliesDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderReturnAppliesDataValidationError{}

// Validate checks the field values on GetOrderReturnAppliesRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrderReturnAppliesRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderReturnAppliesRsp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderReturnAppliesRspMultiError, or nil if none found.
func (m *GetOrderReturnAppliesRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderReturnAppliesRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrderReturnAppliesRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrderReturnAppliesRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrderReturnAppliesRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrderReturnAppliesRspMultiError(errors)
	}

	return nil
}

// GetOrderReturnAppliesRspMultiError is an error wrapping multiple validation
// errors returned by GetOrderReturnAppliesRsp.ValidateAll() if the designated
// constraints aren't met.
type GetOrderReturnAppliesRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderReturnAppliesRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderReturnAppliesRspMultiError) AllErrors() []error { return m }

// GetOrderReturnAppliesRspValidationError is the validation error returned by
// GetOrderReturnAppliesRsp.Validate if the designated constraints aren't met.
type GetOrderReturnAppliesRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderReturnAppliesRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderReturnAppliesRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderReturnAppliesRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderReturnAppliesRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderReturnAppliesRspValidationError) ErrorName() string {
	return "GetOrderReturnAppliesRspValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderReturnAppliesRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderReturnAppliesRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderReturnAppliesRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderReturnAppliesRspValidationError{}

// Validate checks the field values on GetOrderReturnApplyReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrderReturnApplyReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderReturnApplyReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderReturnApplyReqMultiError, or nil if none found.
func (m *GetOrderReturnApplyReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderReturnApplyReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetOrderReturnApplyReqMultiError(errors)
	}

	return nil
}

// GetOrderReturnApplyReqMultiError is an error wrapping multiple validation
// errors returned by GetOrderReturnApplyReq.ValidateAll() if the designated
// constraints aren't met.
type GetOrderReturnApplyReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderReturnApplyReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderReturnApplyReqMultiError) AllErrors() []error { return m }

// GetOrderReturnApplyReqValidationError is the validation error returned by
// GetOrderReturnApplyReq.Validate if the designated constraints aren't met.
type GetOrderReturnApplyReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderReturnApplyReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderReturnApplyReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderReturnApplyReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderReturnApplyReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderReturnApplyReqValidationError) ErrorName() string {
	return "GetOrderReturnApplyReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderReturnApplyReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderReturnApplyReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderReturnApplyReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderReturnApplyReqValidationError{}

// Validate checks the field values on GetOrderReturnApplyRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrderReturnApplyRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderReturnApplyRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderReturnApplyRspMultiError, or nil if none found.
func (m *GetOrderReturnApplyRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderReturnApplyRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrderReturnApplyRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrderReturnApplyRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrderReturnApplyRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrderReturnApplyRspMultiError(errors)
	}

	return nil
}

// GetOrderReturnApplyRspMultiError is an error wrapping multiple validation
// errors returned by GetOrderReturnApplyRsp.ValidateAll() if the designated
// constraints aren't met.
type GetOrderReturnApplyRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderReturnApplyRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderReturnApplyRspMultiError) AllErrors() []error { return m }

// GetOrderReturnApplyRspValidationError is the validation error returned by
// GetOrderReturnApplyRsp.Validate if the designated constraints aren't met.
type GetOrderReturnApplyRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderReturnApplyRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderReturnApplyRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderReturnApplyRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderReturnApplyRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderReturnApplyRspValidationError) ErrorName() string {
	return "GetOrderReturnApplyRspValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderReturnApplyRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderReturnApplyRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderReturnApplyRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderReturnApplyRspValidationError{}

// Validate checks the field values on AddOrUpdateCompanyAddressParam with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOrUpdateCompanyAddressParam) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrUpdateCompanyAddressParam with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddOrUpdateCompanyAddressParamMultiError, or nil if none found.
func (m *AddOrUpdateCompanyAddressParam) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrUpdateCompanyAddressParam) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AddOrUpdateCompanyAddressParamMultiError(errors)
	}

	return nil
}

// AddOrUpdateCompanyAddressParamMultiError is an error wrapping multiple
// validation errors returned by AddOrUpdateCompanyAddressParam.ValidateAll()
// if the designated constraints aren't met.
type AddOrUpdateCompanyAddressParamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrUpdateCompanyAddressParamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrUpdateCompanyAddressParamMultiError) AllErrors() []error { return m }

// AddOrUpdateCompanyAddressParamValidationError is the validation error
// returned by AddOrUpdateCompanyAddressParam.Validate if the designated
// constraints aren't met.
type AddOrUpdateCompanyAddressParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrUpdateCompanyAddressParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrUpdateCompanyAddressParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrUpdateCompanyAddressParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrUpdateCompanyAddressParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrUpdateCompanyAddressParamValidationError) ErrorName() string {
	return "AddOrUpdateCompanyAddressParamValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrUpdateCompanyAddressParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrUpdateCompanyAddressParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrUpdateCompanyAddressParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrUpdateCompanyAddressParamValidationError{}

// Validate checks the field values on GetCompanyAddressesParam with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCompanyAddressesParam) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCompanyAddressesParam with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCompanyAddressesParamMultiError, or nil if none found.
func (m *GetCompanyAddressesParam) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCompanyAddressesParam) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageNum() < 0 {
		err := GetCompanyAddressesParamValidationError{
			field:  "PageNum",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() < 0 {
		err := GetCompanyAddressesParamValidationError{
			field:  "PageSize",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCompanyAddressesParamMultiError(errors)
	}

	return nil
}

// GetCompanyAddressesParamMultiError is an error wrapping multiple validation
// errors returned by GetCompanyAddressesParam.ValidateAll() if the designated
// constraints aren't met.
type GetCompanyAddressesParamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCompanyAddressesParamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCompanyAddressesParamMultiError) AllErrors() []error { return m }

// GetCompanyAddressesParamValidationError is the validation error returned by
// GetCompanyAddressesParam.Validate if the designated constraints aren't met.
type GetCompanyAddressesParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompanyAddressesParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompanyAddressesParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompanyAddressesParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompanyAddressesParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompanyAddressesParamValidationError) ErrorName() string {
	return "GetCompanyAddressesParamValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompanyAddressesParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompanyAddressesParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompanyAddressesParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompanyAddressesParamValidationError{}

// Validate checks the field values on CompanyAddressesData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompanyAddressesData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompanyAddressesData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompanyAddressesDataMultiError, or nil if none found.
func (m *CompanyAddressesData) ValidateAll() error {
	return m.validate(true)
}

func (m *CompanyAddressesData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CompanyAddressesDataValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CompanyAddressesDataValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CompanyAddressesDataValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PageTotal

	// no validation rules for PageSize

	// no validation rules for PageNum

	if len(errors) > 0 {
		return CompanyAddressesDataMultiError(errors)
	}

	return nil
}

// CompanyAddressesDataMultiError is an error wrapping multiple validation
// errors returned by CompanyAddressesData.ValidateAll() if the designated
// constraints aren't met.
type CompanyAddressesDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompanyAddressesDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompanyAddressesDataMultiError) AllErrors() []error { return m }

// CompanyAddressesDataValidationError is the validation error returned by
// CompanyAddressesData.Validate if the designated constraints aren't met.
type CompanyAddressesDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyAddressesDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyAddressesDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyAddressesDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyAddressesDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyAddressesDataValidationError) ErrorName() string {
	return "CompanyAddressesDataValidationError"
}

// Error satisfies the builtin error interface
func (e CompanyAddressesDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyAddressesData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyAddressesDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyAddressesDataValidationError{}

// Validate checks the field values on GetCompanyAddressesRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCompanyAddressesRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCompanyAddressesRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCompanyAddressesRspMultiError, or nil if none found.
func (m *GetCompanyAddressesRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCompanyAddressesRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCompanyAddressesRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCompanyAddressesRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCompanyAddressesRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCompanyAddressesRspMultiError(errors)
	}

	return nil
}

// GetCompanyAddressesRspMultiError is an error wrapping multiple validation
// errors returned by GetCompanyAddressesRsp.ValidateAll() if the designated
// constraints aren't met.
type GetCompanyAddressesRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCompanyAddressesRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCompanyAddressesRspMultiError) AllErrors() []error { return m }

// GetCompanyAddressesRspValidationError is the validation error returned by
// GetCompanyAddressesRsp.Validate if the designated constraints aren't met.
type GetCompanyAddressesRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompanyAddressesRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompanyAddressesRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompanyAddressesRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompanyAddressesRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompanyAddressesRspValidationError) ErrorName() string {
	return "GetCompanyAddressesRspValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompanyAddressesRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompanyAddressesRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompanyAddressesRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompanyAddressesRspValidationError{}

// Validate checks the field values on GetCompanyAddressReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCompanyAddressReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCompanyAddressReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCompanyAddressReqMultiError, or nil if none found.
func (m *GetCompanyAddressReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCompanyAddressReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetCompanyAddressReqMultiError(errors)
	}

	return nil
}

// GetCompanyAddressReqMultiError is an error wrapping multiple validation
// errors returned by GetCompanyAddressReq.ValidateAll() if the designated
// constraints aren't met.
type GetCompanyAddressReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCompanyAddressReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCompanyAddressReqMultiError) AllErrors() []error { return m }

// GetCompanyAddressReqValidationError is the validation error returned by
// GetCompanyAddressReq.Validate if the designated constraints aren't met.
type GetCompanyAddressReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompanyAddressReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompanyAddressReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompanyAddressReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompanyAddressReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompanyAddressReqValidationError) ErrorName() string {
	return "GetCompanyAddressReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompanyAddressReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompanyAddressReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompanyAddressReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompanyAddressReqValidationError{}

// Validate checks the field values on GetCompanyAddressRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCompanyAddressRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCompanyAddressRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCompanyAddressRspMultiError, or nil if none found.
func (m *GetCompanyAddressRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCompanyAddressRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCompanyAddressRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCompanyAddressRspValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCompanyAddressRspValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCompanyAddressRspMultiError(errors)
	}

	return nil
}

// GetCompanyAddressRspMultiError is an error wrapping multiple validation
// errors returned by GetCompanyAddressRsp.ValidateAll() if the designated
// constraints aren't met.
type GetCompanyAddressRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCompanyAddressRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCompanyAddressRspMultiError) AllErrors() []error { return m }

// GetCompanyAddressRspValidationError is the validation error returned by
// GetCompanyAddressRsp.Validate if the designated constraints aren't met.
type GetCompanyAddressRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompanyAddressRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompanyAddressRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompanyAddressRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompanyAddressRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompanyAddressRspValidationError) ErrorName() string {
	return "GetCompanyAddressRspValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompanyAddressRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompanyAddressRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompanyAddressRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompanyAddressRspValidationError{}

// Validate checks the field values on DeleteCompanyAddressReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCompanyAddressReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCompanyAddressReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCompanyAddressReqMultiError, or nil if none found.
func (m *DeleteCompanyAddressReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCompanyAddressReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteCompanyAddressReqMultiError(errors)
	}

	return nil
}

// DeleteCompanyAddressReqMultiError is an error wrapping multiple validation
// errors returned by DeleteCompanyAddressReq.ValidateAll() if the designated
// constraints aren't met.
type DeleteCompanyAddressReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCompanyAddressReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCompanyAddressReqMultiError) AllErrors() []error { return m }

// DeleteCompanyAddressReqValidationError is the validation error returned by
// DeleteCompanyAddressReq.Validate if the designated constraints aren't met.
type DeleteCompanyAddressReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCompanyAddressReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCompanyAddressReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCompanyAddressReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCompanyAddressReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCompanyAddressReqValidationError) ErrorName() string {
	return "DeleteCompanyAddressReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCompanyAddressReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCompanyAddressReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCompanyAddressReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCompanyAddressReqValidationError{}
