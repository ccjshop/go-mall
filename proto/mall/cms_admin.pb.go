// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: admin/cms_admin.proto

package mall

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 添加更新产品分类的参数
type AddOrUpdateProductCategoryParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 修改
	Id uint64 `protobuf:"varint,20,opt,name=id,proto3" json:"id,omitempty"` // ID
	// 新增修改
	ParentId     uint64   `protobuf:"varint,1,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`                     // 父分类的编号
	Name         string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                              // 商品分类名称
	ProductUnit  string   `protobuf:"bytes,3,opt,name=product_unit,json=productUnit,proto3" json:"product_unit,omitempty"`             // 分类单位
	NavStatus    uint32   `protobuf:"varint,4,opt,name=nav_status,json=navStatus,proto3" json:"nav_status,omitempty"`                  // 是否在导航栏显示
	ShowStatus   uint32   `protobuf:"varint,5,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`               // 是否进行显示
	Sort         uint32   `protobuf:"varint,6,opt,name=sort,proto3" json:"sort,omitempty"`                                             // 排序
	Icon         string   `protobuf:"bytes,7,opt,name=icon,proto3" json:"icon,omitempty"`                                              // 图标
	Keywords     string   `protobuf:"bytes,8,opt,name=keywords,proto3" json:"keywords,omitempty"`                                      // 关键字
	Description  string   `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`                                // 分类描述
	AttributeIds []uint64 `protobuf:"varint,10,rep,packed,name=attribute_ids,json=attributeIds,proto3" json:"attribute_ids,omitempty"` // 产品相关筛选属性集合
}

func (x *AddOrUpdateProductCategoryParam) Reset() {
	*x = AddOrUpdateProductCategoryParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOrUpdateProductCategoryParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOrUpdateProductCategoryParam) ProtoMessage() {}

func (x *AddOrUpdateProductCategoryParam) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOrUpdateProductCategoryParam.ProtoReflect.Descriptor instead.
func (*AddOrUpdateProductCategoryParam) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{0}
}

func (x *AddOrUpdateProductCategoryParam) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddOrUpdateProductCategoryParam) GetParentId() uint64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *AddOrUpdateProductCategoryParam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddOrUpdateProductCategoryParam) GetProductUnit() string {
	if x != nil {
		return x.ProductUnit
	}
	return ""
}

func (x *AddOrUpdateProductCategoryParam) GetNavStatus() uint32 {
	if x != nil {
		return x.NavStatus
	}
	return 0
}

func (x *AddOrUpdateProductCategoryParam) GetShowStatus() uint32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *AddOrUpdateProductCategoryParam) GetSort() uint32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *AddOrUpdateProductCategoryParam) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *AddOrUpdateProductCategoryParam) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *AddOrUpdateProductCategoryParam) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddOrUpdateProductCategoryParam) GetAttributeIds() []uint64 {
	if x != nil {
		return x.AttributeIds
	}
	return nil
}

// 根据id获取商品分类
type GetProductCategoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetProductCategoryReq) Reset() {
	*x = GetProductCategoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductCategoryReq) ProtoMessage() {}

func (x *GetProductCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductCategoryReq.ProtoReflect.Descriptor instead.
func (*GetProductCategoryReq) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{1}
}

func (x *GetProductCategoryReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 根据id获取商品分类
type GetProductCategoryRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`      // 状态码
	Message string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // 提示信息
	Data    *ProductCategory `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetProductCategoryRsp) Reset() {
	*x = GetProductCategoryRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductCategoryRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductCategoryRsp) ProtoMessage() {}

func (x *GetProductCategoryRsp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductCategoryRsp.ProtoReflect.Descriptor instead.
func (*GetProductCategoryRsp) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{2}
}

func (x *GetProductCategoryRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetProductCategoryRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetProductCategoryRsp) GetData() *ProductCategory {
	if x != nil {
		return x.Data
	}
	return nil
}

// 分页查询商品分类
type GetProductCategoriesParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       *wrapperspb.UInt64Value `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ParentId *wrapperspb.UInt64Value `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Name     string                  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	PageSize uint32                  `protobuf:"varint,10,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageNum  uint32                  `protobuf:"varint,11,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
}

func (x *GetProductCategoriesParam) Reset() {
	*x = GetProductCategoriesParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductCategoriesParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductCategoriesParam) ProtoMessage() {}

func (x *GetProductCategoriesParam) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductCategoriesParam.ProtoReflect.Descriptor instead.
func (*GetProductCategoriesParam) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{3}
}

func (x *GetProductCategoriesParam) GetId() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GetProductCategoriesParam) GetParentId() *wrapperspb.UInt64Value {
	if x != nil {
		return x.ParentId
	}
	return nil
}

func (x *GetProductCategoriesParam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetProductCategoriesParam) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetProductCategoriesParam) GetPageNum() uint32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

type ProductCategoriesData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data      []*ProductCategory `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`                             // 商品分类
	PageTotal uint32             `protobuf:"varint,2,opt,name=page_total,json=pageTotal,proto3" json:"page_total,omitempty"` // 数据总数
	PageSize  uint32             `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`    // 页码
	PageNum   uint32             `protobuf:"varint,4,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`       // 页面大小
}

func (x *ProductCategoriesData) Reset() {
	*x = ProductCategoriesData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductCategoriesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductCategoriesData) ProtoMessage() {}

func (x *ProductCategoriesData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductCategoriesData.ProtoReflect.Descriptor instead.
func (*ProductCategoriesData) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{4}
}

func (x *ProductCategoriesData) GetData() []*ProductCategory {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ProductCategoriesData) GetPageTotal() uint32 {
	if x != nil {
		return x.PageTotal
	}
	return 0
}

func (x *ProductCategoriesData) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ProductCategoriesData) GetPageNum() uint32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

type GetProductCategoriesRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32                 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`      // 状态码
	Message string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // 提示信息
	Data    *ProductCategoriesData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetProductCategoriesRsp) Reset() {
	*x = GetProductCategoriesRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductCategoriesRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductCategoriesRsp) ProtoMessage() {}

func (x *GetProductCategoriesRsp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductCategoriesRsp.ProtoReflect.Descriptor instead.
func (*GetProductCategoriesRsp) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{5}
}

func (x *GetProductCategoriesRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetProductCategoriesRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetProductCategoriesRsp) GetData() *ProductCategoriesData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 删除商品分类
type DeleteProductCategoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteProductCategoryReq) Reset() {
	*x = DeleteProductCategoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProductCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductCategoryReq) ProtoMessage() {}

func (x *DeleteProductCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductCategoryReq.ProtoReflect.Descriptor instead.
func (*DeleteProductCategoryReq) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteProductCategoryReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 查询所有一级分类及子分类
type GetProductCategoriesWithChildrenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetProductCategoriesWithChildrenReq) Reset() {
	*x = GetProductCategoriesWithChildrenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductCategoriesWithChildrenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductCategoriesWithChildrenReq) ProtoMessage() {}

func (x *GetProductCategoriesWithChildrenReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductCategoriesWithChildrenReq.ProtoReflect.Descriptor instead.
func (*GetProductCategoriesWithChildrenReq) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{7}
}

// 查询所有一级分类及子分类
type ProductCategoryTreeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category *ProductCategory   `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	Children []*ProductCategory `protobuf:"bytes,2,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *ProductCategoryTreeItem) Reset() {
	*x = ProductCategoryTreeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductCategoryTreeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductCategoryTreeItem) ProtoMessage() {}

func (x *ProductCategoryTreeItem) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductCategoryTreeItem.ProtoReflect.Descriptor instead.
func (*ProductCategoryTreeItem) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{8}
}

func (x *ProductCategoryTreeItem) GetCategory() *ProductCategory {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *ProductCategoryTreeItem) GetChildren() []*ProductCategory {
	if x != nil {
		return x.Children
	}
	return nil
}

// 查询所有一级分类及子分类
type GetProductCategoriesWithChildrenRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32                     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`      // 状态码
	Message string                     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // 提示信息
	Data    []*ProductCategoryTreeItem `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetProductCategoriesWithChildrenRsp) Reset() {
	*x = GetProductCategoriesWithChildrenRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductCategoriesWithChildrenRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductCategoriesWithChildrenRsp) ProtoMessage() {}

func (x *GetProductCategoriesWithChildrenRsp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductCategoriesWithChildrenRsp.ProtoReflect.Descriptor instead.
func (*GetProductCategoriesWithChildrenRsp) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{9}
}

func (x *GetProductCategoriesWithChildrenRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetProductCategoriesWithChildrenRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetProductCategoriesWithChildrenRsp) GetData() []*ProductCategoryTreeItem {
	if x != nil {
		return x.Data
	}
	return nil
}

// 添加或更新商品品牌参数
type AddOrUpdateBrandParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64 `protobuf:"varint,20,opt,name=id,proto3" json:"id,omitempty"`                                           // ID
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                         // 品牌名称
	FirstLetter   string `protobuf:"bytes,2,opt,name=first_letter,json=firstLetter,proto3" json:"first_letter,omitempty"`        // 品牌首字母
	Sort          uint32 `protobuf:"varint,3,opt,name=sort,proto3" json:"sort,omitempty"`                                        // 排序字段
	FactoryStatus uint32 `protobuf:"varint,4,opt,name=factory_status,json=factoryStatus,proto3" json:"factory_status,omitempty"` // 是否为厂家制造商
	ShowStatus    uint32 `protobuf:"varint,5,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"`          // 是否进行显示
	Logo          string `protobuf:"bytes,6,opt,name=logo,proto3" json:"logo,omitempty"`                                         // 品牌logo
	BigPic        string `protobuf:"bytes,7,opt,name=big_pic,json=bigPic,proto3" json:"big_pic,omitempty"`                       // 品牌大图
	BrandStory    string `protobuf:"bytes,8,opt,name=brand_story,json=brandStory,proto3" json:"brand_story,omitempty"`           // 品牌故事
}

func (x *AddOrUpdateBrandParam) Reset() {
	*x = AddOrUpdateBrandParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOrUpdateBrandParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOrUpdateBrandParam) ProtoMessage() {}

func (x *AddOrUpdateBrandParam) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOrUpdateBrandParam.ProtoReflect.Descriptor instead.
func (*AddOrUpdateBrandParam) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{10}
}

func (x *AddOrUpdateBrandParam) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddOrUpdateBrandParam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddOrUpdateBrandParam) GetFirstLetter() string {
	if x != nil {
		return x.FirstLetter
	}
	return ""
}

func (x *AddOrUpdateBrandParam) GetSort() uint32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *AddOrUpdateBrandParam) GetFactoryStatus() uint32 {
	if x != nil {
		return x.FactoryStatus
	}
	return 0
}

func (x *AddOrUpdateBrandParam) GetShowStatus() uint32 {
	if x != nil {
		return x.ShowStatus
	}
	return 0
}

func (x *AddOrUpdateBrandParam) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *AddOrUpdateBrandParam) GetBigPic() string {
	if x != nil {
		return x.BigPic
	}
	return ""
}

func (x *AddOrUpdateBrandParam) GetBrandStory() string {
	if x != nil {
		return x.BrandStory
	}
	return ""
}

// 分页查询商品品牌
type GetBrandsParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize   uint32                  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`      // 页码
	PageNum    uint32                  `protobuf:"varint,2,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`         // 页面大小
	Name       string                  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                               // 品牌名称
	ShowStatus *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=show_status,json=showStatus,proto3" json:"show_status,omitempty"` // 是否进行显示
}

func (x *GetBrandsParam) Reset() {
	*x = GetBrandsParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBrandsParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBrandsParam) ProtoMessage() {}

func (x *GetBrandsParam) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBrandsParam.ProtoReflect.Descriptor instead.
func (*GetBrandsParam) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{11}
}

func (x *GetBrandsParam) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetBrandsParam) GetPageNum() uint32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *GetBrandsParam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetBrandsParam) GetShowStatus() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ShowStatus
	}
	return nil
}

// 分页查询商品品牌
type GetBrandsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`      // 状态码
	Message string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // 提示信息
	Data    *GetBrandsData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetBrandsRsp) Reset() {
	*x = GetBrandsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBrandsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBrandsRsp) ProtoMessage() {}

func (x *GetBrandsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBrandsRsp.ProtoReflect.Descriptor instead.
func (*GetBrandsRsp) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{12}
}

func (x *GetBrandsRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetBrandsRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetBrandsRsp) GetData() *GetBrandsData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetBrandsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data      []*Brand `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`                             // 商品品牌
	PageTotal uint32   `protobuf:"varint,2,opt,name=page_total,json=pageTotal,proto3" json:"page_total,omitempty"` // 数据总数
	PageSize  uint32   `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`    // 页码
	PageNum   uint32   `protobuf:"varint,4,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`       // 页面大小
}

func (x *GetBrandsData) Reset() {
	*x = GetBrandsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBrandsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBrandsData) ProtoMessage() {}

func (x *GetBrandsData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBrandsData.ProtoReflect.Descriptor instead.
func (*GetBrandsData) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{13}
}

func (x *GetBrandsData) GetData() []*Brand {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetBrandsData) GetPageTotal() uint32 {
	if x != nil {
		return x.PageTotal
	}
	return 0
}

func (x *GetBrandsData) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetBrandsData) GetPageNum() uint32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

// 根据id获取商品品牌
type GetBrandReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetBrandReq) Reset() {
	*x = GetBrandReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBrandReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBrandReq) ProtoMessage() {}

func (x *GetBrandReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBrandReq.ProtoReflect.Descriptor instead.
func (*GetBrandReq) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{14}
}

func (x *GetBrandReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 根据id获取商品品牌
type GetBrandRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`      // 状态码
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // 提示信息
	Data    *Brand `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`       // 数据
}

func (x *GetBrandRsp) Reset() {
	*x = GetBrandRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBrandRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBrandRsp) ProtoMessage() {}

func (x *GetBrandRsp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBrandRsp.ProtoReflect.Descriptor instead.
func (*GetBrandRsp) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{15}
}

func (x *GetBrandRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetBrandRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetBrandRsp) GetData() *Brand {
	if x != nil {
		return x.Data
	}
	return nil
}

// 删除商品品牌
type DeleteBrandReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteBrandReq) Reset() {
	*x = DeleteBrandReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBrandReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBrandReq) ProtoMessage() {}

func (x *DeleteBrandReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBrandReq.ProtoReflect.Descriptor instead.
func (*DeleteBrandReq) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteBrandReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 添加或更新产品属性分类表参数
type AddOrUpdateProductAttributeCategoryParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint64 `protobuf:"varint,20,opt,name=id,proto3" json:"id,omitempty"`   // ID
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // 名称
}

func (x *AddOrUpdateProductAttributeCategoryParam) Reset() {
	*x = AddOrUpdateProductAttributeCategoryParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOrUpdateProductAttributeCategoryParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOrUpdateProductAttributeCategoryParam) ProtoMessage() {}

func (x *AddOrUpdateProductAttributeCategoryParam) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOrUpdateProductAttributeCategoryParam.ProtoReflect.Descriptor instead.
func (*AddOrUpdateProductAttributeCategoryParam) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{17}
}

func (x *AddOrUpdateProductAttributeCategoryParam) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddOrUpdateProductAttributeCategoryParam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// 分页查询产品属性分类
type ProductAttributeCategoriesData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data      []*ProductAttributeCategory `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`                             //
	PageTotal uint32                      `protobuf:"varint,2,opt,name=page_total,json=pageTotal,proto3" json:"page_total,omitempty"` // 数据总数
	PageSize  uint32                      `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`    // 页码
	PageNum   uint32                      `protobuf:"varint,4,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`       // 页面大小
}

func (x *ProductAttributeCategoriesData) Reset() {
	*x = ProductAttributeCategoriesData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductAttributeCategoriesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductAttributeCategoriesData) ProtoMessage() {}

func (x *ProductAttributeCategoriesData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductAttributeCategoriesData.ProtoReflect.Descriptor instead.
func (*ProductAttributeCategoriesData) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{18}
}

func (x *ProductAttributeCategoriesData) GetData() []*ProductAttributeCategory {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ProductAttributeCategoriesData) GetPageTotal() uint32 {
	if x != nil {
		return x.PageTotal
	}
	return 0
}

func (x *ProductAttributeCategoriesData) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ProductAttributeCategoriesData) GetPageNum() uint32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

type GetProductAttributeCategoriesParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // 名称
	PageSize uint32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageNum  uint32 `protobuf:"varint,3,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
}

func (x *GetProductAttributeCategoriesParam) Reset() {
	*x = GetProductAttributeCategoriesParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductAttributeCategoriesParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductAttributeCategoriesParam) ProtoMessage() {}

func (x *GetProductAttributeCategoriesParam) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductAttributeCategoriesParam.ProtoReflect.Descriptor instead.
func (*GetProductAttributeCategoriesParam) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{19}
}

func (x *GetProductAttributeCategoriesParam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetProductAttributeCategoriesParam) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetProductAttributeCategoriesParam) GetPageNum() uint32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

// 分页查询产品属性分类
type GetProductAttributeCategoriesRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32                          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`      // 状态码
	Message string                          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // 提示信息
	Data    *ProductAttributeCategoriesData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetProductAttributeCategoriesRsp) Reset() {
	*x = GetProductAttributeCategoriesRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductAttributeCategoriesRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductAttributeCategoriesRsp) ProtoMessage() {}

func (x *GetProductAttributeCategoriesRsp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductAttributeCategoriesRsp.ProtoReflect.Descriptor instead.
func (*GetProductAttributeCategoriesRsp) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{20}
}

func (x *GetProductAttributeCategoriesRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetProductAttributeCategoriesRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetProductAttributeCategoriesRsp) GetData() *ProductAttributeCategoriesData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 根据id获取产品属性分类
type GetProductAttributeCategoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetProductAttributeCategoryReq) Reset() {
	*x = GetProductAttributeCategoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductAttributeCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductAttributeCategoryReq) ProtoMessage() {}

func (x *GetProductAttributeCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductAttributeCategoryReq.ProtoReflect.Descriptor instead.
func (*GetProductAttributeCategoryReq) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{21}
}

func (x *GetProductAttributeCategoryReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 根据id获取产品属性分类
type GetProductAttributeCategoryRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32                    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`      // 状态码
	Message string                    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // 提示信息
	Data    *ProductAttributeCategory `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`       // 数据
}

func (x *GetProductAttributeCategoryRsp) Reset() {
	*x = GetProductAttributeCategoryRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductAttributeCategoryRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductAttributeCategoryRsp) ProtoMessage() {}

func (x *GetProductAttributeCategoryRsp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductAttributeCategoryRsp.ProtoReflect.Descriptor instead.
func (*GetProductAttributeCategoryRsp) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{22}
}

func (x *GetProductAttributeCategoryRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetProductAttributeCategoryRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetProductAttributeCategoryRsp) GetData() *ProductAttributeCategory {
	if x != nil {
		return x.Data
	}
	return nil
}

// 删除产品属性分类
type DeleteProductAttributeCategoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteProductAttributeCategoryReq) Reset() {
	*x = DeleteProductAttributeCategoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProductAttributeCategoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductAttributeCategoryReq) ProtoMessage() {}

func (x *DeleteProductAttributeCategoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductAttributeCategoryReq.ProtoReflect.Descriptor instead.
func (*DeleteProductAttributeCategoryReq) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteProductAttributeCategoryReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 批量更新sku的库存参数
type BatchUpdateSkuStockParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId uint64      `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"` // 产品ID
	SkuStocks []*SkuStock `protobuf:"bytes,2,rep,name=sku_stocks,json=skuStocks,proto3" json:"sku_stocks,omitempty"`  // 商品SKU
}

func (x *BatchUpdateSkuStockParam) Reset() {
	*x = BatchUpdateSkuStockParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpdateSkuStockParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateSkuStockParam) ProtoMessage() {}

func (x *BatchUpdateSkuStockParam) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateSkuStockParam.ProtoReflect.Descriptor instead.
func (*BatchUpdateSkuStockParam) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{24}
}

func (x *BatchUpdateSkuStockParam) GetProductId() uint64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *BatchUpdateSkuStockParam) GetSkuStocks() []*SkuStock {
	if x != nil {
		return x.SkuStocks
	}
	return nil
}

// 根据商品ID查询sku的库存
type GetSkuStocksByProductIdParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId uint64 `protobuf:"varint,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"` // 产品ID
	SkuCode   string `protobuf:"bytes,2,opt,name=sku_code,json=skuCode,proto3" json:"sku_code,omitempty"`        // sku编码
}

func (x *GetSkuStocksByProductIdParam) Reset() {
	*x = GetSkuStocksByProductIdParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSkuStocksByProductIdParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSkuStocksByProductIdParam) ProtoMessage() {}

func (x *GetSkuStocksByProductIdParam) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSkuStocksByProductIdParam.ProtoReflect.Descriptor instead.
func (*GetSkuStocksByProductIdParam) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{25}
}

func (x *GetSkuStocksByProductIdParam) GetProductId() uint64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *GetSkuStocksByProductIdParam) GetSkuCode() string {
	if x != nil {
		return x.SkuCode
	}
	return ""
}

// 根据商品id分页查询sku的库存
type SkuStocksData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*SkuStock `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"` // sku的库存
}

func (x *SkuStocksData) Reset() {
	*x = SkuStocksData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkuStocksData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkuStocksData) ProtoMessage() {}

func (x *SkuStocksData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkuStocksData.ProtoReflect.Descriptor instead.
func (*SkuStocksData) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{26}
}

func (x *SkuStocksData) GetData() []*SkuStock {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetSkuStocksByProductIdRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`      // 状态码
	Message string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // 提示信息
	Data    *SkuStocksData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`       // 数据
}

func (x *GetSkuStocksByProductIdRsp) Reset() {
	*x = GetSkuStocksByProductIdRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSkuStocksByProductIdRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSkuStocksByProductIdRsp) ProtoMessage() {}

func (x *GetSkuStocksByProductIdRsp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSkuStocksByProductIdRsp.ProtoReflect.Descriptor instead.
func (*GetSkuStocksByProductIdRsp) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{27}
}

func (x *GetSkuStocksByProductIdRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetSkuStocksByProductIdRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetSkuStocksByProductIdRsp) GetData() *SkuStocksData {
	if x != nil {
		return x.Data
	}
	return nil
}

// START ======================================= 优选专区 ======================================= START
// 添加或更新优选专区参数
type AddOrUpdatePrefrenceAreaParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // 主键
}

func (x *AddOrUpdatePrefrenceAreaParam) Reset() {
	*x = AddOrUpdatePrefrenceAreaParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOrUpdatePrefrenceAreaParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOrUpdatePrefrenceAreaParam) ProtoMessage() {}

func (x *AddOrUpdatePrefrenceAreaParam) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOrUpdatePrefrenceAreaParam.ProtoReflect.Descriptor instead.
func (*AddOrUpdatePrefrenceAreaParam) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{28}
}

func (x *AddOrUpdatePrefrenceAreaParam) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 分页查询优选专区
type GetPrefrenceAreasParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum  uint32 `protobuf:"varint,10,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`    // 页面大小
	PageSize uint32 `protobuf:"varint,11,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 页码
}

func (x *GetPrefrenceAreasParam) Reset() {
	*x = GetPrefrenceAreasParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPrefrenceAreasParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrefrenceAreasParam) ProtoMessage() {}

func (x *GetPrefrenceAreasParam) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrefrenceAreasParam.ProtoReflect.Descriptor instead.
func (*GetPrefrenceAreasParam) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{29}
}

func (x *GetPrefrenceAreasParam) GetPageNum() uint32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *GetPrefrenceAreasParam) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 分页查询优选专区
type PrefrenceAreasData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data      []*PrefrenceArea `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`                             // 优选专区
	PageTotal uint32           `protobuf:"varint,2,opt,name=page_total,json=pageTotal,proto3" json:"page_total,omitempty"` // 数据总数
	PageSize  uint32           `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`    // 页码
	PageNum   uint32           `protobuf:"varint,4,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`       // 页面大小
}

func (x *PrefrenceAreasData) Reset() {
	*x = PrefrenceAreasData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrefrenceAreasData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrefrenceAreasData) ProtoMessage() {}

func (x *PrefrenceAreasData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrefrenceAreasData.ProtoReflect.Descriptor instead.
func (*PrefrenceAreasData) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{30}
}

func (x *PrefrenceAreasData) GetData() []*PrefrenceArea {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PrefrenceAreasData) GetPageTotal() uint32 {
	if x != nil {
		return x.PageTotal
	}
	return 0
}

func (x *PrefrenceAreasData) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PrefrenceAreasData) GetPageNum() uint32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

type GetPrefrenceAreasRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`      // 状态码
	Message string              `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // 提示信息
	Data    *PrefrenceAreasData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`       //
}

func (x *GetPrefrenceAreasRsp) Reset() {
	*x = GetPrefrenceAreasRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPrefrenceAreasRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrefrenceAreasRsp) ProtoMessage() {}

func (x *GetPrefrenceAreasRsp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrefrenceAreasRsp.ProtoReflect.Descriptor instead.
func (*GetPrefrenceAreasRsp) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{31}
}

func (x *GetPrefrenceAreasRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetPrefrenceAreasRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetPrefrenceAreasRsp) GetData() *PrefrenceAreasData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 根据id获取优选专区
type GetPrefrenceAreaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetPrefrenceAreaReq) Reset() {
	*x = GetPrefrenceAreaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPrefrenceAreaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrefrenceAreaReq) ProtoMessage() {}

func (x *GetPrefrenceAreaReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrefrenceAreaReq.ProtoReflect.Descriptor instead.
func (*GetPrefrenceAreaReq) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{32}
}

func (x *GetPrefrenceAreaReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 根据id获取优选专区
type GetPrefrenceAreaRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`      // 状态码
	Message string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // 提示信息
	Data    *PrefrenceArea `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`       // 数据
}

func (x *GetPrefrenceAreaRsp) Reset() {
	*x = GetPrefrenceAreaRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPrefrenceAreaRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrefrenceAreaRsp) ProtoMessage() {}

func (x *GetPrefrenceAreaRsp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrefrenceAreaRsp.ProtoReflect.Descriptor instead.
func (*GetPrefrenceAreaRsp) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{33}
}

func (x *GetPrefrenceAreaRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetPrefrenceAreaRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetPrefrenceAreaRsp) GetData() *PrefrenceArea {
	if x != nil {
		return x.Data
	}
	return nil
}

// 删除优选专区
type DeletePrefrenceAreaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeletePrefrenceAreaReq) Reset() {
	*x = DeletePrefrenceAreaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePrefrenceAreaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePrefrenceAreaReq) ProtoMessage() {}

func (x *DeletePrefrenceAreaReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePrefrenceAreaReq.ProtoReflect.Descriptor instead.
func (*DeletePrefrenceAreaReq) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{34}
}

func (x *DeletePrefrenceAreaReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 添加或更新商品属性参数
type AddOrUpdateProductAttributeParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         uint64 `protobuf:"varint,20,opt,name=id,proto3" json:"id,omitempty"`                                                                                      // 编号
	ProductAttributeCategoryId uint64 `protobuf:"varint,2,opt,name=product_attribute_category_id,json=productAttributeCategoryId,proto3" json:"product_attribute_category_id,omitempty"` // 产品属性分类表ID
	Type                       uint32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`                                                                                   // 属性的类型；0->规格；1->参数
	Name                       string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                                                                                    // 属性名称
	SelectType                 uint32 `protobuf:"varint,5,opt,name=select_type,json=selectType,proto3" json:"select_type,omitempty"`                                                     // 属性选择类型：0->唯一；1->单选；2->多选
	InputType                  uint32 `protobuf:"varint,6,opt,name=input_type,json=inputType,proto3" json:"input_type,omitempty"`                                                        // 属性录入方式：0->手工录入；1->从列表中选取
	InputList                  string `protobuf:"bytes,7,opt,name=input_list,json=inputList,proto3" json:"input_list,omitempty"`                                                         // 可选值列表，以逗号隔开
	Sort                       uint32 `protobuf:"varint,8,opt,name=sort,proto3" json:"sort,omitempty"`                                                                                   // 排序字段
	FilterType                 uint32 `protobuf:"varint,9,opt,name=filter_type,json=filterType,proto3" json:"filter_type,omitempty"`                                                     // 分类筛选样式：0->普通；1->颜色
	SearchType                 uint32 `protobuf:"varint,10,opt,name=search_type,json=searchType,proto3" json:"search_type,omitempty"`                                                    // 检索类型；0->不需要进行检索；1->关键字检索；2->范围检索
	RelatedStatus              uint32 `protobuf:"varint,11,opt,name=related_status,json=relatedStatus,proto3" json:"related_status,omitempty"`                                           // 相同属性产品是否关联；0->不关联；1->关联
	HandAddStatus              uint32 `protobuf:"varint,12,opt,name=hand_add_status,json=handAddStatus,proto3" json:"hand_add_status,omitempty"`                                         // 是否支持手动新增；0->不支持；1->支持
}

func (x *AddOrUpdateProductAttributeParam) Reset() {
	*x = AddOrUpdateProductAttributeParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOrUpdateProductAttributeParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOrUpdateProductAttributeParam) ProtoMessage() {}

func (x *AddOrUpdateProductAttributeParam) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOrUpdateProductAttributeParam.ProtoReflect.Descriptor instead.
func (*AddOrUpdateProductAttributeParam) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{35}
}

func (x *AddOrUpdateProductAttributeParam) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddOrUpdateProductAttributeParam) GetProductAttributeCategoryId() uint64 {
	if x != nil {
		return x.ProductAttributeCategoryId
	}
	return 0
}

func (x *AddOrUpdateProductAttributeParam) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *AddOrUpdateProductAttributeParam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddOrUpdateProductAttributeParam) GetSelectType() uint32 {
	if x != nil {
		return x.SelectType
	}
	return 0
}

func (x *AddOrUpdateProductAttributeParam) GetInputType() uint32 {
	if x != nil {
		return x.InputType
	}
	return 0
}

func (x *AddOrUpdateProductAttributeParam) GetInputList() string {
	if x != nil {
		return x.InputList
	}
	return ""
}

func (x *AddOrUpdateProductAttributeParam) GetSort() uint32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *AddOrUpdateProductAttributeParam) GetFilterType() uint32 {
	if x != nil {
		return x.FilterType
	}
	return 0
}

func (x *AddOrUpdateProductAttributeParam) GetSearchType() uint32 {
	if x != nil {
		return x.SearchType
	}
	return 0
}

func (x *AddOrUpdateProductAttributeParam) GetRelatedStatus() uint32 {
	if x != nil {
		return x.RelatedStatus
	}
	return 0
}

func (x *AddOrUpdateProductAttributeParam) GetHandAddStatus() uint32 {
	if x != nil {
		return x.HandAddStatus
	}
	return 0
}

// 分页查询商品属性参数
type GetProductAttributesParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                       string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                                                   // 属性名称
	ProductAttributeCategoryId *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=product_attribute_category_id,json=productAttributeCategoryId,proto3" json:"product_attribute_category_id,omitempty"` // 产品属性分类表ID
	Type                       *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`                                                                                   // 属性的类型；0->规格；1->参数
	PageNum                    uint32                  `protobuf:"varint,10,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`                                                            // 页面大小
	PageSize                   uint32                  `protobuf:"varint,11,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                                                         // 页码
}

func (x *GetProductAttributesParam) Reset() {
	*x = GetProductAttributesParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductAttributesParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductAttributesParam) ProtoMessage() {}

func (x *GetProductAttributesParam) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductAttributesParam.ProtoReflect.Descriptor instead.
func (*GetProductAttributesParam) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{36}
}

func (x *GetProductAttributesParam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetProductAttributesParam) GetProductAttributeCategoryId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ProductAttributeCategoryId
	}
	return nil
}

func (x *GetProductAttributesParam) GetType() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *GetProductAttributesParam) GetPageNum() uint32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *GetProductAttributesParam) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 分页查询商品属性参数
type ProductAttributesData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data      []*ProductAttribute `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`                             // 商品属性参数
	PageTotal uint32              `protobuf:"varint,2,opt,name=page_total,json=pageTotal,proto3" json:"page_total,omitempty"` // 数据总数
	PageSize  uint32              `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`    // 页码
	PageNum   uint32              `protobuf:"varint,4,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`       // 页面大小
}

func (x *ProductAttributesData) Reset() {
	*x = ProductAttributesData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductAttributesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductAttributesData) ProtoMessage() {}

func (x *ProductAttributesData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductAttributesData.ProtoReflect.Descriptor instead.
func (*ProductAttributesData) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{37}
}

func (x *ProductAttributesData) GetData() []*ProductAttribute {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ProductAttributesData) GetPageTotal() uint32 {
	if x != nil {
		return x.PageTotal
	}
	return 0
}

func (x *ProductAttributesData) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ProductAttributesData) GetPageNum() uint32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

type GetProductAttributesRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32                 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`      // 状态码
	Message string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // 提示信息
	Data    *ProductAttributesData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`       //
}

func (x *GetProductAttributesRsp) Reset() {
	*x = GetProductAttributesRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductAttributesRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductAttributesRsp) ProtoMessage() {}

func (x *GetProductAttributesRsp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductAttributesRsp.ProtoReflect.Descriptor instead.
func (*GetProductAttributesRsp) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{38}
}

func (x *GetProductAttributesRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetProductAttributesRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetProductAttributesRsp) GetData() *ProductAttributesData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 根据id获取商品属性参数
type GetProductAttributeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetProductAttributeReq) Reset() {
	*x = GetProductAttributeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductAttributeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductAttributeReq) ProtoMessage() {}

func (x *GetProductAttributeReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductAttributeReq.ProtoReflect.Descriptor instead.
func (*GetProductAttributeReq) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{39}
}

func (x *GetProductAttributeReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 根据id获取商品属性参数
type GetProductAttributeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`      // 状态码
	Message string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // 提示信息
	Data    *ProductAttribute `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`       // 数据
}

func (x *GetProductAttributeRsp) Reset() {
	*x = GetProductAttributeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductAttributeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductAttributeRsp) ProtoMessage() {}

func (x *GetProductAttributeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductAttributeRsp.ProtoReflect.Descriptor instead.
func (*GetProductAttributeRsp) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{40}
}

func (x *GetProductAttributeRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetProductAttributeRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetProductAttributeRsp) GetData() *ProductAttribute {
	if x != nil {
		return x.Data
	}
	return nil
}

// 删除商品属性参数
type DeleteProductAttributeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteProductAttributeReq) Reset() {
	*x = DeleteProductAttributeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProductAttributeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductAttributeReq) ProtoMessage() {}

func (x *DeleteProductAttributeReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductAttributeReq.ProtoReflect.Descriptor instead.
func (*DeleteProductAttributeReq) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{41}
}

func (x *DeleteProductAttributeReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 添加或更新商品参数
type AddOrUpdateProductParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // 主键
	// 基本信息
	ProductCategoryId uint64 `protobuf:"varint,2,opt,name=product_category_id,json=productCategoryId,proto3" json:"product_category_id,omitempty"` // 商品分类id
	Name              string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                       // 商品名称
	SubTitle          string `protobuf:"bytes,4,opt,name=sub_title,json=subTitle,proto3" json:"sub_title,omitempty"`                               // 副标题
	BrandId           uint64 `protobuf:"varint,5,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`                                 // 品牌id
	Description       string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`                                         // 商品描述
	ProductSn         string `protobuf:"bytes,7,opt,name=product_sn,json=productSn,proto3" json:"product_sn,omitempty"`                            // 货号
	Price             string `protobuf:"bytes,8,opt,name=price,proto3" json:"price,omitempty"`                                                     // 价格
	OriginalPrice     string `protobuf:"bytes,9,opt,name=original_price,json=originalPrice,proto3" json:"original_price,omitempty"`                // 市场价
	Stock             uint32 `protobuf:"varint,10,opt,name=stock,proto3" json:"stock,omitempty"`                                                   // 库存
	Unit              string `protobuf:"bytes,11,opt,name=unit,proto3" json:"unit,omitempty"`                                                      // 单位
	Weight            string `protobuf:"bytes,12,opt,name=weight,proto3" json:"weight,omitempty"`                                                  // 商品重量，默认为克
	Sort              uint32 `protobuf:"varint,13,opt,name=sort,proto3" json:"sort,omitempty"`                                                     // 排序
	// 促销信息
	GiftPoint          uint32        `protobuf:"varint,14,opt,name=gift_point,json=giftPoint,proto3" json:"gift_point,omitempty"`                                      // 赠送的积分
	GiftGrowth         uint32        `protobuf:"varint,15,opt,name=gift_growth,json=giftGrowth,proto3" json:"gift_growth,omitempty"`                                   // 赠送的成长值
	UsePointLimit      uint32        `protobuf:"varint,16,opt,name=use_point_limit,json=usePointLimit,proto3" json:"use_point_limit,omitempty"`                        // 限制使用的积分数
	PreviewStatus      uint32        `protobuf:"varint,17,opt,name=preview_status,json=previewStatus,proto3" json:"preview_status,omitempty"`                          // 是否为预告商品：0->不是；1->是
	PublishStatus      uint32        `protobuf:"varint,18,opt,name=publish_status,json=publishStatus,proto3" json:"publish_status,omitempty"`                          // 上架状态：0->下架；1->上架
	NewStatus          uint32        `protobuf:"varint,19,opt,name=new_status,json=newStatus,proto3" json:"new_status,omitempty"`                                      // 新品状态:0->不是新品；1->新品
	RecommandStatus    uint32        `protobuf:"varint,20,opt,name=recommand_status,json=recommandStatus,proto3" json:"recommand_status,omitempty"`                    // 推荐状态；0->不推荐；1->推荐
	ServiceIds         string        `protobuf:"bytes,21,opt,name=service_ids,json=serviceIds,proto3" json:"service_ids,omitempty"`                                    // 以逗号分割的产品服务：1->无忧退货；2->快速退款；3->免费包邮
	DetailTitle        string        `protobuf:"bytes,22,opt,name=detail_title,json=detailTitle,proto3" json:"detail_title,omitempty"`                                 // 详情标题
	DetailDesc         string        `protobuf:"bytes,23,opt,name=detail_desc,json=detailDesc,proto3" json:"detail_desc,omitempty"`                                    // 详情描述
	Keywords           string        `protobuf:"bytes,24,opt,name=keywords,proto3" json:"keywords,omitempty"`                                                          // 关键字
	Note               string        `protobuf:"bytes,25,opt,name=note,proto3" json:"note,omitempty"`                                                                  // 备注
	PromotionType      PromotionType `protobuf:"varint,26,opt,name=promotion_type,json=promotionType,proto3,enum=model.PromotionType" json:"promotion_type,omitempty"` // 促销类型：0->没有促销使用原价;1->使用促销价；2->使用会员价；3->使用阶梯价格；4->使用满减价格；5->限时购
	PromotionPrice     string        `protobuf:"bytes,27,opt,name=promotion_price,json=promotionPrice,proto3" json:"promotion_price,omitempty"`                        // 促销价格
	PromotionStartTime uint32        `protobuf:"varint,28,opt,name=promotion_start_time,json=promotionStartTime,proto3" json:"promotion_start_time,omitempty"`         // 促销开始时间
	PromotionEndTime   uint32        `protobuf:"varint,29,opt,name=promotion_end_time,json=promotionEndTime,proto3" json:"promotion_end_time,omitempty"`               // 促销结束时间
	// 属性信息
	ProductAttributeCategoryId uint64   `protobuf:"varint,30,opt,name=product_attribute_category_id,json=productAttributeCategoryId,proto3" json:"product_attribute_category_id,omitempty"` // 品牌属性分类id
	Pic                        string   `protobuf:"bytes,31,opt,name=pic,proto3" json:"pic,omitempty"`                                                                                      // 图片
	AlbumPics                  []string `protobuf:"bytes,32,rep,name=album_pics,json=albumPics,proto3" json:"album_pics,omitempty"`                                                         // 画册图片，连产品图片限制为5张，以逗号分割
	DetailHtml                 string   `protobuf:"bytes,33,opt,name=detail_html,json=detailHtml,proto3" json:"detail_html,omitempty"`                                                      // 电脑端详情
	DetailMobileHtml           string   `protobuf:"bytes,34,opt,name=detail_mobile_html,json=detailMobileHtml,proto3" json:"detail_mobile_html,omitempty"`                                  // 移动端详情
	// 状态
	VerifyStatus int32 `protobuf:"varint,35,opt,name=verify_status,json=verifyStatus,proto3" json:"verify_status,omitempty"` // 审核状态：0->未审核；1->审核通过
	DeleteStatus int32 `protobuf:"varint,36,opt,name=delete_status,json=deleteStatus,proto3" json:"delete_status,omitempty"` // 删除状态：0->未删除；1->已删除
	// 其他
	FeightTemplateId  uint64 `protobuf:"varint,37,opt,name=feight_template_id,json=feightTemplateId,proto3" json:"feight_template_id,omitempty"`    // 运费模版id
	Sale              uint32 `protobuf:"varint,38,opt,name=sale,proto3" json:"sale,omitempty"`                                                      // 销量
	LowStock          uint32 `protobuf:"varint,39,opt,name=low_stock,json=lowStock,proto3" json:"low_stock,omitempty"`                              // 库存预警值
	PromotionPerLimit uint32 `protobuf:"varint,40,opt,name=promotion_per_limit,json=promotionPerLimit,proto3" json:"promotion_per_limit,omitempty"` // 活动限购数量
	// 冗余字段
	BrandName           string `protobuf:"bytes,41,opt,name=brand_name,json=brandName,proto3" json:"brand_name,omitempty"`                                 // 品牌名称
	ProductCategoryName string `protobuf:"bytes,42,opt,name=product_category_name,json=productCategoryName,proto3" json:"product_category_name,omitempty"` // 商品分类名称
	// 设置
	ProductLadders                []*ProductLadder                `protobuf:"bytes,50,rep,name=product_ladders,json=productLadders,proto3" json:"product_ladders,omitempty"`                                                  // 商品阶梯价格设置
	ProductFullReductions         []*ProductFullReduction         `protobuf:"bytes,51,rep,name=product_full_reductions,json=productFullReductions,proto3" json:"product_full_reductions,omitempty"`                           // 商品满减价格设置
	MemberPrices                  []*MemberPrice                  `protobuf:"bytes,52,rep,name=member_prices,json=memberPrices,proto3" json:"member_prices,omitempty"`                                                        // 商品会员价格设置
	SkuStocks                     []*SkuStock                     `protobuf:"bytes,53,rep,name=sku_stocks,json=skuStocks,proto3" json:"sku_stocks,omitempty"`                                                                 // 商品sku库存信息
	ProductAttributeValues        []*ProductAttributeValue        `protobuf:"bytes,54,rep,name=product_attribute_values,json=productAttributeValues,proto3" json:"product_attribute_values,omitempty"`                        // 商品参数及自定义规格属性
	SubjectProductRelations       []*SubjectProductRelation       `protobuf:"bytes,55,rep,name=subject_product_relations,json=subjectProductRelations,proto3" json:"subject_product_relations,omitempty"`                     // 专题和商品关系
	PrefrenceAreaProductRelations []*PrefrenceAreaProductRelation `protobuf:"bytes,56,rep,name=prefrence_area_product_relations,json=prefrenceAreaProductRelations,proto3" json:"prefrence_area_product_relations,omitempty"` // 优选专区和商品的关系
}

func (x *AddOrUpdateProductParam) Reset() {
	*x = AddOrUpdateProductParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOrUpdateProductParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOrUpdateProductParam) ProtoMessage() {}

func (x *AddOrUpdateProductParam) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOrUpdateProductParam.ProtoReflect.Descriptor instead.
func (*AddOrUpdateProductParam) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{42}
}

func (x *AddOrUpdateProductParam) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddOrUpdateProductParam) GetProductCategoryId() uint64 {
	if x != nil {
		return x.ProductCategoryId
	}
	return 0
}

func (x *AddOrUpdateProductParam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddOrUpdateProductParam) GetSubTitle() string {
	if x != nil {
		return x.SubTitle
	}
	return ""
}

func (x *AddOrUpdateProductParam) GetBrandId() uint64 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *AddOrUpdateProductParam) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddOrUpdateProductParam) GetProductSn() string {
	if x != nil {
		return x.ProductSn
	}
	return ""
}

func (x *AddOrUpdateProductParam) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *AddOrUpdateProductParam) GetOriginalPrice() string {
	if x != nil {
		return x.OriginalPrice
	}
	return ""
}

func (x *AddOrUpdateProductParam) GetStock() uint32 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *AddOrUpdateProductParam) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *AddOrUpdateProductParam) GetWeight() string {
	if x != nil {
		return x.Weight
	}
	return ""
}

func (x *AddOrUpdateProductParam) GetSort() uint32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *AddOrUpdateProductParam) GetGiftPoint() uint32 {
	if x != nil {
		return x.GiftPoint
	}
	return 0
}

func (x *AddOrUpdateProductParam) GetGiftGrowth() uint32 {
	if x != nil {
		return x.GiftGrowth
	}
	return 0
}

func (x *AddOrUpdateProductParam) GetUsePointLimit() uint32 {
	if x != nil {
		return x.UsePointLimit
	}
	return 0
}

func (x *AddOrUpdateProductParam) GetPreviewStatus() uint32 {
	if x != nil {
		return x.PreviewStatus
	}
	return 0
}

func (x *AddOrUpdateProductParam) GetPublishStatus() uint32 {
	if x != nil {
		return x.PublishStatus
	}
	return 0
}

func (x *AddOrUpdateProductParam) GetNewStatus() uint32 {
	if x != nil {
		return x.NewStatus
	}
	return 0
}

func (x *AddOrUpdateProductParam) GetRecommandStatus() uint32 {
	if x != nil {
		return x.RecommandStatus
	}
	return 0
}

func (x *AddOrUpdateProductParam) GetServiceIds() string {
	if x != nil {
		return x.ServiceIds
	}
	return ""
}

func (x *AddOrUpdateProductParam) GetDetailTitle() string {
	if x != nil {
		return x.DetailTitle
	}
	return ""
}

func (x *AddOrUpdateProductParam) GetDetailDesc() string {
	if x != nil {
		return x.DetailDesc
	}
	return ""
}

func (x *AddOrUpdateProductParam) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *AddOrUpdateProductParam) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *AddOrUpdateProductParam) GetPromotionType() PromotionType {
	if x != nil {
		return x.PromotionType
	}
	return PromotionType_PROMOTION_TYPE_NONE
}

func (x *AddOrUpdateProductParam) GetPromotionPrice() string {
	if x != nil {
		return x.PromotionPrice
	}
	return ""
}

func (x *AddOrUpdateProductParam) GetPromotionStartTime() uint32 {
	if x != nil {
		return x.PromotionStartTime
	}
	return 0
}

func (x *AddOrUpdateProductParam) GetPromotionEndTime() uint32 {
	if x != nil {
		return x.PromotionEndTime
	}
	return 0
}

func (x *AddOrUpdateProductParam) GetProductAttributeCategoryId() uint64 {
	if x != nil {
		return x.ProductAttributeCategoryId
	}
	return 0
}

func (x *AddOrUpdateProductParam) GetPic() string {
	if x != nil {
		return x.Pic
	}
	return ""
}

func (x *AddOrUpdateProductParam) GetAlbumPics() []string {
	if x != nil {
		return x.AlbumPics
	}
	return nil
}

func (x *AddOrUpdateProductParam) GetDetailHtml() string {
	if x != nil {
		return x.DetailHtml
	}
	return ""
}

func (x *AddOrUpdateProductParam) GetDetailMobileHtml() string {
	if x != nil {
		return x.DetailMobileHtml
	}
	return ""
}

func (x *AddOrUpdateProductParam) GetVerifyStatus() int32 {
	if x != nil {
		return x.VerifyStatus
	}
	return 0
}

func (x *AddOrUpdateProductParam) GetDeleteStatus() int32 {
	if x != nil {
		return x.DeleteStatus
	}
	return 0
}

func (x *AddOrUpdateProductParam) GetFeightTemplateId() uint64 {
	if x != nil {
		return x.FeightTemplateId
	}
	return 0
}

func (x *AddOrUpdateProductParam) GetSale() uint32 {
	if x != nil {
		return x.Sale
	}
	return 0
}

func (x *AddOrUpdateProductParam) GetLowStock() uint32 {
	if x != nil {
		return x.LowStock
	}
	return 0
}

func (x *AddOrUpdateProductParam) GetPromotionPerLimit() uint32 {
	if x != nil {
		return x.PromotionPerLimit
	}
	return 0
}

func (x *AddOrUpdateProductParam) GetBrandName() string {
	if x != nil {
		return x.BrandName
	}
	return ""
}

func (x *AddOrUpdateProductParam) GetProductCategoryName() string {
	if x != nil {
		return x.ProductCategoryName
	}
	return ""
}

func (x *AddOrUpdateProductParam) GetProductLadders() []*ProductLadder {
	if x != nil {
		return x.ProductLadders
	}
	return nil
}

func (x *AddOrUpdateProductParam) GetProductFullReductions() []*ProductFullReduction {
	if x != nil {
		return x.ProductFullReductions
	}
	return nil
}

func (x *AddOrUpdateProductParam) GetMemberPrices() []*MemberPrice {
	if x != nil {
		return x.MemberPrices
	}
	return nil
}

func (x *AddOrUpdateProductParam) GetSkuStocks() []*SkuStock {
	if x != nil {
		return x.SkuStocks
	}
	return nil
}

func (x *AddOrUpdateProductParam) GetProductAttributeValues() []*ProductAttributeValue {
	if x != nil {
		return x.ProductAttributeValues
	}
	return nil
}

func (x *AddOrUpdateProductParam) GetSubjectProductRelations() []*SubjectProductRelation {
	if x != nil {
		return x.SubjectProductRelations
	}
	return nil
}

func (x *AddOrUpdateProductParam) GetPrefrenceAreaProductRelations() []*PrefrenceAreaProductRelation {
	if x != nil {
		return x.PrefrenceAreaProductRelations
	}
	return nil
}

// 分页查询商品
type GetProductsParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                *wrapperspb.UInt64Value `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                          // 主键
	Name              string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                      // 商品名称
	ProductSn         string                  `protobuf:"bytes,3,opt,name=product_sn,json=productSn,proto3" json:"product_sn,omitempty"`                           // 货号
	BrandId           *wrapperspb.UInt64Value `protobuf:"bytes,4,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`                                 // 商品品牌
	PublishStatus     *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=publish_status,json=publishStatus,proto3" json:"publish_status,omitempty"`               // 上架状态
	VerifyStatus      *wrapperspb.UInt32Value `protobuf:"bytes,6,opt,name=verify_status,json=verifyStatus,proto3" json:"verify_status,omitempty"`                  // 审核状态
	ProductCategoryId *wrapperspb.UInt64Value `protobuf:"bytes,7,opt,name=product_category_id,json=productCategoryId,proto3" json:"product_category_id,omitempty"` // 商品分类id
	PageNum           uint32                  `protobuf:"varint,10,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`                               // 页面大小
	PageSize          uint32                  `protobuf:"varint,11,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                            // 页码
}

func (x *GetProductsParam) Reset() {
	*x = GetProductsParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductsParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductsParam) ProtoMessage() {}

func (x *GetProductsParam) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductsParam.ProtoReflect.Descriptor instead.
func (*GetProductsParam) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{43}
}

func (x *GetProductsParam) GetId() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GetProductsParam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetProductsParam) GetProductSn() string {
	if x != nil {
		return x.ProductSn
	}
	return ""
}

func (x *GetProductsParam) GetBrandId() *wrapperspb.UInt64Value {
	if x != nil {
		return x.BrandId
	}
	return nil
}

func (x *GetProductsParam) GetPublishStatus() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PublishStatus
	}
	return nil
}

func (x *GetProductsParam) GetVerifyStatus() *wrapperspb.UInt32Value {
	if x != nil {
		return x.VerifyStatus
	}
	return nil
}

func (x *GetProductsParam) GetProductCategoryId() *wrapperspb.UInt64Value {
	if x != nil {
		return x.ProductCategoryId
	}
	return nil
}

func (x *GetProductsParam) GetPageNum() uint32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *GetProductsParam) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 分页查询商品
type ProductsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data      []*Product `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`                             // 商品
	PageTotal uint32     `protobuf:"varint,2,opt,name=page_total,json=pageTotal,proto3" json:"page_total,omitempty"` // 数据总数
	PageSize  uint32     `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`    // 页码
	PageNum   uint32     `protobuf:"varint,4,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`       // 页面大小
}

func (x *ProductsData) Reset() {
	*x = ProductsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductsData) ProtoMessage() {}

func (x *ProductsData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductsData.ProtoReflect.Descriptor instead.
func (*ProductsData) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{44}
}

func (x *ProductsData) GetData() []*Product {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ProductsData) GetPageTotal() uint32 {
	if x != nil {
		return x.PageTotal
	}
	return 0
}

func (x *ProductsData) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ProductsData) GetPageNum() uint32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

type GetProductsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`      // 状态码
	Message string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // 提示信息
	Data    *ProductsData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`       //
}

func (x *GetProductsRsp) Reset() {
	*x = GetProductsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductsRsp) ProtoMessage() {}

func (x *GetProductsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductsRsp.ProtoReflect.Descriptor instead.
func (*GetProductsRsp) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{45}
}

func (x *GetProductsRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetProductsRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetProductsRsp) GetData() *ProductsData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 根据id获取商品
type GetProductReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetProductReq) Reset() {
	*x = GetProductReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductReq) ProtoMessage() {}

func (x *GetProductReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductReq.ProtoReflect.Descriptor instead.
func (*GetProductReq) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{46}
}

func (x *GetProductReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 根据id获取商品
type GetProductRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`      // 状态码
	Message string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // 提示信息
	Data    *Product `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`       // 数据
}

func (x *GetProductRsp) Reset() {
	*x = GetProductRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductRsp) ProtoMessage() {}

func (x *GetProductRsp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductRsp.ProtoReflect.Descriptor instead.
func (*GetProductRsp) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{47}
}

func (x *GetProductRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetProductRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetProductRsp) GetData() *Product {
	if x != nil {
		return x.Data
	}
	return nil
}

// 删除商品
type DeleteProductReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteProductReq) Reset() {
	*x = DeleteProductReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProductReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProductReq) ProtoMessage() {}

func (x *DeleteProductReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProductReq.ProtoReflect.Descriptor instead.
func (*DeleteProductReq) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{48}
}

func (x *DeleteProductReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// START ======================================= 专题 ======================================= START
// 添加或更新专题表参数
type AddOrUpdateSubjectParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // 主键
}

func (x *AddOrUpdateSubjectParam) Reset() {
	*x = AddOrUpdateSubjectParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOrUpdateSubjectParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOrUpdateSubjectParam) ProtoMessage() {}

func (x *AddOrUpdateSubjectParam) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOrUpdateSubjectParam.ProtoReflect.Descriptor instead.
func (*AddOrUpdateSubjectParam) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{49}
}

func (x *AddOrUpdateSubjectParam) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 分页查询专题表
type GetSubjectsParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum  uint32 `protobuf:"varint,10,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`    // 页面大小
	PageSize uint32 `protobuf:"varint,11,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 页码
}

func (x *GetSubjectsParam) Reset() {
	*x = GetSubjectsParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubjectsParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubjectsParam) ProtoMessage() {}

func (x *GetSubjectsParam) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubjectsParam.ProtoReflect.Descriptor instead.
func (*GetSubjectsParam) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{50}
}

func (x *GetSubjectsParam) GetPageNum() uint32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *GetSubjectsParam) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 分页查询专题表
type SubjectsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data      []*Subject `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`                             // 专题表
	PageTotal uint32     `protobuf:"varint,2,opt,name=page_total,json=pageTotal,proto3" json:"page_total,omitempty"` // 数据总数
	PageSize  uint32     `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`    // 页码
	PageNum   uint32     `protobuf:"varint,4,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`       // 页面大小
}

func (x *SubjectsData) Reset() {
	*x = SubjectsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubjectsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubjectsData) ProtoMessage() {}

func (x *SubjectsData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubjectsData.ProtoReflect.Descriptor instead.
func (*SubjectsData) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{51}
}

func (x *SubjectsData) GetData() []*Subject {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SubjectsData) GetPageTotal() uint32 {
	if x != nil {
		return x.PageTotal
	}
	return 0
}

func (x *SubjectsData) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SubjectsData) GetPageNum() uint32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

type GetSubjectsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`      // 状态码
	Message string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // 提示信息
	Data    *SubjectsData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`       //
}

func (x *GetSubjectsRsp) Reset() {
	*x = GetSubjectsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubjectsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubjectsRsp) ProtoMessage() {}

func (x *GetSubjectsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubjectsRsp.ProtoReflect.Descriptor instead.
func (*GetSubjectsRsp) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{52}
}

func (x *GetSubjectsRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetSubjectsRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetSubjectsRsp) GetData() *SubjectsData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 根据id获取专题表
type GetSubjectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSubjectReq) Reset() {
	*x = GetSubjectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubjectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubjectReq) ProtoMessage() {}

func (x *GetSubjectReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubjectReq.ProtoReflect.Descriptor instead.
func (*GetSubjectReq) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{53}
}

func (x *GetSubjectReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 根据id获取专题表
type GetSubjectRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`      // 状态码
	Message string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // 提示信息
	Data    *Subject `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`       // 数据
}

func (x *GetSubjectRsp) Reset() {
	*x = GetSubjectRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubjectRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubjectRsp) ProtoMessage() {}

func (x *GetSubjectRsp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubjectRsp.ProtoReflect.Descriptor instead.
func (*GetSubjectRsp) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{54}
}

func (x *GetSubjectRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetSubjectRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetSubjectRsp) GetData() *Subject {
	if x != nil {
		return x.Data
	}
	return nil
}

// 删除专题表
type DeleteSubjectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteSubjectReq) Reset() {
	*x = DeleteSubjectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubjectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubjectReq) ProtoMessage() {}

func (x *DeleteSubjectReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubjectReq.ProtoReflect.Descriptor instead.
func (*DeleteSubjectReq) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{55}
}

func (x *DeleteSubjectReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// START ======================================= json配置 ======================================= START
// 添加或更新JSON动态配置参数
type AddOrUpdateJsonDynamicConfigParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                  // 主键
	BizType    string `protobuf:"bytes,2,opt,name=biz_type,json=bizType,proto3" json:"biz_type,omitempty"`          // 业务类型
	BizDesc    string `protobuf:"bytes,3,opt,name=biz_desc,json=bizDesc,proto3" json:"biz_desc,omitempty"`          // 业务描述
	Content    string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`                         // 内容
	JsonSchema string `protobuf:"bytes,5,opt,name=json_schema,json=jsonSchema,proto3" json:"json_schema,omitempty"` // json内容约束
}

func (x *AddOrUpdateJsonDynamicConfigParam) Reset() {
	*x = AddOrUpdateJsonDynamicConfigParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOrUpdateJsonDynamicConfigParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOrUpdateJsonDynamicConfigParam) ProtoMessage() {}

func (x *AddOrUpdateJsonDynamicConfigParam) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOrUpdateJsonDynamicConfigParam.ProtoReflect.Descriptor instead.
func (*AddOrUpdateJsonDynamicConfigParam) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{56}
}

func (x *AddOrUpdateJsonDynamicConfigParam) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddOrUpdateJsonDynamicConfigParam) GetBizType() string {
	if x != nil {
		return x.BizType
	}
	return ""
}

func (x *AddOrUpdateJsonDynamicConfigParam) GetBizDesc() string {
	if x != nil {
		return x.BizDesc
	}
	return ""
}

func (x *AddOrUpdateJsonDynamicConfigParam) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AddOrUpdateJsonDynamicConfigParam) GetJsonSchema() string {
	if x != nil {
		return x.JsonSchema
	}
	return ""
}

// 分页查询JSON动态配置
type GetJsonDynamicConfigsParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum  uint32 `protobuf:"varint,10,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`    // 页面大小
	PageSize uint32 `protobuf:"varint,11,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 页码
}

func (x *GetJsonDynamicConfigsParam) Reset() {
	*x = GetJsonDynamicConfigsParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJsonDynamicConfigsParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJsonDynamicConfigsParam) ProtoMessage() {}

func (x *GetJsonDynamicConfigsParam) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJsonDynamicConfigsParam.ProtoReflect.Descriptor instead.
func (*GetJsonDynamicConfigsParam) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{57}
}

func (x *GetJsonDynamicConfigsParam) GetPageNum() uint32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *GetJsonDynamicConfigsParam) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 分页查询JSON动态配置
type JsonDynamicConfigsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data      []*JsonDynamicConfig `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`                             // JSON动态配置
	PageTotal uint32               `protobuf:"varint,2,opt,name=page_total,json=pageTotal,proto3" json:"page_total,omitempty"` // 数据总数
	PageSize  uint32               `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`    // 页码
	PageNum   uint32               `protobuf:"varint,4,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`       // 页面大小
}

func (x *JsonDynamicConfigsData) Reset() {
	*x = JsonDynamicConfigsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JsonDynamicConfigsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonDynamicConfigsData) ProtoMessage() {}

func (x *JsonDynamicConfigsData) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonDynamicConfigsData.ProtoReflect.Descriptor instead.
func (*JsonDynamicConfigsData) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{58}
}

func (x *JsonDynamicConfigsData) GetData() []*JsonDynamicConfig {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *JsonDynamicConfigsData) GetPageTotal() uint32 {
	if x != nil {
		return x.PageTotal
	}
	return 0
}

func (x *JsonDynamicConfigsData) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *JsonDynamicConfigsData) GetPageNum() uint32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

type GetJsonDynamicConfigsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`      // 状态码
	Message string                  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // 提示信息
	Data    *JsonDynamicConfigsData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`       //
}

func (x *GetJsonDynamicConfigsRsp) Reset() {
	*x = GetJsonDynamicConfigsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJsonDynamicConfigsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJsonDynamicConfigsRsp) ProtoMessage() {}

func (x *GetJsonDynamicConfigsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJsonDynamicConfigsRsp.ProtoReflect.Descriptor instead.
func (*GetJsonDynamicConfigsRsp) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{59}
}

func (x *GetJsonDynamicConfigsRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetJsonDynamicConfigsRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetJsonDynamicConfigsRsp) GetData() *JsonDynamicConfigsData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 根据id获取JSON动态配置
type GetJsonDynamicConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetJsonDynamicConfigReq) Reset() {
	*x = GetJsonDynamicConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJsonDynamicConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJsonDynamicConfigReq) ProtoMessage() {}

func (x *GetJsonDynamicConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJsonDynamicConfigReq.ProtoReflect.Descriptor instead.
func (*GetJsonDynamicConfigReq) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{60}
}

func (x *GetJsonDynamicConfigReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 根据id获取JSON动态配置
type GetJsonDynamicConfigRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`      // 状态码
	Message string             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // 提示信息
	Data    *JsonDynamicConfig `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`       // 数据
}

func (x *GetJsonDynamicConfigRsp) Reset() {
	*x = GetJsonDynamicConfigRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJsonDynamicConfigRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJsonDynamicConfigRsp) ProtoMessage() {}

func (x *GetJsonDynamicConfigRsp) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJsonDynamicConfigRsp.ProtoReflect.Descriptor instead.
func (*GetJsonDynamicConfigRsp) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{61}
}

func (x *GetJsonDynamicConfigRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetJsonDynamicConfigRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetJsonDynamicConfigRsp) GetData() *JsonDynamicConfig {
	if x != nil {
		return x.Data
	}
	return nil
}

// 删除JSON动态配置
type DeleteJsonDynamicConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteJsonDynamicConfigReq) Reset() {
	*x = DeleteJsonDynamicConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_cms_admin_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteJsonDynamicConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteJsonDynamicConfigReq) ProtoMessage() {}

func (x *DeleteJsonDynamicConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_admin_cms_admin_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteJsonDynamicConfigReq.ProtoReflect.Descriptor instead.
func (*DeleteJsonDynamicConfigReq) Descriptor() ([]byte, []int) {
	return file_admin_cms_admin_proto_rawDescGZIP(), []int{62}
}

func (x *DeleteJsonDynamicConfigReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

var File_admin_cms_admin_proto protoreflect.FileDescriptor

var file_admin_cms_admin_proto_rawDesc = []byte{
	0x0a, 0x15, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x63, 0x6d, 0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x1a, 0x17,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f,
	0x70, 0x6d, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2f, 0x70, 0x6d, 0x73, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x6d, 0x73, 0x5f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x6d, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x6d, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2f, 0x70, 0x6d, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6c, 0x61, 0x64,
	0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2f, 0x70, 0x6d, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x66, 0x75, 0x6c,
	0x6c, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x6d, 0x73, 0x5f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x6d, 0x73, 0x5f, 0x73, 0x6b, 0x75, 0x5f, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2f, 0x70, 0x6d, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x63, 0x6d, 0x73, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x63, 0x6d, 0x73, 0x5f,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x63, 0x6d, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x63,
	0x6d, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x65,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x63,
	0x6d, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf8, 0x02, 0x0a,
	0x1f, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x28, 0x0a,
	0x0a, 0x6e, 0x61, 0x76, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x30, 0x00, 0x30, 0x01, 0x52, 0x09, 0x6e, 0x61,
	0x76, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0xfa, 0x42,
	0x06, 0x2a, 0x04, 0x30, 0x00, 0x30, 0x01, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x00, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x49, 0x64, 0x73, 0x22, 0x27, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x71, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xd0, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x39, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0x9a, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x22, 0x79, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2a,
	0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x25, 0x0a, 0x23, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x22, 0x81, 0x01, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x65, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x32, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x32, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x87, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x54, 0x72, 0x65, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xb9, 0x02, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x72, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x00,
	0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x30, 0x0a, 0x0e, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x2a, 0x04, 0x30, 0x00, 0x30, 0x01, 0x52, 0x0d, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0xfa,
	0x42, 0x06, 0x2a, 0x04, 0x30, 0x00, 0x30, 0x01, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6c, 0x6f, 0x67,
	0x6f, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x69, 0x67, 0x5f, 0x70, 0x69, 0x63, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x62, 0x69, 0x67, 0x50, 0x69, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x72,
	0x61, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xad, 0x01, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x24,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x00, 0x52,
	0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0b,
	0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x66, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x88, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0x1d,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5d, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x20, 0x0a, 0x0e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x57,
	0x0a, 0x28, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x1e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0x70, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0x8b, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x30, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x33,
	0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x72, 0x0a, 0x18, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x26, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x28, 0x00, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x0a, 0x73, 0x6b, 0x75, 0x5f, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x09, 0x73, 0x6b,
	0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x61, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x6b,
	0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x26, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x32, 0x02, 0x28, 0x00, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x6b, 0x75, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x6b, 0x75, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x34, 0x0a, 0x0d, 0x53, 0x6b,
	0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x74, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73,
	0x42, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x52, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2f, 0x0a, 0x1d, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72,
	0x65, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x62, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x73, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x22, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x00, 0x52, 0x07, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28,
	0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x12,
	0x50, 0x72, 0x65, 0x66, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x22, 0x73, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x73, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x50, 0x72, 0x65, 0x66, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x25, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x6d, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41,
	0x72, 0x65, 0x61, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x28,
	0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x84, 0x04, 0x0a, 0x20, 0x41, 0x64, 0x64,
	0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4a, 0x0a,
	0x1d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x1a, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x30, 0x00,
	0x30, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x2a,
	0x06, 0x30, 0x00, 0x30, 0x01, 0x30, 0x02, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x30, 0x00,
	0x30, 0x01, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x12, 0x2a, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x30, 0x00, 0x30, 0x01,
	0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x0b,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x2a, 0x06, 0x30, 0x00, 0x30, 0x01, 0x30, 0x02, 0x52, 0x0a,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x0e, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x30, 0x00, 0x30, 0x01, 0x52, 0x0d, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x0f,
	0x68, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x30, 0x00, 0x30, 0x01,
	0x52, 0x0d, 0x68, 0x61, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x8c, 0x02, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x5f, 0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x00, 0x52,
	0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x2a, 0x02, 0x28, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x9b,
	0x01, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0x79, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x28, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x73, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xe1, 0x0f, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x69, 0x66, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x67, 0x69, 0x66, 0x74, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x12,
	0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x1a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x69, 0x63, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x63, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x5f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x20, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x50, 0x69, 0x63, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x48, 0x74, 0x6d, 0x6c, 0x12,
	0x2c, 0x0a, 0x12, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x48, 0x74, 0x6d, 0x6c, 0x12, 0x23, 0x0a,
	0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x10, 0x66, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x65, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x77,
	0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x6f,
	0x77, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x6c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x73, 0x18, 0x32, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4c, 0x61, 0x64, 0x64, 0x65, 0x72, 0x73, 0x12, 0x53, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x33, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46,
	0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a,
	0x0d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x34,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x73, 0x6b, 0x75, 0x5f, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x73, 0x18, 0x35, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x09, 0x73, 0x6b, 0x75,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x56, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x36, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x59,
	0x0a, 0x19, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x37, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x17, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6c, 0x0a, 0x20, 0x70, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x38, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1d, 0x70, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xcc, 0x03, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2c, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x6e, 0x12, 0x37, 0x0a,
	0x08, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x62,
	0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4c,
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x00, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x12, 0x24, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x00, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x22, 0x67, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x1f, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x61, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x22, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x29, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5c,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x22, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x00, 0x52, 0x07, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02,
	0x28, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x89, 0x01, 0x0a,
	0x0c, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0x67, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x1f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x61, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x22, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa4, 0x01, 0x0a, 0x21, 0x41, 0x64,
	0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x73, 0x6f, 0x6e, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x69,
	0x7a, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x69,
	0x7a, 0x44, 0x65, 0x73, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x22, 0x66, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x22,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x00, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x00, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x16, 0x4a, 0x73, 0x6f,
	0x6e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0x7b, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4a,
	0x73, 0x6f, 0x6e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x29, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4a, 0x73, 0x6f, 0x6e,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x75, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x4a, 0x73, 0x6f, 0x6e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2c, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4a, 0x73, 0x6f, 0x6e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x32, 0xdd, 0x24, 0x0a, 0x0b, 0x43, 0x6d, 0x73, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x41, 0x70, 0x69, 0x12, 0x69, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x26,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x10, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10,
	0x3a, 0x01, 0x2a, 0x22, 0x0b, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x6e, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x26, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x1a, 0x10, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x73, 0x70, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x1a, 0x10,
	0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0x6d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x1e, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x73, 0x70, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x6a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x73,
	0x70, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x64, 0x0a, 0x15, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x2a,
	0x10, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0xa3, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x2a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x27,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x54, 0x72, 0x65, 0x65, 0x12, 0x51, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x1c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41,
	0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x1a, 0x10, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x3a, 0x01,
	0x2a, 0x22, 0x07, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x56, 0x0a, 0x0b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x1c, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x10, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x11, 0x3a, 0x01, 0x2a, 0x1a, 0x0c, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0x48, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x12,
	0x15, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x13, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x73, 0x70, 0x22, 0x0f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x09, 0x12, 0x07, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x48, 0x0a, 0x08,
	0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x73, 0x70,
	0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x64,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x4c, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x15, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x14,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x2a, 0x0c, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x12, 0x8b, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x10, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x90, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64,
	0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x10, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25,
	0x3a, 0x01, 0x2a, 0x1a, 0x20, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x98, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x1a, 0x27, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x73, 0x70, 0x22, 0x23, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x95, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x25, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x73, 0x70, 0x22, 0x28,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x86, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x28, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x2a,
	0x20, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0x72, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x1a, 0x10, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01,
	0x2a, 0x22, 0x12, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x77, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x27, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x10, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x1a, 0x17, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x74,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x1e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x73, 0x70, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14,
	0x12, 0x12, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x74, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x73, 0x70, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x19, 0x12, 0x17, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x6d, 0x0a, 0x16, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19,
	0x2a, 0x17, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x57, 0x0a, 0x0d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1e, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x10, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x14, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0e, 0x3a, 0x01, 0x2a, 0x22, 0x09, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x12, 0x5c, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x12, 0x1e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x4f,
	0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x1a, 0x10, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x3a, 0x01, 0x2a,
	0x1a, 0x0e, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0x50, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12,
	0x17, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x15, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x73, 0x70, 0x22,
	0x11, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12, 0x09, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x12, 0x50, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x12, 0x14, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x73, 0x70, 0x22, 0x16, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x12, 0x52, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x17, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x10,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70,
	0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x2a, 0x0e, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x7d, 0x0a, 0x13, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12,
	0x1f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x1a, 0x10, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x73, 0x70, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x1a, 0x28, 0x2f,
	0x73, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x8e, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53,
	0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x23, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x21, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x42, 0x79, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x52, 0x73, 0x70, 0x22, 0x2b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x73, 0x6b, 0x75, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x2f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x79, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x10, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x14, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0e, 0x3a, 0x01, 0x2a, 0x22, 0x09, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x12, 0x5c, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x1e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x1a, 0x10, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x73, 0x70, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x3a, 0x01, 0x2a, 0x1a,
	0x0e, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0x50, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x17,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x15, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x73, 0x70, 0x22, 0x11,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12, 0x09, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x12, 0x50, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x14, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x73, 0x70, 0x22, 0x16, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0x52, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x17, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22,
	0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x2a, 0x0e, 0x2f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x69, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x65, 0x66, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x24,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x1a, 0x10, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a, 0x01,
	0x2a, 0x22, 0x0f, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x65,
	0x61, 0x73, 0x12, 0x6e, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x24, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a,
	0x10, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73,
	0x70, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x1a, 0x14, 0x2f, 0x70,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0x68, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x73, 0x12, 0x1d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61,
	0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x1b, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x73,
	0x52, 0x73, 0x70, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x70, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x73, 0x12, 0x68, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61,
	0x12, 0x1a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x73, 0x70, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16,
	0x12, 0x14, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x64, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x65, 0x66, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x12, 0x1d, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x1c,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x2a, 0x14, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x41, 0x72, 0x65, 0x61, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x75, 0x0a, 0x17,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x73, 0x6f, 0x6e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x28, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x73, 0x6f, 0x6e, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x1a, 0x10, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x73, 0x70, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13,
	0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x12, 0x7a, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x73, 0x6f,
	0x6e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x28,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4a, 0x73, 0x6f, 0x6e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x10, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x1a, 0x18, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0x78, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x21, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x47, 0x65, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x1f, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x73, 0x70, 0x22, 0x1b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x78, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x4a, 0x73, 0x6f, 0x6e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x1e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x73, 0x6f,
	0x6e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x1a, 0x1e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x73, 0x6f,
	0x6e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x73,
	0x70, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x6a, 0x73, 0x6f, 0x6e,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0x70, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x73, 0x6f,
	0x6e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x73, 0x6f,
	0x6e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x1a, 0x10, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x73, 0x70, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x2a, 0x18, 0x2f, 0x6a, 0x73,
	0x6f, 0x6e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x3b, 0x6d, 0x61, 0x6c, 0x6c, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_admin_cms_admin_proto_rawDescOnce sync.Once
	file_admin_cms_admin_proto_rawDescData = file_admin_cms_admin_proto_rawDesc
)

func file_admin_cms_admin_proto_rawDescGZIP() []byte {
	file_admin_cms_admin_proto_rawDescOnce.Do(func() {
		file_admin_cms_admin_proto_rawDescData = protoimpl.X.CompressGZIP(file_admin_cms_admin_proto_rawDescData)
	})
	return file_admin_cms_admin_proto_rawDescData
}

var file_admin_cms_admin_proto_msgTypes = make([]protoimpl.MessageInfo, 63)
var file_admin_cms_admin_proto_goTypes = []interface{}{
	(*AddOrUpdateProductCategoryParam)(nil),          // 0: admin.AddOrUpdateProductCategoryParam
	(*GetProductCategoryReq)(nil),                    // 1: admin.GetProductCategoryReq
	(*GetProductCategoryRsp)(nil),                    // 2: admin.GetProductCategoryRsp
	(*GetProductCategoriesParam)(nil),                // 3: admin.GetProductCategoriesParam
	(*ProductCategoriesData)(nil),                    // 4: admin.ProductCategoriesData
	(*GetProductCategoriesRsp)(nil),                  // 5: admin.GetProductCategoriesRsp
	(*DeleteProductCategoryReq)(nil),                 // 6: admin.DeleteProductCategoryReq
	(*GetProductCategoriesWithChildrenReq)(nil),      // 7: admin.GetProductCategoriesWithChildrenReq
	(*ProductCategoryTreeItem)(nil),                  // 8: admin.ProductCategoryTreeItem
	(*GetProductCategoriesWithChildrenRsp)(nil),      // 9: admin.GetProductCategoriesWithChildrenRsp
	(*AddOrUpdateBrandParam)(nil),                    // 10: admin.AddOrUpdateBrandParam
	(*GetBrandsParam)(nil),                           // 11: admin.GetBrandsParam
	(*GetBrandsRsp)(nil),                             // 12: admin.GetBrandsRsp
	(*GetBrandsData)(nil),                            // 13: admin.GetBrandsData
	(*GetBrandReq)(nil),                              // 14: admin.GetBrandReq
	(*GetBrandRsp)(nil),                              // 15: admin.GetBrandRsp
	(*DeleteBrandReq)(nil),                           // 16: admin.DeleteBrandReq
	(*AddOrUpdateProductAttributeCategoryParam)(nil), // 17: admin.AddOrUpdateProductAttributeCategoryParam
	(*ProductAttributeCategoriesData)(nil),           // 18: admin.ProductAttributeCategoriesData
	(*GetProductAttributeCategoriesParam)(nil),       // 19: admin.GetProductAttributeCategoriesParam
	(*GetProductAttributeCategoriesRsp)(nil),         // 20: admin.GetProductAttributeCategoriesRsp
	(*GetProductAttributeCategoryReq)(nil),           // 21: admin.GetProductAttributeCategoryReq
	(*GetProductAttributeCategoryRsp)(nil),           // 22: admin.GetProductAttributeCategoryRsp
	(*DeleteProductAttributeCategoryReq)(nil),        // 23: admin.DeleteProductAttributeCategoryReq
	(*BatchUpdateSkuStockParam)(nil),                 // 24: admin.BatchUpdateSkuStockParam
	(*GetSkuStocksByProductIdParam)(nil),             // 25: admin.GetSkuStocksByProductIdParam
	(*SkuStocksData)(nil),                            // 26: admin.SkuStocksData
	(*GetSkuStocksByProductIdRsp)(nil),               // 27: admin.GetSkuStocksByProductIdRsp
	(*AddOrUpdatePrefrenceAreaParam)(nil),            // 28: admin.AddOrUpdatePrefrenceAreaParam
	(*GetPrefrenceAreasParam)(nil),                   // 29: admin.GetPrefrenceAreasParam
	(*PrefrenceAreasData)(nil),                       // 30: admin.PrefrenceAreasData
	(*GetPrefrenceAreasRsp)(nil),                     // 31: admin.GetPrefrenceAreasRsp
	(*GetPrefrenceAreaReq)(nil),                      // 32: admin.GetPrefrenceAreaReq
	(*GetPrefrenceAreaRsp)(nil),                      // 33: admin.GetPrefrenceAreaRsp
	(*DeletePrefrenceAreaReq)(nil),                   // 34: admin.DeletePrefrenceAreaReq
	(*AddOrUpdateProductAttributeParam)(nil),         // 35: admin.AddOrUpdateProductAttributeParam
	(*GetProductAttributesParam)(nil),                // 36: admin.GetProductAttributesParam
	(*ProductAttributesData)(nil),                    // 37: admin.ProductAttributesData
	(*GetProductAttributesRsp)(nil),                  // 38: admin.GetProductAttributesRsp
	(*GetProductAttributeReq)(nil),                   // 39: admin.GetProductAttributeReq
	(*GetProductAttributeRsp)(nil),                   // 40: admin.GetProductAttributeRsp
	(*DeleteProductAttributeReq)(nil),                // 41: admin.DeleteProductAttributeReq
	(*AddOrUpdateProductParam)(nil),                  // 42: admin.AddOrUpdateProductParam
	(*GetProductsParam)(nil),                         // 43: admin.GetProductsParam
	(*ProductsData)(nil),                             // 44: admin.ProductsData
	(*GetProductsRsp)(nil),                           // 45: admin.GetProductsRsp
	(*GetProductReq)(nil),                            // 46: admin.GetProductReq
	(*GetProductRsp)(nil),                            // 47: admin.GetProductRsp
	(*DeleteProductReq)(nil),                         // 48: admin.DeleteProductReq
	(*AddOrUpdateSubjectParam)(nil),                  // 49: admin.AddOrUpdateSubjectParam
	(*GetSubjectsParam)(nil),                         // 50: admin.GetSubjectsParam
	(*SubjectsData)(nil),                             // 51: admin.SubjectsData
	(*GetSubjectsRsp)(nil),                           // 52: admin.GetSubjectsRsp
	(*GetSubjectReq)(nil),                            // 53: admin.GetSubjectReq
	(*GetSubjectRsp)(nil),                            // 54: admin.GetSubjectRsp
	(*DeleteSubjectReq)(nil),                         // 55: admin.DeleteSubjectReq
	(*AddOrUpdateJsonDynamicConfigParam)(nil),        // 56: admin.AddOrUpdateJsonDynamicConfigParam
	(*GetJsonDynamicConfigsParam)(nil),               // 57: admin.GetJsonDynamicConfigsParam
	(*JsonDynamicConfigsData)(nil),                   // 58: admin.JsonDynamicConfigsData
	(*GetJsonDynamicConfigsRsp)(nil),                 // 59: admin.GetJsonDynamicConfigsRsp
	(*GetJsonDynamicConfigReq)(nil),                  // 60: admin.GetJsonDynamicConfigReq
	(*GetJsonDynamicConfigRsp)(nil),                  // 61: admin.GetJsonDynamicConfigRsp
	(*DeleteJsonDynamicConfigReq)(nil),               // 62: admin.DeleteJsonDynamicConfigReq
	(*ProductCategory)(nil),                          // 63: model.ProductCategory
	(*wrapperspb.UInt64Value)(nil),                   // 64: google.protobuf.UInt64Value
	(*wrapperspb.UInt32Value)(nil),                   // 65: google.protobuf.UInt32Value
	(*Brand)(nil),                                    // 66: model.Brand
	(*ProductAttributeCategory)(nil),                 // 67: model.ProductAttributeCategory
	(*SkuStock)(nil),                                 // 68: model.SkuStock
	(*PrefrenceArea)(nil),                            // 69: model.PrefrenceArea
	(*ProductAttribute)(nil),                         // 70: model.ProductAttribute
	(PromotionType)(0),                               // 71: model.PromotionType
	(*ProductLadder)(nil),                            // 72: model.ProductLadder
	(*ProductFullReduction)(nil),                     // 73: model.ProductFullReduction
	(*MemberPrice)(nil),                              // 74: model.MemberPrice
	(*ProductAttributeValue)(nil),                    // 75: model.ProductAttributeValue
	(*SubjectProductRelation)(nil),                   // 76: model.SubjectProductRelation
	(*PrefrenceAreaProductRelation)(nil),             // 77: model.PrefrenceAreaProductRelation
	(*Product)(nil),                                  // 78: model.Product
	(*Subject)(nil),                                  // 79: model.Subject
	(*JsonDynamicConfig)(nil),                        // 80: model.JsonDynamicConfig
	(*CommonRsp)(nil),                                // 81: admin.CommonRsp
}
var file_admin_cms_admin_proto_depIdxs = []int32{
	63, // 0: admin.GetProductCategoryRsp.data:type_name -> model.ProductCategory
	64, // 1: admin.GetProductCategoriesParam.id:type_name -> google.protobuf.UInt64Value
	64, // 2: admin.GetProductCategoriesParam.parent_id:type_name -> google.protobuf.UInt64Value
	63, // 3: admin.ProductCategoriesData.data:type_name -> model.ProductCategory
	4,  // 4: admin.GetProductCategoriesRsp.data:type_name -> admin.ProductCategoriesData
	63, // 5: admin.ProductCategoryTreeItem.category:type_name -> model.ProductCategory
	63, // 6: admin.ProductCategoryTreeItem.children:type_name -> model.ProductCategory
	8,  // 7: admin.GetProductCategoriesWithChildrenRsp.data:type_name -> admin.ProductCategoryTreeItem
	65, // 8: admin.GetBrandsParam.show_status:type_name -> google.protobuf.UInt32Value
	13, // 9: admin.GetBrandsRsp.data:type_name -> admin.GetBrandsData
	66, // 10: admin.GetBrandsData.data:type_name -> model.Brand
	66, // 11: admin.GetBrandRsp.data:type_name -> model.Brand
	67, // 12: admin.ProductAttributeCategoriesData.data:type_name -> model.ProductAttributeCategory
	18, // 13: admin.GetProductAttributeCategoriesRsp.data:type_name -> admin.ProductAttributeCategoriesData
	67, // 14: admin.GetProductAttributeCategoryRsp.data:type_name -> model.ProductAttributeCategory
	68, // 15: admin.BatchUpdateSkuStockParam.sku_stocks:type_name -> model.SkuStock
	68, // 16: admin.SkuStocksData.data:type_name -> model.SkuStock
	26, // 17: admin.GetSkuStocksByProductIdRsp.data:type_name -> admin.SkuStocksData
	69, // 18: admin.PrefrenceAreasData.data:type_name -> model.PrefrenceArea
	30, // 19: admin.GetPrefrenceAreasRsp.data:type_name -> admin.PrefrenceAreasData
	69, // 20: admin.GetPrefrenceAreaRsp.data:type_name -> model.PrefrenceArea
	65, // 21: admin.GetProductAttributesParam.product_attribute_category_id:type_name -> google.protobuf.UInt32Value
	65, // 22: admin.GetProductAttributesParam.type:type_name -> google.protobuf.UInt32Value
	70, // 23: admin.ProductAttributesData.data:type_name -> model.ProductAttribute
	37, // 24: admin.GetProductAttributesRsp.data:type_name -> admin.ProductAttributesData
	70, // 25: admin.GetProductAttributeRsp.data:type_name -> model.ProductAttribute
	71, // 26: admin.AddOrUpdateProductParam.promotion_type:type_name -> model.PromotionType
	72, // 27: admin.AddOrUpdateProductParam.product_ladders:type_name -> model.ProductLadder
	73, // 28: admin.AddOrUpdateProductParam.product_full_reductions:type_name -> model.ProductFullReduction
	74, // 29: admin.AddOrUpdateProductParam.member_prices:type_name -> model.MemberPrice
	68, // 30: admin.AddOrUpdateProductParam.sku_stocks:type_name -> model.SkuStock
	75, // 31: admin.AddOrUpdateProductParam.product_attribute_values:type_name -> model.ProductAttributeValue
	76, // 32: admin.AddOrUpdateProductParam.subject_product_relations:type_name -> model.SubjectProductRelation
	77, // 33: admin.AddOrUpdateProductParam.prefrence_area_product_relations:type_name -> model.PrefrenceAreaProductRelation
	64, // 34: admin.GetProductsParam.id:type_name -> google.protobuf.UInt64Value
	64, // 35: admin.GetProductsParam.brand_id:type_name -> google.protobuf.UInt64Value
	65, // 36: admin.GetProductsParam.publish_status:type_name -> google.protobuf.UInt32Value
	65, // 37: admin.GetProductsParam.verify_status:type_name -> google.protobuf.UInt32Value
	64, // 38: admin.GetProductsParam.product_category_id:type_name -> google.protobuf.UInt64Value
	78, // 39: admin.ProductsData.data:type_name -> model.Product
	44, // 40: admin.GetProductsRsp.data:type_name -> admin.ProductsData
	78, // 41: admin.GetProductRsp.data:type_name -> model.Product
	79, // 42: admin.SubjectsData.data:type_name -> model.Subject
	51, // 43: admin.GetSubjectsRsp.data:type_name -> admin.SubjectsData
	79, // 44: admin.GetSubjectRsp.data:type_name -> model.Subject
	80, // 45: admin.JsonDynamicConfigsData.data:type_name -> model.JsonDynamicConfig
	58, // 46: admin.GetJsonDynamicConfigsRsp.data:type_name -> admin.JsonDynamicConfigsData
	80, // 47: admin.GetJsonDynamicConfigRsp.data:type_name -> model.JsonDynamicConfig
	0,  // 48: admin.CmsAdminApi.CreateProductCategory:input_type -> admin.AddOrUpdateProductCategoryParam
	0,  // 49: admin.CmsAdminApi.UpdateProductCategory:input_type -> admin.AddOrUpdateProductCategoryParam
	3,  // 50: admin.CmsAdminApi.GetProductCategories:input_type -> admin.GetProductCategoriesParam
	1,  // 51: admin.CmsAdminApi.GetProductCategory:input_type -> admin.GetProductCategoryReq
	6,  // 52: admin.CmsAdminApi.DeleteProductCategory:input_type -> admin.DeleteProductCategoryReq
	7,  // 53: admin.CmsAdminApi.GetProductCategoriesWithChildren:input_type -> admin.GetProductCategoriesWithChildrenReq
	10, // 54: admin.CmsAdminApi.CreateBrand:input_type -> admin.AddOrUpdateBrandParam
	10, // 55: admin.CmsAdminApi.UpdateBrand:input_type -> admin.AddOrUpdateBrandParam
	11, // 56: admin.CmsAdminApi.GetBrands:input_type -> admin.GetBrandsParam
	14, // 57: admin.CmsAdminApi.GetBrand:input_type -> admin.GetBrandReq
	16, // 58: admin.CmsAdminApi.DeleteBrand:input_type -> admin.DeleteBrandReq
	17, // 59: admin.CmsAdminApi.CreateProductAttributeCategory:input_type -> admin.AddOrUpdateProductAttributeCategoryParam
	17, // 60: admin.CmsAdminApi.UpdateProductAttributeCategory:input_type -> admin.AddOrUpdateProductAttributeCategoryParam
	19, // 61: admin.CmsAdminApi.GetProductAttributeCategories:input_type -> admin.GetProductAttributeCategoriesParam
	21, // 62: admin.CmsAdminApi.GetProductAttributeCategory:input_type -> admin.GetProductAttributeCategoryReq
	23, // 63: admin.CmsAdminApi.DeleteProductAttributeCategory:input_type -> admin.DeleteProductAttributeCategoryReq
	35, // 64: admin.CmsAdminApi.CreateProductAttribute:input_type -> admin.AddOrUpdateProductAttributeParam
	35, // 65: admin.CmsAdminApi.UpdateProductAttribute:input_type -> admin.AddOrUpdateProductAttributeParam
	36, // 66: admin.CmsAdminApi.GetProductAttributes:input_type -> admin.GetProductAttributesParam
	39, // 67: admin.CmsAdminApi.GetProductAttribute:input_type -> admin.GetProductAttributeReq
	41, // 68: admin.CmsAdminApi.DeleteProductAttribute:input_type -> admin.DeleteProductAttributeReq
	42, // 69: admin.CmsAdminApi.CreateProduct:input_type -> admin.AddOrUpdateProductParam
	42, // 70: admin.CmsAdminApi.UpdateProduct:input_type -> admin.AddOrUpdateProductParam
	43, // 71: admin.CmsAdminApi.GetProducts:input_type -> admin.GetProductsParam
	46, // 72: admin.CmsAdminApi.GetProduct:input_type -> admin.GetProductReq
	48, // 73: admin.CmsAdminApi.DeleteProduct:input_type -> admin.DeleteProductReq
	24, // 74: admin.CmsAdminApi.BatchUpdateSkuStock:input_type -> admin.BatchUpdateSkuStockParam
	25, // 75: admin.CmsAdminApi.GetSkuStocksByProductId:input_type -> admin.GetSkuStocksByProductIdParam
	49, // 76: admin.CmsAdminApi.CreateSubject:input_type -> admin.AddOrUpdateSubjectParam
	49, // 77: admin.CmsAdminApi.UpdateSubject:input_type -> admin.AddOrUpdateSubjectParam
	50, // 78: admin.CmsAdminApi.GetSubjects:input_type -> admin.GetSubjectsParam
	53, // 79: admin.CmsAdminApi.GetSubject:input_type -> admin.GetSubjectReq
	55, // 80: admin.CmsAdminApi.DeleteSubject:input_type -> admin.DeleteSubjectReq
	28, // 81: admin.CmsAdminApi.CreatePrefrenceArea:input_type -> admin.AddOrUpdatePrefrenceAreaParam
	28, // 82: admin.CmsAdminApi.UpdatePrefrenceArea:input_type -> admin.AddOrUpdatePrefrenceAreaParam
	29, // 83: admin.CmsAdminApi.GetPrefrenceAreas:input_type -> admin.GetPrefrenceAreasParam
	32, // 84: admin.CmsAdminApi.GetPrefrenceArea:input_type -> admin.GetPrefrenceAreaReq
	34, // 85: admin.CmsAdminApi.DeletePrefrenceArea:input_type -> admin.DeletePrefrenceAreaReq
	56, // 86: admin.CmsAdminApi.CreateJsonDynamicConfig:input_type -> admin.AddOrUpdateJsonDynamicConfigParam
	56, // 87: admin.CmsAdminApi.UpdateJsonDynamicConfig:input_type -> admin.AddOrUpdateJsonDynamicConfigParam
	57, // 88: admin.CmsAdminApi.GetJsonDynamicConfigs:input_type -> admin.GetJsonDynamicConfigsParam
	60, // 89: admin.CmsAdminApi.GetJsonDynamicConfig:input_type -> admin.GetJsonDynamicConfigReq
	62, // 90: admin.CmsAdminApi.DeleteJsonDynamicConfig:input_type -> admin.DeleteJsonDynamicConfigReq
	81, // 91: admin.CmsAdminApi.CreateProductCategory:output_type -> admin.CommonRsp
	81, // 92: admin.CmsAdminApi.UpdateProductCategory:output_type -> admin.CommonRsp
	5,  // 93: admin.CmsAdminApi.GetProductCategories:output_type -> admin.GetProductCategoriesRsp
	2,  // 94: admin.CmsAdminApi.GetProductCategory:output_type -> admin.GetProductCategoryRsp
	81, // 95: admin.CmsAdminApi.DeleteProductCategory:output_type -> admin.CommonRsp
	9,  // 96: admin.CmsAdminApi.GetProductCategoriesWithChildren:output_type -> admin.GetProductCategoriesWithChildrenRsp
	81, // 97: admin.CmsAdminApi.CreateBrand:output_type -> admin.CommonRsp
	81, // 98: admin.CmsAdminApi.UpdateBrand:output_type -> admin.CommonRsp
	12, // 99: admin.CmsAdminApi.GetBrands:output_type -> admin.GetBrandsRsp
	15, // 100: admin.CmsAdminApi.GetBrand:output_type -> admin.GetBrandRsp
	81, // 101: admin.CmsAdminApi.DeleteBrand:output_type -> admin.CommonRsp
	81, // 102: admin.CmsAdminApi.CreateProductAttributeCategory:output_type -> admin.CommonRsp
	81, // 103: admin.CmsAdminApi.UpdateProductAttributeCategory:output_type -> admin.CommonRsp
	20, // 104: admin.CmsAdminApi.GetProductAttributeCategories:output_type -> admin.GetProductAttributeCategoriesRsp
	22, // 105: admin.CmsAdminApi.GetProductAttributeCategory:output_type -> admin.GetProductAttributeCategoryRsp
	81, // 106: admin.CmsAdminApi.DeleteProductAttributeCategory:output_type -> admin.CommonRsp
	81, // 107: admin.CmsAdminApi.CreateProductAttribute:output_type -> admin.CommonRsp
	81, // 108: admin.CmsAdminApi.UpdateProductAttribute:output_type -> admin.CommonRsp
	38, // 109: admin.CmsAdminApi.GetProductAttributes:output_type -> admin.GetProductAttributesRsp
	40, // 110: admin.CmsAdminApi.GetProductAttribute:output_type -> admin.GetProductAttributeRsp
	81, // 111: admin.CmsAdminApi.DeleteProductAttribute:output_type -> admin.CommonRsp
	81, // 112: admin.CmsAdminApi.CreateProduct:output_type -> admin.CommonRsp
	81, // 113: admin.CmsAdminApi.UpdateProduct:output_type -> admin.CommonRsp
	45, // 114: admin.CmsAdminApi.GetProducts:output_type -> admin.GetProductsRsp
	47, // 115: admin.CmsAdminApi.GetProduct:output_type -> admin.GetProductRsp
	81, // 116: admin.CmsAdminApi.DeleteProduct:output_type -> admin.CommonRsp
	81, // 117: admin.CmsAdminApi.BatchUpdateSkuStock:output_type -> admin.CommonRsp
	27, // 118: admin.CmsAdminApi.GetSkuStocksByProductId:output_type -> admin.GetSkuStocksByProductIdRsp
	81, // 119: admin.CmsAdminApi.CreateSubject:output_type -> admin.CommonRsp
	81, // 120: admin.CmsAdminApi.UpdateSubject:output_type -> admin.CommonRsp
	52, // 121: admin.CmsAdminApi.GetSubjects:output_type -> admin.GetSubjectsRsp
	54, // 122: admin.CmsAdminApi.GetSubject:output_type -> admin.GetSubjectRsp
	81, // 123: admin.CmsAdminApi.DeleteSubject:output_type -> admin.CommonRsp
	81, // 124: admin.CmsAdminApi.CreatePrefrenceArea:output_type -> admin.CommonRsp
	81, // 125: admin.CmsAdminApi.UpdatePrefrenceArea:output_type -> admin.CommonRsp
	31, // 126: admin.CmsAdminApi.GetPrefrenceAreas:output_type -> admin.GetPrefrenceAreasRsp
	33, // 127: admin.CmsAdminApi.GetPrefrenceArea:output_type -> admin.GetPrefrenceAreaRsp
	81, // 128: admin.CmsAdminApi.DeletePrefrenceArea:output_type -> admin.CommonRsp
	81, // 129: admin.CmsAdminApi.CreateJsonDynamicConfig:output_type -> admin.CommonRsp
	81, // 130: admin.CmsAdminApi.UpdateJsonDynamicConfig:output_type -> admin.CommonRsp
	59, // 131: admin.CmsAdminApi.GetJsonDynamicConfigs:output_type -> admin.GetJsonDynamicConfigsRsp
	61, // 132: admin.CmsAdminApi.GetJsonDynamicConfig:output_type -> admin.GetJsonDynamicConfigRsp
	81, // 133: admin.CmsAdminApi.DeleteJsonDynamicConfig:output_type -> admin.CommonRsp
	91, // [91:134] is the sub-list for method output_type
	48, // [48:91] is the sub-list for method input_type
	48, // [48:48] is the sub-list for extension type_name
	48, // [48:48] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_admin_cms_admin_proto_init() }
func file_admin_cms_admin_proto_init() {
	if File_admin_cms_admin_proto != nil {
		return
	}
	file_admin_admin_proto_init()
	file_model_pms_product_category_proto_init()
	file_model_pms_brand_proto_init()
	file_model_pms_product_attribute_category_proto_init()
	file_model_pms_product_attribute_proto_init()
	file_model_pms_product_proto_init()
	file_model_pms_product_ladder_proto_init()
	file_model_pms_product_full_reduction_proto_init()
	file_model_pms_member_price_proto_init()
	file_model_pms_sku_stock_proto_init()
	file_model_pms_product_attribute_value_proto_init()
	file_model_cms_prefrence_area_product_relation_proto_init()
	file_model_cms_subject_product_relation_proto_init()
	file_model_cms_subject_proto_init()
	file_model_cms_prefrence_area_proto_init()
	file_model_cms_json_dynamic_config_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_admin_cms_admin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOrUpdateProductCategoryParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductCategoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductCategoryRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductCategoriesParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductCategoriesData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductCategoriesRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProductCategoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductCategoriesWithChildrenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductCategoryTreeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductCategoriesWithChildrenRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOrUpdateBrandParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBrandsParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBrandsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBrandsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBrandReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBrandRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBrandReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOrUpdateProductAttributeCategoryParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductAttributeCategoriesData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductAttributeCategoriesParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductAttributeCategoriesRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductAttributeCategoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductAttributeCategoryRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProductAttributeCategoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUpdateSkuStockParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSkuStocksByProductIdParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkuStocksData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSkuStocksByProductIdRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOrUpdatePrefrenceAreaParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPrefrenceAreasParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrefrenceAreasData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPrefrenceAreasRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPrefrenceAreaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPrefrenceAreaRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePrefrenceAreaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOrUpdateProductAttributeParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductAttributesParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductAttributesData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductAttributesRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductAttributeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductAttributeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProductAttributeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOrUpdateProductParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductsParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProductReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOrUpdateSubjectParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubjectsParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubjectsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubjectsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubjectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubjectRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubjectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOrUpdateJsonDynamicConfigParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJsonDynamicConfigsParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JsonDynamicConfigsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJsonDynamicConfigsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJsonDynamicConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJsonDynamicConfigRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_cms_admin_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteJsonDynamicConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_admin_cms_admin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   63,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_admin_cms_admin_proto_goTypes,
		DependencyIndexes: file_admin_cms_admin_proto_depIdxs,
		MessageInfos:      file_admin_cms_admin_proto_msgTypes,
	}.Build()
	File_admin_cms_admin_proto = out.File
	file_admin_cms_admin_proto_rawDesc = nil
	file_admin_cms_admin_proto_goTypes = nil
	file_admin_cms_admin_proto_depIdxs = nil
}
